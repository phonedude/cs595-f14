status: 200
content-length: 71470
content-location: http://www.roughtype.com/?p=3984
vary: Accept-Encoding
server: Apache
-content-encoding: gzip
link: <http://www.roughtype.com/?p=3984>; rel=shortlink
date: Wed, 24 Sep 2014 22:16:12 GMT
content-type: text/html; charset=UTF-8
x-pingback: http://www.roughtype.com/wp/xmlrpc.php
-varied-accept-encoding: gzip, deflate

<!DOCTYPE html>
<!--[if IE 7]>
<html id="ie7" lang="en-US">
<![endif]-->
<!--[if (gt IE 7) | (!IE)]><!-->
<html lang="en-US">
<!--<![endif]-->
<head>
<meta charset="UTF-8" />
<title>Is software de-skilling programmers? | ROUGH TYPE</title>
<link rel="profile" href="http://gmpg.org/xfn/11" />
<link rel="pingback" href="http://www.roughtype.com/wp/xmlrpc.php" />
<link rel="alternate" type="application/rss+xml" title="ROUGH TYPE &raquo; Feed" href="http://www.roughtype.com/?feed=rss2" />
<link rel="alternate" type="application/rss+xml" title="ROUGH TYPE &raquo; Comments Feed" href="http://www.roughtype.com/?feed=comments-rss2" />
<link rel="alternate" type="application/rss+xml" title="ROUGH TYPE &raquo; Is software de-skilling programmers? Comments Feed" href="http://www.roughtype.com/?feed=rss2&#038;p=3984" />
<link rel='stylesheet' id='jetpack-subscriptions-css'  href='http://www.roughtype.com/wp/wp-content/plugins/jetpack/modules/subscriptions/subscriptions.css?ver=4.0' type='text/css' media='all' />
<link rel='stylesheet' id='jetpack-widgets-css'  href='http://www.roughtype.com/wp/wp-content/plugins/jetpack/modules/widgets/widgets.css?ver=20121003' type='text/css' media='all' />
<link rel='stylesheet' id='mediaelement-css'  href='http://www.roughtype.com/wp/wp-includes/js/mediaelement/mediaelementplayer.min.css?ver=2.15.0' type='text/css' media='all' />
<link rel='stylesheet' id='wp-mediaelement-css'  href='http://www.roughtype.com/wp/wp-includes/js/mediaelement/wp-mediaelement.css?ver=4.0' type='text/css' media='all' />
<link rel='stylesheet' id='pilcrow-css'  href='http://www.roughtype.com/wp/wp-content/themes/pilcrow/style.css?ver=4.0' type='text/css' media='all' />
<link rel='stylesheet' id='sharedaddy-css'  href='http://www.roughtype.com/wp/wp-content/plugins/jetpack/modules/sharedaddy/sharing.css?ver=3.1.1' type='text/css' media='all' />
<link rel='stylesheet' id='genericons-css'  href='http://www.roughtype.com/wp/wp-content/plugins/jetpack/_inc/genericons/genericons/genericons.css?ver=3.1' type='text/css' media='all' />
<script type='text/javascript' src='http://www.roughtype.com/wp/wp-includes/js/jquery/jquery.js?ver=1.11.1'></script>
<script type='text/javascript' src='http://www.roughtype.com/wp/wp-includes/js/jquery/jquery-migrate.min.js?ver=1.2.1'></script>
<link rel="EditURI" type="application/rsd+xml" title="RSD" href="http://www.roughtype.com/wp/xmlrpc.php?rsd" />
<link rel="wlwmanifest" type="application/wlwmanifest+xml" href="http://www.roughtype.com/wp/wp-includes/wlwmanifest.xml" /> 
<link rel='prev' title='Tote that barge, tweet that tweet' href='http://www.roughtype.com/?p=3974' />
<link rel='next' title='The mind in the landscape' href='http://www.roughtype.com/?p=3997' />
<meta name="generator" content="WordPress 4.0" />
<link rel='canonical' href='http://www.roughtype.com/?p=3984' />
<link rel='shortlink' href='http://www.roughtype.com/?p=3984' />

<!-- Jetpack Open Graph Tags -->
<meta property="og:type" content="article" />
<meta property="og:title" content="Is software de-skilling programmers?" />
<meta property="og:url" content="http://www.roughtype.com/?p=3984" />
<meta property="og:description" content="One of the themes of &quot;The Great Forgetting,&quot; my essay in the new Atlantic, is the spread of de-skilling into the professional work force. Through the nineteenth and twentieth centuries, the mechani..." />
<meta property="article:published_time" content="2013-11-12T16:05:05+00:00" />
<meta property="article:modified_time" content="2013-11-14T04:52:33+00:00" />
<meta property="article:author" content="http://www.roughtype.com/?author=1" />
<meta property="og:site_name" content="ROUGH TYPE" />
<meta property="og:image" content="http://www.roughtype.com/wp/wp-content/uploads/2013/11/eclipse1.jpg" />
<meta name="twitter:site" content="@jetpack" />
<meta name="twitter:image" content="http://www.roughtype.com/wp/wp-content/uploads/2013/11/eclipse1.jpg?w=240" />
<meta name="twitter:card" content="summary" />
</head>

<body class="single single-post postid-3984 single-format-standard two-column content-sidebar color-light">
<div id="container" class="hfeed">
	<div id="page" class="blog">
		<div id="header">
						<div id="site-title">
				<span>
					<a href="http://www.roughtype.com/" title="ROUGH TYPE" rel="home">ROUGH TYPE</a>
				</span>
			</div>

			<div id="nav" role="navigation">
			  				<div class="skip-link screen-reader-text"><a href="#content" title="Skip to content">Skip to content</a></div>
								<div class="menu"><ul><li ><a href="http://www.roughtype.com/">Home</a></li><li class="page_item page-item-1631"><a href="http://www.roughtype.com/?page_id=1631">About</a></li><li class="page_item page-item-4944"><a href="http://www.roughtype.com/?page_id=4944">The Glass Cage</a></li></ul></div>
			</div><!-- #nav -->

			<div id="pic">
				<a href="http://www.roughtype.com/" rel="home">
								</a>
			</div><!-- #pic -->
		</div><!-- #header -->

		<div id="content-box">

<div id="content-container">
	<div id="content" role="main">

	
<div id="nav-above" class="navigation">
	<div class="nav-previous"><a href="http://www.roughtype.com/?p=3974" rel="prev"><span class="meta-nav">&larr;</span> Tote that barge, tweet that tweet</a></div>
	<div class="nav-next"><a href="http://www.roughtype.com/?p=3997" rel="next">The mind in the landscape <span class="meta-nav">&rarr;</span></a></div>
</div><!-- #nav-above -->

<div id="post-3984" class="post-3984 post type-post status-publish format-standard hentry category-uncategorized">
	<div class="entry-meta">

		November 12, 2013 &middot; 9:05 am	</div><!-- .entry-meta -->

	<h1 class="entry-title"><a href="http://www.roughtype.com/?p=3984" rel="bookmark">Is software de-skilling programmers?</a></h1>
	<div class="entry entry-content">
		<p><a href="http://i0.wp.com/www.roughtype.com/wp/wp-content/uploads/2013/11/eclipse1.jpg"><img class="alignnone size-full wp-image-3990" alt="eclipse1" src="http://i0.wp.com/www.roughtype.com/wp/wp-content/uploads/2013/11/eclipse1.jpg?resize=500%2C166" data-recalc-dims="1" /></a></p>
<p>One of the themes of &#8220;<a href="http://www.theatlantic.com/magazine/archive/2013/11/the-great-forgetting/309516/">The Great Forgetting</a>,&#8221; my essay in the new <em>Atlantic</em>, is the spread of de-skilling into the professional work force. Through the nineteenth and twentieth centuries, the mechanization of industry led to the de-skilling of many manual trades, turning craftsmen into machine operators. As software automates intellectual labor, there are signs that a similar trend is influencing white collar workers, from accountants to lawyers.</p>
<p>Software writers themselves don&#8217;t seem immune from the new de-skilling wave. T<span style="line-height: 1.7;">he longtime Google programmer Vivek Haldar</span><span style="line-height: 1.7;">, responding to my essay on his personal blog, </span><a style="line-height: 1.7;" href="http://blog.vivekhaldar.com/post/66660163006/sharp-tools-dull-minds">writes</a><span style="line-height: 1.7;"> of the danger of de-skilling inherent in modern integrated development environments (IDEs) like Eclipse and Visual Studio. IDEs automate many routine coding tasks, and as they&#8217;ve grown more sophisticated they&#8217;ve taken on higher-level tasks like restructuring, or &#8220;refactoring,&#8221; code:</span></p>
<blockquote><p>Modern IDEs are getting “helpful” enough that at times I feel like an IDE operator rather than a programmer. They have support for advanced refactoring. Linters can now tell you about design issues and code smells. The behavior all these tools encourage is not “think deeply about your code and write it carefully”, but “just write a crappy first draft of your code, and then the tools will tell you not just what’s wrong with it, but also how to make it better.”</p></blockquote>
<p>Haldar is not dismissing the benefits of IDEs, which, he argues, can lead to &#8220;a cleaner codebase&#8221; as well as greater productivity. His comments point to the essential tension that has always characterized technological de-skilling: the very real benefits of labor-saving technology come at the cost of a loss of human talent. The hard challenge is knowing where to draw the line—or just realizing that there is a line to be drawn.</p>
<p><em>Photo by <a href="http://www.flickr.com/photos/12280385@N04/7244159646/in/photolist-c39dhf-aTBJAP-c2C5oC-93LjNJ-c4uAgQ-8vnggq-8ojmLy-bp2p9z-bp2p8P-e6zyU5-e6tVdz-dt8mJ1-c2H7E9-8e49UB-dt8TN8-c2CL7C-c2DQSJ-c3TctJ-c2DYko-c2DYiQ-aTfp5i-aTfm2g-dSzZ1x-c3TgS9-c3TcRW-c3TfXf-c3TdhG-c3TeFE">Nathan Bergey</a>.</em></p>
<div class="sharedaddy sd-sharing-enabled"><div class="robots-nocontent sd-block sd-social sd-social-official sd-sharing"><h3 class="sd-title">Promulgate:</h3><div class="sd-content"><ul><li class="share-twitter"><div class="twitter_button"><iframe allowtransparency="true" frameborder="0" scrolling="no" src="http://platform.twitter.com/widgets/tweet_button.html?url=http%3A%2F%2Fwww.roughtype.com%2F%3Fp%3D3984&#038;counturl=http%3A%2F%2Fwww.roughtype.com%2F%3Fp%3D3984&#038;count=horizontal&#038;text=Is%20software%20de-skilling%20programmers%3F%3A" style="width:101px; height:20px;"></iframe></div></li><li class="share-facebook"><div class="like_button"><iframe src="http://www.facebook.com/plugins/like.php?href=http%3A%2F%2Fwww.roughtype.com%2F%3Fp%3D3984&amp;layout=button_count&amp;show_faces=false&amp;action=like&amp;colorscheme=light&amp;height=21&amp;locale=en_US&amp;width=90" scrolling="no" frameborder="0" style="border:none; overflow:hidden; width:96px; height:21px;" allowTransparency="true"></iframe></div></li><li class="share-email"><a rel="nofollow" class="share-email sd-button" href="http://www.roughtype.com/?p=3984&amp;share=email" target="_blank" title="Click to email this to a friend"><span>Email</span></a></li><li class="share-end"></li></ul></div></div></div>	</div><!-- .entry-content -->

	<div class="entry-links">
		<p class="comment-number"><a href="http://www.roughtype.com/?p=3984#comments" title="Comment on Is software de-skilling programmers?">19 Comments</a></p>

					<p class="entry-categories tagged">Filed under <a href="http://www.roughtype.com/?cat=1" rel="category">Uncategorized</a></p>
			<p class="entry-tags tagged"></p>
			</div><!-- .entry-links -->

</div><!-- #post-## -->

<div id="nav-below" class="navigation">
	<div class="nav-previous"><a href="http://www.roughtype.com/?p=3974" rel="prev"><span class="meta-nav">&larr;</span> Tote that barge, tweet that tweet</a></div>
	<div class="nav-next"><a href="http://www.roughtype.com/?p=3997" rel="next">The mind in the landscape <span class="meta-nav">&rarr;</span></a></div>
</div><!-- #nav-below -->


<div id="comments">

			<h3 id="comments-title" class="comment-head">
			19 Responses to <em>Is software de-skilling programmers?</em>		</h3>

		
		<ol class="comment-list">
			
		<li class="comment even thread-even depth-1" id="li-comment-43471">
			<div id="comment-43471" class="comment-container">
				<div class="comment-author vcard">
										<cite class="fn"><a href='http://thedisconnectbook.com' rel='external nofollow' class='url'>Raj</a></cite>				</div><!-- .comment-author .vcard -->

				
				<div class="comment-meta commentmetadata"><a href="http://www.roughtype.com/?p=3984&#038;cpage=1#comment-43471">
					November 12, 2013 at 5:43 pm</a>				</div><!-- .comment-meta .commentmetadata -->

				<div class="comment-body"><p>Well, the intent behind some of the IDE like environments is to help model more and more complex problems. For example, back in the day when the semiconductors chips had only a few transistors, designers used to lay them out by hand (I kid you not), but as the transistor count exploded, you now have automated tools taking care of all the low level routing and interconnect stuff, so that, the designers can focus on more complex system-level problems, network-level problems. Same with programming. In this context, I do not consider it as a deskilling. It is more like thinking in higher layers of abstraction, so that you can model the complexity, of whatever it is you are trying to solve, better. </p>
<p>Raj</p>
</div>

				<div class="reply">
									</div><!-- .reply -->
			</div><!-- #comment-##  -->

	</li><!-- #comment-## -->

		<li class="comment odd alt thread-odd thread-alt depth-1" id="li-comment-43475">
			<div id="comment-43475" class="comment-container">
				<div class="comment-author vcard">
										<cite class="fn">Anon</cite>				</div><!-- .comment-author .vcard -->

				
				<div class="comment-meta commentmetadata"><a href="http://www.roughtype.com/?p=3984&#038;cpage=1#comment-43475">
					November 12, 2013 at 10:39 pm</a>				</div><!-- .comment-meta .commentmetadata -->

				<div class="comment-body"><p>The only person concerned with this is the programmer, who is merely a labor saving device for an employer who needs the code for a business purpose of his or her own. The employer doesn&#8217;t care if you use an IDE, IEEE, ABC, or XYZ. They just want the code done. So really it&#8217;s all a matter of perspective.</p>
</div>

				<div class="reply">
									</div><!-- .reply -->
			</div><!-- #comment-##  -->

	</li><!-- #comment-## -->

		<li class="comment even thread-even depth-1" id="li-comment-43478">
			<div id="comment-43478" class="comment-container">
				<div class="comment-author vcard">
										<cite class="fn"><a href='http://about.me/lisaspangenberg' rel='external nofollow' class='url'>Lisa Spangenberg</a></cite>				</div><!-- .comment-author .vcard -->

				
				<div class="comment-meta commentmetadata"><a href="http://www.roughtype.com/?p=3984&#038;cpage=1#comment-43478">
					November 12, 2013 at 11:06 pm</a>				</div><!-- .comment-meta .commentmetadata -->

				<div class="comment-body"><p>I am not a programmer. While I can generally parse well-written and well organized code, I do so much like I read a complicated book in a language in which I am not fluent. </p>
<p>From the point at which I first became involved in hiring programmers and software engineers some twenty or so years ago, I made it a habit to ask potential hires to walk me through code they had written, explaining what each section did, and I asked to see code they had commented. </p>
<p>Many could do neither. </p>
<p>I didn&#8217;t hire them.</p>
</div>

				<div class="reply">
									</div><!-- .reply -->
			</div><!-- #comment-##  -->

	</li><!-- #comment-## -->

		<li class="comment odd alt thread-odd thread-alt depth-1" id="li-comment-43482">
			<div id="comment-43482" class="comment-container">
				<div class="comment-author vcard">
										<cite class="fn"><a href='http://www.kiv.zcu.cz/~brada' rel='external nofollow' class='url'>Premek</a></cite>				</div><!-- .comment-author .vcard -->

				
				<div class="comment-meta commentmetadata"><a href="http://www.roughtype.com/?p=3984&#038;cpage=1#comment-43482">
					November 13, 2013 at 1:07 am</a>				</div><!-- .comment-meta .commentmetadata -->

				<div class="comment-body"><p>While I agree with the &#8220;higher abstraction level&#8221; argument, the point of the post is very clear and real &#8212; I should first master any technique like refactoring using &#8220;just my head and hands&#8221; in order to understand its assumptions, working and its effects; only then I can fully appreciate the increased efficiency, quality etc brought by tools and use them as their master.</p>
</div>

				<div class="reply">
									</div><!-- .reply -->
			</div><!-- #comment-##  -->

	</li><!-- #comment-## -->

		<li class="comment even thread-even depth-1" id="li-comment-43481">
			<div id="comment-43481" class="comment-container">
				<div class="comment-author vcard">
										<cite class="fn"><a href='http://www.reversing-entropy.com/' rel='external nofollow' class='url'>Robert Impey</a></cite>				</div><!-- .comment-author .vcard -->

				
				<div class="comment-meta commentmetadata"><a href="http://www.roughtype.com/?p=3984&#038;cpage=1#comment-43481">
					November 13, 2013 at 1:07 am</a>				</div><!-- .comment-meta .commentmetadata -->

				<div class="comment-body"><p>I&#8217;m not sure that this is a problem. In the end, it&#8217;s the capability of the software that is an asset. Having to write it is a cost. If a computer can complete a task as well or better than the most skilled programmers, we can all move forward.</p>
<p>I&#8217;ve come across old school developers who refuse to write unit tests. They regard them as a safety net for morons who can&#8217;t predict what their code will do. Unsurprisingly, these developers get lots of practice debugging their code and end up being very skilled at it. For my part, I prefer writing tests and the computer confirming that my code is running correctly rather to relying solely on my skills at reasoning about code in advace and having to a lot of my time honing my debugging skills.</p>
</div>

				<div class="reply">
									</div><!-- .reply -->
			</div><!-- #comment-##  -->

	</li><!-- #comment-## -->

		<li class="comment odd alt thread-odd thread-alt depth-1" id="li-comment-43484">
			<div id="comment-43484" class="comment-container">
				<div class="comment-author vcard">
										<cite class="fn"><a href='http://www.fiedler-audio.com' rel='external nofollow' class='url'>Thomas</a></cite>				</div><!-- .comment-author .vcard -->

				
				<div class="comment-meta commentmetadata"><a href="http://www.roughtype.com/?p=3984&#038;cpage=1#comment-43484">
					November 13, 2013 at 1:52 am</a>				</div><!-- .comment-meta .commentmetadata -->

				<div class="comment-body"><p>Hi,</p>
<p>I completely agree with the author. Another part where I noticed a great deskilling is when people start to learn programming the object oriented way. Since they never had to think about doing complex things with only data and functions (C, ASM) they did not develop the skill to analyze problems  to the deepest possible level. I noticed it when I had to work with such programmers on DSP-code. It was very difficult for them to understand the more abstract code since it is further away from real world object based thinking.</p>
<p>Thomas</p>
</div>

				<div class="reply">
									</div><!-- .reply -->
			</div><!-- #comment-##  -->

	</li><!-- #comment-## -->

		<li class="comment even thread-even depth-1" id="li-comment-43494">
			<div id="comment-43494" class="comment-container">
				<div class="comment-author vcard">
										<cite class="fn">Rob</cite>				</div><!-- .comment-author .vcard -->

				
				<div class="comment-meta commentmetadata"><a href="http://www.roughtype.com/?p=3984&#038;cpage=1#comment-43494">
					November 13, 2013 at 5:25 am</a>				</div><!-- .comment-meta .commentmetadata -->

				<div class="comment-body"><p>Thomas&#8217; comment above is interesting, in that it reminds me of two things:</p>
<p>Firstly, people have been saying for a long time that &#8220;programmers these days&#8221; don&#8217;t understand how the underlying systems work.  This is a fairly <a href="http://c2.com/cgi/wiki?RealProgrammer" rel="nofollow">well-known meme</a> by now.</p>
<p>Secondly, it&#8217;s mostly bollocks.  Programming is still a field where solving a problem just opens up more problems to solve &#8211; you figured out how to make networking easy enough that anyone can write networked apps, now you need to figure out how to handle the load this is putting on your servers, and so on. </p>
<p>Also, IDEs haven&#8217;t actually got all that more powerful in the last 30 years.  I do most of my coding these days using <a href="https://en.wikipedia.org/wiki/Emacs" rel="nofollow">Emacs</a>, a piece of software several years older than I am.  We&#8217;re still digesting ideas Alan Kay had years ago, and there&#8217;s enough of a backlog to keep us going for a long time yet.</p>
<p>Finally, most of the problems in software development aren&#8217;t really problems to do with churning out &#8220;code&#8221;, they&#8217;re about understanding the problem domain and selecting the appropriate technologies to solve whatever problem you&#8217;re given.  IDEs are a very, very long way off being able to anything more than help humans overcome drudge-work in those areas.</p>
<p>I think it&#8217;s interesting to wonder whether or not the sheer scope of the applications of programming (pun intended) means that de-skilling is unlikely, because each advance opens up more new opportunities than it removes, at least for the foreseeable future, and the programmers who find their skills (knowledge of how to do the drudge work that IDEs can remove) are also the same people best placed to take advantage of the new opportunities, because just understanding how computer systems work is vital, and they have that skill.  I must, of course, admit the possibility of wishful thinking on my part, but this seems to be plausible at the very least.</p>
</div>

				<div class="reply">
									</div><!-- .reply -->
			</div><!-- #comment-##  -->

	</li><!-- #comment-## -->

		<li class="comment odd alt thread-odd thread-alt depth-1" id="li-comment-43495">
			<div id="comment-43495" class="comment-container">
				<div class="comment-author vcard">
										<cite class="fn"><a href='http://iCueProject.com' rel='external nofollow' class='url'>R.Carey</a></cite>				</div><!-- .comment-author .vcard -->

				
				<div class="comment-meta commentmetadata"><a href="http://www.roughtype.com/?p=3984&#038;cpage=1#comment-43495">
					November 13, 2013 at 6:50 am</a>				</div><!-- .comment-meta .commentmetadata -->

				<div class="comment-body"><p>I see it.  </p>
<p>The tool was meant to increase productivity.  The craftsman can leverage it for great things, meanwhile the new-comer can use it for quick entry and not feel the need to become a craftsman.  Before these tools (from IDEs to digital cameras), one <em>had</em> to  exert discipline practice to become a skilled.  These advanced tools make it easy to be &#8220;good enough. &#8221; </p>
<p>Ironically, the tools that should allow us to go deeper and do more instead allow us to spend less time to do the same.  Imagine what a motivated and disciplined person can do if he pushes on to become a craftsman while leveraging the tools.   (Too bad there is not tool to instill motivation and discipline.)</p>
</div>

				<div class="reply">
									</div><!-- .reply -->
			</div><!-- #comment-##  -->

	</li><!-- #comment-## -->

		<li class="comment byuser comment-author-nickc bypostauthor even thread-even depth-1" id="li-comment-43496">
			<div id="comment-43496" class="comment-container">
				<div class="comment-author vcard">
										<cite class="fn">Nick</cite>				</div><!-- .comment-author .vcard -->

				
				<div class="comment-meta commentmetadata"><a href="http://www.roughtype.com/?p=3984&#038;cpage=1#comment-43496">
					November 13, 2013 at 8:19 am</a>				</div><!-- .comment-meta .commentmetadata -->

				<div class="comment-body"><p>Thanks for the thoughtful comments.</p>
<p>re: &#8220;each advance opens up more new opportunities than it removes&#8221;</p>
<p>This is a common defense of automation in pretty much all fields. (See the quote from Alfred North Whitehead in my Atlantic piece.) And it&#8217;s a good defense, as it&#8217;s very often true. But there are also a couple of counterarguments:</p>
<p>1. At some point, as the capabilities of automation software advance, the software aid begins to take over essential tasks &#8211; sensing, analysis, diagnosis, judgment making &#8211; and the human shifts to more routine functions such as input and monitoring. In other words, with the automation of skilled work there&#8217;s a point at which there are no &#8220;higher-level tasks&#8221; for the human to climb to.</p>
<p>2. Lower-level tasks may be seen as mere drudge work by the experienced expert, but they can actually be essential to the development of rich expertise by a person learning the trade. Automation can, in other words, benefit the master, but harm the apprentice (as R. Carey suggests in the preceding comment). And in some cases even the master begins to experience skill loss by not practicing the &#8220;lower level&#8221; tasks. (This has been seen among veteran pilots depending on autopilot systems, for example.)</p>
<p>Not being a programmer myself, I would be interested in hearing whether you think either of those factors apply to coding.</p>
<p>Nick</p>
</div>

				<div class="reply">
									</div><!-- .reply -->
			</div><!-- #comment-##  -->

	</li><!-- #comment-## -->

		<li class="comment odd alt thread-odd thread-alt depth-1" id="li-comment-43498">
			<div id="comment-43498" class="comment-container">
				<div class="comment-author vcard">
										<cite class="fn">Walter Hehl</cite>				</div><!-- .comment-author .vcard -->

				
				<div class="comment-meta commentmetadata"><a href="http://www.roughtype.com/?p=3984&#038;cpage=1#comment-43498">
					November 13, 2013 at 9:54 am</a>				</div><!-- .comment-meta .commentmetadata -->

				<div class="comment-body"><p>I think this is a general consequence of the development of science and technology: Moving to higher levels (in S/W, in abstraction &#8211; in general, hiding the complexity to the non-professional). This implies unfortunately, that fewer and fewer people &#8220;understand&#8221; what is inside &#8211; and everything becomes magic. This makes it hard to distinguish for them between reality and fantasy, science and pseudoscience.</p>
</div>

				<div class="reply">
									</div><!-- .reply -->
			</div><!-- #comment-##  -->

	</li><!-- #comment-## -->

		<li class="comment even thread-even depth-1" id="li-comment-43499">
			<div id="comment-43499" class="comment-container">
				<div class="comment-author vcard">
										<cite class="fn"><a href='http://thedisconnectbook.com' rel='external nofollow' class='url'>Raj Karamchedu</a></cite>				</div><!-- .comment-author .vcard -->

				
				<div class="comment-meta commentmetadata"><a href="http://www.roughtype.com/?p=3984&#038;cpage=1#comment-43499">
					November 13, 2013 at 10:41 am</a>				</div><!-- .comment-meta .commentmetadata -->

				<div class="comment-body"><p><i>Nick: 2. Lower-level tasks may be seen as mere drudge work by the experienced expert, but they can actually be essential to the development of rich expertise by a person learning the trade. </i></p>
<p>It is not that. The so-called &#8220;lower-level&#8221; tasks, in programming, teach to some extent, but not a whole lot.  The &#8220;lower-level&#8221; tasks in programming are, in my book, different from the so-called &#8220;lower-level&#8221; tasks in other manual labor. In other sorts of labor and work, you&#8217;d continue to enjoy the work, derive satisfaction whether the task is low-level or not. But in programming it is different. You don&#8217;t learn anything after a while. It&#8217;s roughly like this: you learn the alphabet of the language, learn how to construct sentences, learn to read fiction, poetry, and now some of us may not exactly enjoy going back to writing exercise sentences from the grammar book, do we? We may want to write sentences, paragraphs and poems of our own, which are dense with meaning and what not. We are exercising the complexity of the language, but are we not also going to higher levels of abstraction? How is this any different? </p>
<p>Raj</p>
</div>

				<div class="reply">
									</div><!-- .reply -->
			</div><!-- #comment-##  -->

	</li><!-- #comment-## -->

		<li class="comment odd alt thread-odd thread-alt depth-1" id="li-comment-43507">
			<div id="comment-43507" class="comment-container">
				<div class="comment-author vcard">
										<cite class="fn">Rob</cite>				</div><!-- .comment-author .vcard -->

				
				<div class="comment-meta commentmetadata"><a href="http://www.roughtype.com/?p=3984&#038;cpage=1#comment-43507">
					November 13, 2013 at 12:44 pm</a>				</div><!-- .comment-meta .commentmetadata -->

				<div class="comment-body"><p>Nick, since you asked, I do have a theory about this!  To answer your points directly first though:</p>
<blockquote><p>1. &#8230;with the automation of skilled work there’s a point at which there are no “higher-level tasks” for the human to climb to&#8230;</p></blockquote>
<p>On a long enough timeline, the survival rate for all professions must decline to zero.  I&#8217;m not convinced that software development is advancing particularly quickly towards this point, and there are counter-acting forces which are creating new higher-level tasks almost as fast as the lower ones can be eliminated.</p>
<blockquote><p>2. Lower-level tasks may be seen as mere drudge work by the experienced expert, but they can actually be essential to the development of rich expertise by a person learning the trade. </p></blockquote>
<p>I do recognise this, and I&#8217;ve sometimes found it hard to train people junior to myself because they don&#8217;t know about some of the things that were taught to me as being fundamental.  However, I&#8217;ve concluded that in many cases they just don&#8217;t need that knowledge.  A good mindset and a grounding in good software design principles is much more durable than &#8220;how-to&#8221; knowledge.  It&#8217;s also the case that IDEs and other tools really don&#8217;t transform the software development process as much as Vivek Haldar&#8217;s quote suggests &#8211; it&#8217;s still about typing stuff into a text editor and checking to see that the end result is what you thought it would be.  We only really need the kind of tools Haldar mentions because some programming languages are painfully verbose and &#8220;refactoring&#8221; code in these languages is just incredibly boring and low-value as a way of spending one&#8217;s time.  One could easily achieve the same effect by adopting better languages, but nobody would call that &#8216;de-skilling&#8217;.</p>
<p>My grand theory to explain why de-skilling isn&#8217;t happening is that software development is a world in which systems have very clear levels of abstraction, and in which it is a strongly-held principle that the lower levels of a system should not become visible to the higher levels (there are exceptions, of course, but the general principle holds).  Systems which fail to adhere to this principle are described as &#8220;<a href="http://www.joelonsoftware.com/articles/LeakyAbstractions.html" rel="nofollow">leaky abstractions</a>&#8220;, which is very much a pejorative.  To print some text to the screen, it is not necessary to know <em>how</em> the computer does this, only to know that there is a reliable mechanism for doing so, and you can compose your own abstractions on top of this (for example, printing whole documents).  Software developers learn that building software is a process of trying to get the messy, lower-level stuff to behave in a regular, predictable way so that we can reason about it using more tractable high-level concepts.</p>
<p>Even the most basic program such as &#8220;Hello, world&#8221; operates at many levels above the &#8220;bare metal&#8221;, abstracting away questions of physics, electronics, the von Neumann architecture (memory, CPUs and so forth), encoding of text into binary form, loading of executable code into memory, operating systems, video output and many other things.  And the canonical &#8220;Hello, world&#8221; was written in C, which is nowadays considered to be low on the ladder of abstraction.</p>
<p>Thus a modern developer creating web applications is standing on the shoulders of giants, and those giants are standing on particularly tall mountains which jut forth from a world which sits astride four enormous elephants and a, if not quite infinite, still quite considerable, stack of turtles.  Our intuition (expressed by Thomas) is that this <em>shouldn&#8217;t work</em>, and that the incredible ignorance that web developers have of the vital matters of memory management, interrupt request handlers, multi-threading and concurrency, combined with their inability to whip out a debugger and start combing through a hex dump of their application&#8217;s memory, should render them thoroughly incapable of useful work, but this turns out to be quite wrong.  It&#8217;s shaped by our experience with the world of physical stuff, where different rules apply.</p>
<p>For every bit of complexity that gets taken away from developers, a near-equal amount is made available at higher levels of abstraction.  Modern developers don&#8217;t need to think so much about how to tightly manage the resources of a single machine, and probably wouldn&#8217;t be capable of doing so, but they often have to worry about how to manage the resources of whole networks of machines working together, something that the older generation worked hard to make possible.  It&#8217;s also true that they <a href="http://en.wikipedia.org/wiki/Garbage_collection_(computer_science)" rel="nofollow">don&#8217;t have to</a> know about low-level resource management, and this is a good thing.</p>
<p>In my view, the reason this works is that software development really does occur in a &#8220;virtual reality&#8221; in which the abstraction between different levels of a system is fairly rigorously policed and systems are explicitly constructed with this goal in mind.  Computer systems are designed so that it&#8217;s OK if you don&#8217;t know what&#8217;s going on at the lower level most of the time (I appreciate that this is not always the case, but the cases where lower-level concerns predominate are rare and can be tackled by specialists).  You&#8217;re building stuff that works out of lego bricks of code, and so long as that code behaves as advertised you really don&#8217;t need to know how it works.  You&#8217;re never really harmed by knowing more (although it can sometimes cause premature optimisation, as you spend too much time mucking about in the lower levels) and in general it&#8217;s a good thing to be aware of what sits beneath your code, but it&#8217;s unfeasible and unnecessary to expect someone to know, say, more than three levels of abstraction either side of their normal area of work[1].</p>
<p>This contrasts with ordinary reality, where the abstractions are more likely to be leaky, and ignorance of the lower levels of reality can be deeply problematic.  A lot of academic disagreement (in particular <em>anything</em> which is described as &#8220;humanities vs. science&#8221;[2]) is actually a disagreement about whether or not a lower level of abstraction is important at higher levels, either because it constrains the set of valid theories at higher levels (say, in the way that the laws of thermodynamics constrain theories of climate, or prove perpetual motion impossible) or because the lower level is theorised to have some kind of emergent property which actively shapes the higher level subject (say, the attempts to find microfoundations for macroeconomics, the role of evolution in psychology or the relevance of neuroscience to sociology).  Ignorance of the lower levels can leave you out in the cold if it turns out that your theories conflict with more robust theories that they&#8217;re supposed to rest upon.  On a more prosaic level, we might assume that our bathrooms present abstractions over systems of plumbing, but those often turn out to be leaky in both senses of the word and we&#8217;re in trouble if we don&#8217;t know something about how they work.</p>
<p>Thus de-skilling in real-world scenarios is problematic for the people being de-skilled, because the knowledge they give up is more valuable than the capabilities and opportunities they gain in exchange.  It would be risky to build a nuclear power station without knowing everything about how it works down to the level of physics, and once the <a href="http://www.theguardian.com/environment/2013/oct/14/british-hinkley-nuclear-contracts-edf" rel="nofollow">knowledge is lost</a> it&#8217;s very hard to get it back again.  In contrast, you can build Instagram without necessarily knowing much at all about electronics or even operating systems[3].  Of course, at an individual level it can still be a problem if your particular technical specialism ends up being made obsolete, but three factors work in your favour here: the new stuff is often built on top of the old stuff that you already know inside-out; secondly, the new stuff is genuinely new so there&#8217;s not a lot of competition for jobs and you&#8217;ve already proven your abilities by working in the field; finally, there&#8217;s a fractal nature to computer systems design which means that the patterns we employ at higher levels of abstraction are pretty similar to the patterns that occur at the lower levels.  For the price of a bit of discomfort and some time spent with a book and computer terminal, you can gain enough useful knowledge to offset the losses you suffer from the obsolescence of your old knowledge.</p>
<p>In saying all of this, I&#8217;m making software engineering sound a lot more impressive than it is.  From the inside, these clean divisions between abstraction layers don&#8217;t look quite so perfect, and the general consensus is that the industry has <a href="http://www.technologyreview.com/featuredstory/401594/why-software-is-so-bad/" rel="nofollow">failed</a>, big-time, to deliver on the promise of composable software.  Such complaints have existed for <a href="http://en.wikipedia.org/wiki/Software_crisis" rel="nofollow">a long time</a>, and are often made by the most respected people <a href="http://harmful.cat-v.org/software/" rel="nofollow">in the field</a>.  In this view, <a href="http://vimeo.com/71278954" rel="nofollow">the last 40 years has been a huge missed opportunity</a> to make programming easier (if you only click one of the preceding links, make it that one, but be prepared to spend 40 minutes watching the video).  I wouldn&#8217;t disagree with any of the specific examples, but I think that the fact that software engineers care so much about this in the first place, and that they feel <em>entitled</em> to care about it, leads to systems that are much closer to the ideal of perfect abstraction than would be possible in other circumstances.</p>
<p>Will this process of new capabilities compensating for sunk-cost knowledge come to an end?  I suppose it might.  According to Marc Andreessen&#8217;s &#8220;software is eating the world&#8221; theory, we might guess that the industry can only really expand by cannibalizing external reality, taking more stuff from the real world and putting it into computers where it becomes part of the domain of the software engineers, fuel for another round of development, and there&#8217;s a limit to how much of the world remains to be eaten.  Maybe we&#8217;ll create computers that can write better software than we can, but I wouldn&#8217;t hold my breath waiting for that (about 15 years ago I was told that going into software development was a mistake because this kind of AI was imminent; this turned out to be bad advice!).  All told, I can&#8217;t see de-skilling as a serious problem, but then I&#8217;ve just quoted someone making a bold prediction about the future who was probably just as sure in his view as I am in mine.</p>
<p>Well, that turned out a bit longer than I planned.  Sadly, text editors can&#8217;t yet tell me how to make my comments more concise.</p>
<p>[1] The term &#8220;<a href="http://www.laurencegellert.com/2012/08/what-is-a-full-stack-developer/" rel="nofollow">full-stack developer</a>&#8221; has been used to describe people who have supposedly complete knowledge of the systems they work with but, as that link shows, this really just means knowledge of things a few levels above and below what most of their peers know.</p>
<p>[2] In the real world, we&#8217;re generally not <em>constructing</em> abstractions, we&#8217;re <em>reconciling</em> them, trying to figure out the missing layers between thermodynamics and climatology, or linguistics and poetry.  Sometimes scientists get a bit over-excited and think that their new abstraction layer provides the key to understanding something that the humanities has already provided an account of, and a disagreement ensues; generally the scientists should be a bit more humble.  Equally, sometimes the humanists deny the desirability or even the possibility of integrating lower-level knowledge with higher-level knowledge, dismissing it as &#8220;reductionism&#8221;.  You can see Steven Pinker and Leon Wieseltier arguing past each other on this subject <a href="www.newrepublic.com/article/114548/leon-wieseltier-responds-steven-pinkers-scientism" rel="nofollow">here</a>.</p>
<p>[3] You&#8217;ll need to know, say, how to use and administer a Linux server.  But you won&#8217;t need to know your way around the Linux kernel; the iOS devices your app code is running on also do a fairly good job of shielding you from OS internals, by design.</p>
</div>

				<div class="reply">
									</div><!-- .reply -->
			</div><!-- #comment-##  -->

	</li><!-- #comment-## -->

		<li class="comment even thread-even depth-1" id="li-comment-43516">
			<div id="comment-43516" class="comment-container">
				<div class="comment-author vcard">
										<cite class="fn"><a href='http://rosetree.de' rel='external nofollow' class='url'>Micha</a></cite>				</div><!-- .comment-author .vcard -->

				
				<div class="comment-meta commentmetadata"><a href="http://www.roughtype.com/?p=3984&#038;cpage=1#comment-43516">
					November 14, 2013 at 12:32 am</a>				</div><!-- .comment-meta .commentmetadata -->

				<div class="comment-body"><p>At the moment I am making an apprenticeship as a software developer in Germany. What we learn is in the most cases using Visual Studio. Except of PHP or SQL, we never made something without VS. This surely makes it easier to write applications. But I feel like I do not really learn something in school.<br />
The whole GUI creating is clicking, dragging and resizing. I have no real idea what is in the code behind.</p>
</div>

				<div class="reply">
									</div><!-- .reply -->
			</div><!-- #comment-##  -->

	</li><!-- #comment-## -->

		<li class="comment odd alt thread-odd thread-alt depth-1" id="li-comment-43526">
			<div id="comment-43526" class="comment-container">
				<div class="comment-author vcard">
										<cite class="fn">Walter Hehl</cite>				</div><!-- .comment-author .vcard -->

				
				<div class="comment-meta commentmetadata"><a href="http://www.roughtype.com/?p=3984&#038;cpage=1#comment-43526">
					November 14, 2013 at 5:10 am</a>				</div><!-- .comment-meta .commentmetadata -->

				<div class="comment-body"><p>This is a great chain of comments, in particular from you, Rob:<br />
No problem with the length of your text.<br />
Thanks for the &#8220;full-stack-developer&#8221; notion &#8211; I think this is a good description of a real SW-prof! Of course, some center of knowledge is natural.<br />
Two historical remarks:<br />
First, I remember the first Telco-programs &#8220;BTAM&#8221; or earlier from IBM: Every aspect of the system was handled in ONE program: line protocol, character translations, line errors, and seat reservations, buffer overflows, what have you. Later, layers of functions and expertise became defined leading to TCAM and SNA etc etc.. At least the chief programmer was full-stack (but did not explicitly know). And later the communication architects.</p>
<p>Second, a smart measure for the devloper&#8217;s work:<br />
I remember the IBM measure for developer&#8217;s work &#8220;Function Points, FP&#8221;.<br />
This is the number of non-trivial decisions made during programming.<br />
I suppose that this number FP/ people year is a constant (has been the last 40 year)  for a good guy. Maybe by definition. Just that the decisions became on a higher level &#8230;.</p>
<p>It is impossible to overestimate these learnings in general for the Society: SW is THE model discipline for handling complexity everywhere, often directly by converging, sometimes  only &#8220;philosophically&#8221; or by analogy.<br />
Take medicine as example: We need a &#8220;full-stack-medicine&#8221; and &#8220;full-stack-doctor&#8221; (with a center of knowledge).<br />
The full stack knowledge &#8220;anchors&#8221; some upper method to basics and stabilizes the whole system. Otherwise you get a flood of pseudomedicines (helas, we have them) &#8230; And we know that hormones from deep below in our body stack can cause a psychic storm &#8230;</p>
<p>I believe that people in general can learn a lot from our experience in SW engineering and the shift in skills &#8211; SW  systems are gigantic, but they must work (yes!), and even perform! And if not, it is visible.</p>
</div>

				<div class="reply">
									</div><!-- .reply -->
			</div><!-- #comment-##  -->

	</li><!-- #comment-## -->

		<li class="comment byuser comment-author-nickc bypostauthor even thread-even depth-1" id="li-comment-43527">
			<div id="comment-43527" class="comment-container">
				<div class="comment-author vcard">
										<cite class="fn">Nick</cite>				</div><!-- .comment-author .vcard -->

				
				<div class="comment-meta commentmetadata"><a href="http://www.roughtype.com/?p=3984&#038;cpage=1#comment-43527">
					November 14, 2013 at 6:19 am</a>				</div><!-- .comment-meta .commentmetadata -->

				<div class="comment-body"><p>Rob,</p>
<p>Thanks.</p>
<p>You write: &#8220;Systems which fail to adhere to this principle are described as &#8216;<a href="http://www.joelonsoftware.com/articles/LeakyAbstractions.html" rel="nofollow">leaky abstractions</a>&#8216;, which is very much a pejorative.&#8221; The link is to an old Joel Spolsky post. But Spolsky&#8217;s point is that all abstractions, or at least all &#8220;nontrivial&#8221; abstractions, are to some degree leaky, and hence the less you know about the lower levels of abstraction, the more trouble you&#8217;ll be in when those levels begin to leak into the level you&#8217;re working at. Spolsky writes: </p>
<p>&#8220;The law of leaky abstractions means that whenever somebody comes up with a wizzy new code-generation tool that is supposed to make us all ever-so-efficient, you hear a lot of people saying &#8216;learn how to do it manually first, then use the wizzy tool to save time.&#8217; Code generation tools which pretend to abstract out something, like all abstractions, leak, and the only way to deal with the leaks competently is to learn about how the abstractions work and what they are abstracting. So the abstractions save us time working, but they don&#8217;t save us time learning.&#8221;</p>
<p>He seems to be suggesting that there is indeed a real danger of deskilling if one learns on and depends on coding tools that make it unnecessary (at least until problems arise) to understand what&#8217;s going on beneath the abstraction. That also implies that the more levels of abstraction you have, the more rickety the whole system becomes, even though most of the time it presents a very good illusion of stability.</p>
<p>Also: as Micha&#8217;s comment suggests, there&#8217;s an existential angle here, too. Even if everything works fine, the coder&#8217;s sense of not really understanding what&#8217;s going on behind the veneer of automation can lessen the fulfillment gained from the work. I think this was also one of Haldar&#8217;s points when he described feeling like an &#8220;IDE operator.&#8221;</p>
</div>

				<div class="reply">
									</div><!-- .reply -->
			</div><!-- #comment-##  -->

	</li><!-- #comment-## -->

		<li class="comment byuser comment-author-nickc bypostauthor odd alt thread-odd thread-alt depth-1" id="li-comment-43528">
			<div id="comment-43528" class="comment-container">
				<div class="comment-author vcard">
										<cite class="fn">Nick</cite>				</div><!-- .comment-author .vcard -->

				
				<div class="comment-meta commentmetadata"><a href="http://www.roughtype.com/?p=3984&#038;cpage=1#comment-43528">
					November 14, 2013 at 6:29 am</a>				</div><!-- .comment-meta .commentmetadata -->

				<div class="comment-body"><p>By the way (this is a trivial but perhaps telling example), in order to put that link to Spolsky&#8217;s  piece into my prior comment (it was stripped out in cutting and pasting), I had to enter the &#8220;a href&#8221; tag by hand. I could do that because when I started blogging eight years ago, the tool I used required all tags to be handcoded. If I started blogging today using WordPress, which automates the composition of tags (and entirely hides the tags from view in normal circumstances), I would likely not have known how to enter that link. That simple task would have been baffling to me.</p>
</div>

				<div class="reply">
									</div><!-- .reply -->
			</div><!-- #comment-##  -->

	</li><!-- #comment-## -->

		<li class="comment even thread-even depth-1" id="li-comment-43545">
			<div id="comment-43545" class="comment-container">
				<div class="comment-author vcard">
										<cite class="fn"><a href='http://blog.vivekhaldar.com' rel='external nofollow' class='url'>Vivek Haldar</a></cite>				</div><!-- .comment-author .vcard -->

				
				<div class="comment-meta commentmetadata"><a href="http://www.roughtype.com/?p=3984&#038;cpage=1#comment-43545">
					November 14, 2013 at 9:15 pm</a>				</div><!-- .comment-meta .commentmetadata -->

				<div class="comment-body"><p>This is an interesting comment thread!</p>
<p>I think Nick raises two very interesting questions in his comment above, which I try to address in this follow-on post:</p>
<p><a href="http://blog.vivekhaldar.com/post/67030281981/automating-software-engineering" rel="nofollow">http://blog.vivekhaldar.com/post/67030281981/automating-software-engineering</a></p>
</div>

				<div class="reply">
									</div><!-- .reply -->
			</div><!-- #comment-##  -->

	</li><!-- #comment-## -->

		<li class="comment odd alt thread-odd thread-alt depth-1" id="li-comment-43549">
			<div id="comment-43549" class="comment-container">
				<div class="comment-author vcard">
										<cite class="fn"><a href='http://blog.vivekhaldar.com' rel='external nofollow' class='url'>Vivek Haldar</a></cite>				</div><!-- .comment-author .vcard -->

				
				<div class="comment-meta commentmetadata"><a href="http://www.roughtype.com/?p=3984&#038;cpage=1#comment-43549">
					November 14, 2013 at 10:12 pm</a>				</div><!-- .comment-meta .commentmetadata -->

				<div class="comment-body"><p>Speaking of automating white-collar &#8220;knowledge worker&#8221; jobs, check out legal robotics.</p>
<p><a href="http://www.robotandhwang.com/about/" rel="nofollow">http://www.robotandhwang.com/about/</a></p>
<p>And the laws of legal robotics.</p>
<p><a href="http://www.robotandhwang.com/2013/06/the-laws-of-legal-robotics/" rel="nofollow">http://www.robotandhwang.com/2013/06/the-laws-of-legal-robotics/</a></p>
</div>

				<div class="reply">
									</div><!-- .reply -->
			</div><!-- #comment-##  -->

	</li><!-- #comment-## -->

		<li class="comment even thread-even depth-1" id="li-comment-43709">
			<div id="comment-43709" class="comment-container">
				<div class="comment-author vcard">
										<cite class="fn">Max</cite>				</div><!-- .comment-author .vcard -->

				
				<div class="comment-meta commentmetadata"><a href="http://www.roughtype.com/?p=3984&#038;cpage=1#comment-43709">
					November 19, 2013 at 1:54 pm</a>				</div><!-- .comment-meta .commentmetadata -->

				<div class="comment-body"><p>Nick, I don&#8217;t agree with the point of the post. The main difference, in my opinion, (which other folks already alluded to) is that indeed &#8212; in programming &#8212; as simple things are abstracted, the higher-order, previously impossible, problems become requirements for the next project. This is radically different from piloting an aircraft. The domain of piloting is finite, because the end-goal does not change &#8212; you need to get a plane from point A to point B. As software becomes more sophisticated, eventually, the entire thing could be automated. With software development, on the other hand, the goals continue to become more complex. The programs progressed from being able to only do simple arithmetic, to modern day search engines. I assure you that Google would not be possible without higher-level-of-abstraction languages and tools (lots of which they built themselves, by the way). So far, the trend seems to continue.</p>
<p>Also, on the subject of abstractions being leaky &#8212; yes, they are. And if sufficient care is not applied, the system does become rickety. Good software is distinguished from bad in part by its ability to deal with failures in lower levels of abstraction. As I type this comment, there&#8217;s lots of layers between my browser and roughtype.com &#8212; the browser, the OS, the network drivers, the hardware of my PC, to name a few. If I yank the network cable from my machine the &#8220;perfect network&#8221; abstraction the browser relies on breaks down, but the machine does not shut down, OS does not bluescreen, browser does not crash &#8212; they are all able to deal with the situation&#8230; Is it simple? No (depending on the application, dealing with various error conditions can be 50-100% of the code written for the main logic path). Is it doable? Yes. The proof, as usual, is in the pudding. As I am sure you know, the world around us is increasingly run by computers, and it does not appear to become more rickety as time goes on and complexity increases.  Ergo, integrally, the leaky abstractions are not able to destabilize the whole system. :)</p>
</div>

				<div class="reply">
									</div><!-- .reply -->
			</div><!-- #comment-##  -->

	</li><!-- #comment-## -->
		</ol>

		
	
			
</div><!-- #comments -->

	</div><!-- #content -->
</div><!-- #container -->


	<div id="sidebar" class="widget-area" role="complementary">
				<ul class="xoxo sidebar-list">

			<li id="search-3" class="widget widget_search"><form role="search" method="get" id="searchform" class="searchform" action="http://www.roughtype.com/">
				<div>
					<label class="screen-reader-text" for="s">Search for:</label>
					<input type="text" value="" name="s" id="s" />
					<input type="submit" id="searchsubmit" value="Search" />
				</div>
			</form></li><li id="text-2" class="widget widget_text">			<div class="textwidget">This is Nicholas Carr's blog<br>

<a href="http://www.roughtype.com/?feed=rss2">Subscribe</a> to Rough Type<br>

<a href="http://www.twitter.com/roughtype">Follow</a> Rough Type on Twitter<br>

Visit <a href="http://www.nicholascarr.com">nicholascarr.com</a><br>

Don't forget <a href="http://www.roughertype.com">Rougher Type</a></div>
		</li><li id="linkcat-5" class="widget widget_links"><h3 class="widget-title">Nick's Books</h3>
	<ul class='xoxo blogroll'>
<li><a href="http://www.theglasscagebook.com">The Glass Cage</a></li>
<li><a href="http://www.nicholascarr.com/?page_id=16" rel="me" title="The Shallows book site">The Shallows</a></li>
<li><a href="http://www.nicholasgcarr.com/bigswitch/" title="The Big Switch book site">The Big Switch</a></li>
<li><a href="http://www.nicholasgcarr.com/doesitmatter.html" title="Does IT Matter? book site">Does IT Matter?</a></li>

	</ul>
</li>
		<li id="recent-posts-2" class="widget widget_recent_entries">		<h3 class="widget-title">Recent Posts</h3>		<ul>
					<li>
				<a href="http://www.roughtype.com/?p=5134">Automation anxiety, 1950s-style</a>
						</li>
					<li>
				<a href="http://www.roughtype.com/?p=5131">Atrapados</a>
						</li>
					<li>
				<a href="http://www.roughtype.com/?p=5118">What algorithms want</a>
						</li>
					<li>
				<a href="http://www.roughtype.com/?p=5109">The Uncaged Tour</a>
						</li>
					<li>
				<a href="http://www.roughtype.com/?p=5104">The unbearable unlightness of AI</a>
						</li>
					<li>
				<a href="http://www.roughtype.com/?p=5100">The manipulators</a>
						</li>
					<li>
				<a href="http://www.roughtype.com/?p=5077">Students and their devices</a>
						</li>
				</ul>
		</li><li id="linkcat-8" class="widget widget_links"><h3 class="widget-title">Greatest Hits</h3>
	<ul class='xoxo blogroll'>
<li><a href="http://www.roughtype.com/?p=722">Twitter dot dash</a></li>
<li><a href="http://www.roughtype.com/?p=510">The great unread</a></li>
<li><a href="http://www.roughtype.com/?p=1603">The hierarchy of innovation</a></li>
<li><a href="http://www.roughtype.com/?p=1235">More present than the present</a></li>
<li><a href="http://www.roughtype.com/?p=654">Steve&#039;s devices</a></li>
<li><a href="http://www.roughtype.com/?p=1343">Raising the realtime child</a></li>
<li><a href="http://www.roughtype.com/?p=110">The amorality of Web 2.0</a></li>
<li><a href="http://www.roughtype.com/?p=382">The engine of serendipity</a></li>
<li><a href="http://www.roughtype.com/?p=1464">Situational overload and ambient overload</a></li>

	</ul>
</li>
<li id="linkcat-9" class="widget widget_links"><h3 class="widget-title">Other Writing</h3>
	<ul class='xoxo blogroll'>
<li><a href="http://www.tnr.com/book/review/retromania-simon-reynolds">Past-tense pop</a></li>
<li><a href="http://www.theatlantic.com/magazine/archive/2008/07/is-google-making-us-stupid/6868/">Is Google making us stupid?</a></li>
<li><a href="http://www.cs.sfu.ca/CourseCentral/301/cwa50/Readings/end_of_corporate_computing.pdf">The end of corporate computing</a></li>
<li><a href="http://online.wsj.com/article/SB10001424052970203893404577098343417771160.html">Books that are never done being written</a></li>
<li><a href="http://www.technologyreview.com/featured-story/427628/the-library-of-utopia/">The library of utopia</a></li>
<li><a href="http://www.theatlantic.com/magazine/archive/2013/11/the-great-forgetting/309516/">The great forgetting</a></li>
<li><a href="http://www.tnr.com/book/review/hooked">Hooked</a></li>
<li><a href="http://nautil.us/issue/4/the-unlikely/paper-versus-pixel">Paper versus pixel</a></li>
<li><a href="http://online.wsj.com/article/SB10001424052702304141204577508820786062502.html">Why our innovators traffic in trifles</a></li>

	</ul>
</li>
<li id="rss_links-2" class="widget widget_rss_links"><h3 class="widget-title">Feeds</h3><ul><li><a href="http://www.roughtype.com/?feed=rss2" title="Subscribe to Posts">RSS - Posts</a></li><li><a href="http://www.roughtype.com/?feed=comments-rss2" title="Subscribe to Comments">RSS - Comments</a></li></ul>
</li><li id="archives-2" class="widget widget_archive"><h3 class="widget-title">Archives</h3>		<select name="archive-dropdown" onchange='document.location.href=this.options[this.selectedIndex].value;'>
			<option value="">Select Month</option>

				<option value='http://www.roughtype.com/?m=201409'> September 2014 </option>
	<option value='http://www.roughtype.com/?m=201408'> August 2014 </option>
	<option value='http://www.roughtype.com/?m=201407'> July 2014 </option>
	<option value='http://www.roughtype.com/?m=201406'> June 2014 </option>
	<option value='http://www.roughtype.com/?m=201405'> May 2014 </option>
	<option value='http://www.roughtype.com/?m=201404'> April 2014 </option>
	<option value='http://www.roughtype.com/?m=201402'> February 2014 </option>
	<option value='http://www.roughtype.com/?m=201401'> January 2014 </option>
	<option value='http://www.roughtype.com/?m=201312'> December 2013 </option>
	<option value='http://www.roughtype.com/?m=201311'> November 2013 </option>
	<option value='http://www.roughtype.com/?m=201310'> October 2013 </option>
	<option value='http://www.roughtype.com/?m=201309'> September 2013 </option>
	<option value='http://www.roughtype.com/?m=201308'> August 2013 </option>
	<option value='http://www.roughtype.com/?m=201306'> June 2013 </option>
	<option value='http://www.roughtype.com/?m=201305'> May 2013 </option>
	<option value='http://www.roughtype.com/?m=201304'> April 2013 </option>
	<option value='http://www.roughtype.com/?m=201303'> March 2013 </option>
	<option value='http://www.roughtype.com/?m=201302'> February 2013 </option>
	<option value='http://www.roughtype.com/?m=201301'> January 2013 </option>
	<option value='http://www.roughtype.com/?m=201212'> December 2012 </option>
	<option value='http://www.roughtype.com/?m=201211'> November 2012 </option>
	<option value='http://www.roughtype.com/?m=201210'> October 2012 </option>
	<option value='http://www.roughtype.com/?m=201209'> September 2012 </option>
	<option value='http://www.roughtype.com/?m=201208'> August 2012 </option>
	<option value='http://www.roughtype.com/?m=201207'> July 2012 </option>
	<option value='http://www.roughtype.com/?m=201206'> June 2012 </option>
	<option value='http://www.roughtype.com/?m=201205'> May 2012 </option>
	<option value='http://www.roughtype.com/?m=201204'> April 2012 </option>
	<option value='http://www.roughtype.com/?m=201203'> March 2012 </option>
	<option value='http://www.roughtype.com/?m=201202'> February 2012 </option>
	<option value='http://www.roughtype.com/?m=201201'> January 2012 </option>
	<option value='http://www.roughtype.com/?m=201112'> December 2011 </option>
	<option value='http://www.roughtype.com/?m=201111'> November 2011 </option>
	<option value='http://www.roughtype.com/?m=201110'> October 2011 </option>
	<option value='http://www.roughtype.com/?m=201109'> September 2011 </option>
	<option value='http://www.roughtype.com/?m=201108'> August 2011 </option>
	<option value='http://www.roughtype.com/?m=201107'> July 2011 </option>
	<option value='http://www.roughtype.com/?m=201106'> June 2011 </option>
	<option value='http://www.roughtype.com/?m=201105'> May 2011 </option>
	<option value='http://www.roughtype.com/?m=201104'> April 2011 </option>
	<option value='http://www.roughtype.com/?m=201103'> March 2011 </option>
	<option value='http://www.roughtype.com/?m=201102'> February 2011 </option>
	<option value='http://www.roughtype.com/?m=201101'> January 2011 </option>
	<option value='http://www.roughtype.com/?m=201012'> December 2010 </option>
	<option value='http://www.roughtype.com/?m=201011'> November 2010 </option>
	<option value='http://www.roughtype.com/?m=201010'> October 2010 </option>
	<option value='http://www.roughtype.com/?m=201009'> September 2010 </option>
	<option value='http://www.roughtype.com/?m=201008'> August 2010 </option>
	<option value='http://www.roughtype.com/?m=201007'> July 2010 </option>
	<option value='http://www.roughtype.com/?m=201006'> June 2010 </option>
	<option value='http://www.roughtype.com/?m=201005'> May 2010 </option>
	<option value='http://www.roughtype.com/?m=201004'> April 2010 </option>
	<option value='http://www.roughtype.com/?m=201003'> March 2010 </option>
	<option value='http://www.roughtype.com/?m=201002'> February 2010 </option>
	<option value='http://www.roughtype.com/?m=201001'> January 2010 </option>
	<option value='http://www.roughtype.com/?m=200912'> December 2009 </option>
	<option value='http://www.roughtype.com/?m=200911'> November 2009 </option>
	<option value='http://www.roughtype.com/?m=200910'> October 2009 </option>
	<option value='http://www.roughtype.com/?m=200909'> September 2009 </option>
	<option value='http://www.roughtype.com/?m=200908'> August 2009 </option>
	<option value='http://www.roughtype.com/?m=200906'> June 2009 </option>
	<option value='http://www.roughtype.com/?m=200905'> May 2009 </option>
	<option value='http://www.roughtype.com/?m=200904'> April 2009 </option>
	<option value='http://www.roughtype.com/?m=200903'> March 2009 </option>
	<option value='http://www.roughtype.com/?m=200902'> February 2009 </option>
	<option value='http://www.roughtype.com/?m=200901'> January 2009 </option>
	<option value='http://www.roughtype.com/?m=200812'> December 2008 </option>
	<option value='http://www.roughtype.com/?m=200811'> November 2008 </option>
	<option value='http://www.roughtype.com/?m=200810'> October 2008 </option>
	<option value='http://www.roughtype.com/?m=200809'> September 2008 </option>
	<option value='http://www.roughtype.com/?m=200808'> August 2008 </option>
	<option value='http://www.roughtype.com/?m=200807'> July 2008 </option>
	<option value='http://www.roughtype.com/?m=200806'> June 2008 </option>
	<option value='http://www.roughtype.com/?m=200805'> May 2008 </option>
	<option value='http://www.roughtype.com/?m=200804'> April 2008 </option>
	<option value='http://www.roughtype.com/?m=200803'> March 2008 </option>
	<option value='http://www.roughtype.com/?m=200802'> February 2008 </option>
	<option value='http://www.roughtype.com/?m=200801'> January 2008 </option>
	<option value='http://www.roughtype.com/?m=200712'> December 2007 </option>
	<option value='http://www.roughtype.com/?m=200711'> November 2007 </option>
	<option value='http://www.roughtype.com/?m=200710'> October 2007 </option>
	<option value='http://www.roughtype.com/?m=200709'> September 2007 </option>
	<option value='http://www.roughtype.com/?m=200708'> August 2007 </option>
	<option value='http://www.roughtype.com/?m=200707'> July 2007 </option>
	<option value='http://www.roughtype.com/?m=200706'> June 2007 </option>
	<option value='http://www.roughtype.com/?m=200705'> May 2007 </option>
	<option value='http://www.roughtype.com/?m=200704'> April 2007 </option>
	<option value='http://www.roughtype.com/?m=200703'> March 2007 </option>
	<option value='http://www.roughtype.com/?m=200702'> February 2007 </option>
	<option value='http://www.roughtype.com/?m=200701'> January 2007 </option>
	<option value='http://www.roughtype.com/?m=200612'> December 2006 </option>
	<option value='http://www.roughtype.com/?m=200611'> November 2006 </option>
	<option value='http://www.roughtype.com/?m=200610'> October 2006 </option>
	<option value='http://www.roughtype.com/?m=200609'> September 2006 </option>
	<option value='http://www.roughtype.com/?m=200608'> August 2006 </option>
	<option value='http://www.roughtype.com/?m=200607'> July 2006 </option>
	<option value='http://www.roughtype.com/?m=200606'> June 2006 </option>
	<option value='http://www.roughtype.com/?m=200605'> May 2006 </option>
	<option value='http://www.roughtype.com/?m=200604'> April 2006 </option>
	<option value='http://www.roughtype.com/?m=200603'> March 2006 </option>
	<option value='http://www.roughtype.com/?m=200602'> February 2006 </option>
	<option value='http://www.roughtype.com/?m=200601'> January 2006 </option>
	<option value='http://www.roughtype.com/?m=200512'> December 2005 </option>
	<option value='http://www.roughtype.com/?m=200511'> November 2005 </option>
	<option value='http://www.roughtype.com/?m=200510'> October 2005 </option>
	<option value='http://www.roughtype.com/?m=200509'> September 2005 </option>
	<option value='http://www.roughtype.com/?m=200508'> August 2005 </option>
	<option value='http://www.roughtype.com/?m=200507'> July 2005 </option>
	<option value='http://www.roughtype.com/?m=200506'> June 2005 </option>
	<option value='http://www.roughtype.com/?m=200505'> May 2005 </option>
	<option value='http://www.roughtype.com/?m=200504'> April 2005 </option>
		</select>
</li>		</ul>
	</div><!-- #sidebar .widget-area -->

	
		</div><!-- #content-box -->

		<div id="footer" role="contentinfo">
			<div id="colophon">

				
				<div id="site-info">
					<a href="http://www.roughtype.com/" title="ROUGH TYPE" rel="home">ROUGH TYPE</a> &middot; Nicholas Carr&#039;s Blog				</div><!-- #site-info -->

				<div id="site-generator">
					<a href="http://wordpress.org/" title="A Semantic Personal Publishing Platform" rel="generator">Proudly powered by WordPress</a>
					&middot;
					Theme: Pilcrow by <a href="http://automattic.com/" rel="designer">Automattic</a>.				</div><!-- #site-generator -->

			</div><!-- #colophon -->
		</div><!-- #footer -->
	</div><!-- #page .blog -->
</div><!-- #container -->

		<script type="text/javascript">
		jQuery(document).on( 'ready post-load', function(){
			jQuery( 'a.share-twitter' ).on( 'click', function() {
				window.open( jQuery(this).attr( 'href' ), 'wpcomtwitter', 'menubar=1,resizable=1,width=600,height=350' );
				return false;
			});
		});
		</script>
				<script type="text/javascript">
		jQuery(document).on( 'ready post-load', function(){
			jQuery( 'a.share-facebook' ).on( 'click', function() {
				window.open( jQuery(this).attr( 'href' ), 'wpcomfacebook', 'menubar=1,resizable=1,width=600,height=400' );
				return false;
			});
		});
		</script>
			<div id="sharing_email" style="display: none;">
		<form action="/?p=3984" method="post">
			<label for="target_email">Send to Email Address</label>
			<input type="email" name="target_email" id="target_email" value="" />

			
				<label for="source_name">Your Name</label>
				<input type="text" name="source_name" id="source_name" value="" />

				<label for="source_email">Your Email Address</label>
				<input type="email" name="source_email" id="source_email" value="" />

			
			
			<img style="float: right; display: none" class="loading" src="http://www.roughtype.com/wp/wp-content/plugins/jetpack/modules/sharedaddy/images/loading.gif" alt="loading" width="16" height="16" />
			<input type="submit" value="Send Email" class="sharing_send" />
			<a href="#cancel" class="sharing_cancel">Cancel</a>

			<div class="errors errors-1" style="display: none;">
				Post was not sent - check your email addresses!			</div>

			<div class="errors errors-2" style="display: none;">
				Email check failed, please try again			</div>

			<div class="errors errors-3" style="display: none;">
				Sorry, your blog cannot share posts by email.			</div>
		</form>
	</div>
<script type='text/javascript' src='http://www.roughtype.com/wp/wp-content/plugins/jetpack/modules/photon/photon.js?ver=20130122'></script>
<script type='text/javascript' src='http://s0.wp.com/wp-content/js/devicepx-jetpack.js?ver=201439'></script>
<script type='text/javascript'>
/* <![CDATA[ */
var mejsL10n = {"language":"en","strings":{"Close":"Close","Fullscreen":"Fullscreen","Download File":"Download File","Download Video":"Download Video","Play\/Pause":"Play\/Pause","Mute Toggle":"Mute Toggle","None":"None","Turn off Fullscreen":"Turn off Fullscreen","Go Fullscreen":"Go Fullscreen","Unmute":"Unmute","Mute":"Mute","Captions\/Subtitles":"Captions\/Subtitles"}};
var _wpmejsSettings = {"pluginPath":"\/wp\/wp-includes\/js\/mediaelement\/"};
/* ]]> */
</script>
<script type='text/javascript' src='http://www.roughtype.com/wp/wp-includes/js/mediaelement/mediaelement-and-player.min.js?ver=2.15.0'></script>
<script type='text/javascript' src='http://www.roughtype.com/wp/wp-includes/js/mediaelement/wp-mediaelement.js?ver=4.0'></script>
<script type='text/javascript'>
/* <![CDATA[ */
var recaptcha_options = {"lang":"en"};
/* ]]> */
</script>
<script type='text/javascript' src='http://www.roughtype.com/wp/wp-content/plugins/jetpack/modules/sharedaddy/sharing.js?ver=20121205'></script>

	<script src="http://stats.wp.com/e-201439.js" type="text/javascript"></script>
	<script type="text/javascript">
	st_go({v:'ext',j:'1:3.1.1',blog:'37827505',post:'3984',tz:'-6'});
	var load_cmc = function(){linktracker_init(37827505,3984,2);};
	if ( typeof addLoadEvent != 'undefined' ) addLoadEvent(load_cmc);
	else load_cmc();
	</script></body>
</html>
