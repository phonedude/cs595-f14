status: 200
content-length: 997351
content-location: https://leanpub.com/javascript-allonge/read
set-cookie: AWSELB=BF7915350C754439EF4952CB0CB801868D298314807A8AD52D73F5B73D984AEDE04B26F98E6374F41888ECE861C7AA9AE31C3E669805E41EF86E1DDFD2FF0F294FB97B49E2;
 PATH=/
server: nginx
last-modified: Fri, 26 Sep 2014 01:47:50 GMT
connection: keep-alive
-content-encoding: gzip
cache-control: no-cache="set-cookie"
date: Sun, 28 Sep 2014 17:16:08 GMT
content-type: text/html

<!DOCTYPE html>
<!--[if lt IE 7]> <html class="no-js lt-ie9 lt-ie8 lt-ie7"> <![endif]-->
<!--[if IE 7]> <html class="no-js lt-ie9 lt-ie8"> <![endif]-->
<!--[if IE 8]> <html class="no-js lt-ie9"> <![endif]-->
<!--[if gt IE 9]><!--><html class='no-js' lang='en'><!--<![endif]--><head>
<meta charset='utf-8'>
<meta content='IE=edge,chrome=1' name='X-UA-Compatible'>
<meta content='width=device-width, initial-scale=1.0' name='viewport'>
<meta content='en' name='Content-Language'>
<title>Read JavaScript Allongé | Leanpub</title>
<link href="/assets/application-4843f602a3a732be4e5592a1f75c16f3.css" media="all" rel="stylesheet" type="text/css" />
<!--[if IE 8]>
<link href="/assets/ie8-grid-foundation-4-907c82cf047de58ceac86b5b05bfeddb.css" media="screen" rel="stylesheet" type="text/css" />
<![endif]-->
<script type="text/javascript" src="https://use.typekit.com/tco5dom.js"></script>
<script type="text/javascript">try{Typekit.load();}catch(e){}</script>

<meta content="authenticity_token" name="csrf-param" />
<meta content="bFEtvjayJxy/xassO8A2xVeo5LAwhV0DoWhZeVMqsfo=" name="csrf-token" />
<script src="/assets/modernizr-d170895be84c07a44166dd0092ce251b.js" type="text/javascript"></script>

<script>
  var _gaq = _gaq || [];
  var pluginUrl =  '//www.google-analytics.com/plugins/ga/inpage_linkid.js';
  _gaq.push(['_require', 'inpage_linkid', pluginUrl]);
  _gaq.push(['_setAccount', 'UA-911230-9']);
  
  _gaq.push(['_trackPageview']);
  
  
  
  (function() {
    var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
    ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';
    var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
  })();
</script>

</head>
<body class='' id='reads-show'>
<header class="navbar navbar-fixed-top">
  <div class="navbar-inner">
    <div class="container">
      <hgroup>
        <h1><a href="https://leanpub.com/" class="brand">Leanpub</a></h1>
      </hgroup>
      <div>
        <ul class="nav">
          <li><a href="/bestsellers">Bookstore</a></li>
          <li><a href="/authors">Authors</a></li>
          <li><a href="/p">Publishers</a></li>
          <li><a href="/causes">Causes</a></li>
          <li><a href="http://blog.leanpub.com">Blog</a></li>
          <li><a href="/help">Help</a></li>
          <li class="search">
            <form action="/book_search" method="get">
              <input type="text" name="search" class="search-bar" placeholder="Search books by title, subtitle or author.">
            </form>
          </li>
          <li class="show_if_logged_out"><a href="/sign_up" id="sign_up_link">Sign Up</a></li>
          <li class="show_if_logged_out"><a href="/login">Sign In</a></li>
          <li class="dropdown show_if_logged_in" id="user_menu">
            <a href="#" class="dropdown-toggle" data-toggle="dropdown"><span class="user_name">Your Account</span> <b class="caret"></b></a>
            <ul class="dropdown-menu">
              <li><a href="/dashboard">Dashboard</a></li>
              <li><a href="" class="profile_link" style="display: none">View Your Profile</a></li>
              <li><a href="" class="wishlist_link">Wish List</a></li>
              <li class="divider"></li>
              <li><a href="/sign_out">Sign Out</a></li>
            </ul>
          </li>
        </ul>
      </div><!--/.nav-collapse -->
    </div>
  </div>
</header>



<section class='container' id='main'>


<div id="flash_prototype" class="alert alert-block">
  <a class="close" data-dismiss="alert" href="#">&times;</a>
  <p></p>
</div>

<div class="on-site row">
<div class="span8">
<h1>JavaScript Allongé</h1>
<div id="leanpub-toc">
<h2>Table of Contents</h2>
<ol class="toc">
<ul class='toc no-parts'>
  <li>
    <a href='#leanpub-auto-a-pull-of-the-lever-prefaces'>A Pull of the Lever: Prefaces</a>
    <ul>
      <li>
        <a href='#leanpub-auto-foreword-by-michael-fogus'>Foreword by Michael Fogus</a>
      </li>
      <li>
        <a href='#leanpub-auto-foreword-by-matthew-knox'>Foreword by Matthew Knox</a>
      </li>
      <li>
        <a href='#leanpub-auto-why-javascript-allong'>Why JavaScript Allongé?</a>
      </li>
      <li>
        <a href='#leanpub-auto-a-personal-word-about-the-recipes'>A Personal Word About The Recipes</a>
      </li>
      <li>
        <a href='#leanpub-auto-legend'>Legend</a>
      </li>
    </ul>
  </li>
  <li>
    <a href='#leanpub-auto-prelude-values-and-expressions'>Prelude: Values and Expressions</a>
    <ul>
      <li>
        <a href='#leanpub-auto-values-and-expressions'>values and expressions</a>
      </li>
      <li>
        <a href='#leanpub-auto-values-and-identity'>values and identity</a>
      </li>
    </ul>
  </li>
  <li>
    <a href='#functions'><span class="section-number">1 </span>The first sip: Basic Functions</a>
    <ul>
      <li>
        <a href='#leanpub-auto-as-little-as-possible-about-functions-but-no-less'>As Little As Possible About Functions, But No Less</a>
      </li>
      <li>
        <a href='#fargs'>Ah. I’d Like to Have an Argument, Please.</a>
      </li>
      <li>
        <a href='#closures'>Closures and Scope</a>
      </li>
      <li>
        <a href='#let'>Let’s Talk Var</a>
      </li>
      <li>
        <a href='#named-function-expressions'>Naming Functions</a>
      </li>
      <li>
        <a href='#combinators'>Combinators and Function Decorators</a>
      </li>
      <li>
        <a href='#buildingblocks'>Building Blocks</a>
      </li>
      <li>
        <a href='#arguments-again'>I’d Like to Have Some Arguments. Again.</a>
      </li>
      <li>
        <a href='#leanpub-auto-summary'>Summary</a>
      </li>
    </ul>
  </li>
  <li>
    <a href='#leanpub-auto-the-recipe-cheat-sheet'><span class="section-number">2 </span>The Recipe Cheat Sheet</a>
  </li>
  <li>
    <a href='#leanpub-auto-recipes-with-basic-functions'><span class="section-number">3 </span>Recipes with Basic Functions</a>
    <ul>
      <li>
        <a href='#simple-partial'>Partial Application</a>
      </li>
      <li>
        <a href='#ellipses'>Ellipses and improved Partial Application</a>
      </li>
      <li>
        <a href='#leanpub-auto-unary'>Unary</a>
      </li>
      <li>
        <a href='#tap'>Tap</a>
      </li>
      <li>
        <a href='#maybe'>Maybe</a>
      </li>
    </ul>
  </li>
  <li>
    <a href='#references'><span class="section-number">4 </span>The Pause That Refreshes: Rebinding and References</a>
    <ul>
      <li>
        <a href='#arrays'>Arguments and Arrays</a>
      </li>
      <li>
        <a href='#objects'>References and Objects</a>
      </li>
      <li>
        <a href='#reassignment'>Reassignment and Mutation</a>
      </li>
      <li>
        <a href='#leanpub-auto-how-to-shoot-yourself-in-the-foot-with-var'>How to Shoot Yourself in the Foot With Var</a>
      </li>
      <li>
        <a href='#recursive'>When Rebinding Meets Recursion</a>
      </li>
      <li>
        <a href='#modules'>From Let to Modules</a>
      </li>
      <li>
        <a href='#leanpub-auto-summary-1'>Summary</a>
      </li>
    </ul>
  </li>
  <li>
    <a href='#leanpub-auto-recipes-with-rebinding-and-references'><span class="section-number">5 </span>Recipes with Rebinding and References</a>
    <ul>
      <li>
        <a href='#leanpub-auto-once'>Once</a>
      </li>
      <li>
        <a href='#mapWith'>mapWith</a>
      </li>
      <li>
        <a href='#flip'>Flip</a>
      </li>
      <li>
        <a href='#extend'>Extend</a>
      </li>
      <li>
        <a href='#y'>Why?</a>
      </li>
    </ul>
  </li>
  <li>
    <a href='#mutable'><span class="section-number">6 </span>Stir the Allongé: Objects, Mutation, and State</a>
    <ul>
      <li>
        <a href='#encapsulation'>Encapsulating State with Closures</a>
      </li>
      <li>
        <a href='#composition'>Composition and Extension</a>
      </li>
      <li>
        <a href='#this'>This and That</a>
      </li>
      <li>
        <a href='#context'>What Context Applies When We Call a Function?</a>
      </li>
      <li>
        <a href='#method-decorators'>Method Decorators</a>
      </li>
      <li>
        <a href='#leanpub-auto-summary-2'>Summary</a>
      </li>
    </ul>
  </li>
  <li>
    <a href='#leanpub-auto-recipes-with-objects-mutations-and-state'><span class="section-number">7 </span>Recipes with Objects, Mutations, and State</a>
    <ul>
      <li>
        <a href='#memoize'>Memoize</a>
      </li>
      <li>
        <a href='#getWith'>getWith</a>
      </li>
      <li>
        <a href='#pluck'>pluckWith</a>
      </li>
      <li>
        <a href='#deepMapWith'>Deep Mapping</a>
      </li>
    </ul>
  </li>
  <li>
    <a href='#methods'><span class="section-number">8 </span>Finish the Cup: Instances and Classes</a>
    <ul>
      <li>
        <a href='#prototypes'>Prototypes are Simple, it’s the Explanations that are Hard To Understand</a>
      </li>
      <li>
        <a href='#binding'>Binding Functions to Contexts</a>
      </li>
      <li>
        <a href='#pabc'>Partial Application, Binding, and Currying</a>
      </li>
      <li>
        <a href='#class-other-name'>A Class By Any Other Name</a>
      </li>
      <li>
        <a href='#object-methods'>Object Methods</a>
      </li>
      <li>
        <a href='#classextension'>Extending Classes with Inheritance</a>
      </li>
      <li>
        <a href='#leanpub-auto-summary-3'>Summary</a>
      </li>
    </ul>
  </li>
  <li>
    <a href='#leanpub-auto-recipes-with-instances-and-classes'><span class="section-number">9 </span>Recipes with Instances and Classes</a>
    <ul>
      <li>
        <a href='#leanpub-auto-currying-1'>Currying</a>
      </li>
      <li>
        <a href='#bound'>Bound</a>
      </li>
      <li>
        <a href='#leanpub-auto-unbinding'>Unbinding</a>
      </li>
      <li>
        <a href='#send'>Send</a>
      </li>
      <li>
        <a href='#invoke'>Invoke</a>
      </li>
      <li>
        <a href='#fluent'>Fluent</a>
      </li>
      <li>
        <a href='#named-once'>Once Again</a>
      </li>
    </ul>
  </li>
  <li>
    <a href='#processing'><span class="section-number">10 </span>Sequence</a>
    <ul>
      <li>
        <a href='#leanpub-auto-introduction-compose-and-pipeline'>Introduction: Compose and Pipeline</a>
      </li>
    </ul>
  </li>
  <li>
    <a href='#redecorating'><span class="section-number">11 </span>New Ideas</a>
    <ul>
      <li>
        <a href='#leanpub-auto-how-prototypes-and-constructors-differ-from-classes'>How Prototypes and Constructors differ from Classes</a>
      </li>
      <li>
        <a href='#new-agnostic'>New-Agnostic Constructors</a>
      </li>
      <li>
        <a href='#leanpub-auto-another-new-agnostic-constructor-pattern'>Another New-Agnostic Constructor Pattern</a>
      </li>
      <li>
        <a href='#functional-mixins'>Mixins</a>
      </li>
      <li>
        <a href='#class-decorators'>Class Decorators</a>
      </li>
      <li>
        <a href='#tortoises'>Interlude: Tortoises, Hares, and Teleporting Turtles</a>
      </li>
      <li>
        <a href='#functional-iterators'>Functional Iterators</a>
      </li>
      <li>
        <a href='#leanpub-auto-refactoring-to-functional-iterators'>Refactoring to Functional Iterators</a>
      </li>
      <li>
        <a href='#leanpub-auto-a-drunken-walk-across-a-chequerboard'>A Drunken Walk Across A Chequerboard</a>
      </li>
      <li>
        <a href='#trampolining'>Trampolining</a>
      </li>
    </ul>
  </li>
  <li>
    <a href='#leanpub-auto-recipes-for-new-ideas'><span class="section-number">12 </span>Recipes for New Ideas</a>
    <ul>
      <li>
        <a href='#before'>Before</a>
      </li>
      <li>
        <a href='#after'>After</a>
      </li>
      <li>
        <a href='#provided'>Provided and Except</a>
      </li>
      <li>
        <a href='#leanpub-auto-a-functional-mixin-factory'>A Functional Mixin Factory</a>
      </li>
      <li>
        <a href='#leanpub-auto-a-class-decorator-factory'>A Class Decorator Factory</a>
      </li>
      <li>
        <a href='#leanpub-auto-iterator-recipes'>Iterator Recipes</a>
      </li>
    </ul>
  </li>
  <li>
    <a href='#leanpub-auto-the-golden-crema'>The Golden Crema</a>
    <ul>
      <li>
        <a href='#leanpub-auto-authors-notes'>Author’s Notes</a>
      </li>
      <li>
        <a href='#online'>How to run the examples</a>
      </li>
      <li>
        <a href='#leanpub-auto-thanks'>Thanks!</a>
      </li>
      <li>
        <a href='#leanpub-auto-coffeescript-ristretto'>CoffeeScript Ristretto</a>
      </li>
      <li>
        <a href='#leanpub-auto-copyright-notice'>Copyright Notice</a>
      </li>
      <li>
        <a href='#leanpub-auto-about-the-author'>About The Author</a>
      </li>
    </ul>
  </li>
</ul>

</ol>
</div>
<div id="leanpub-main">
<h2 id="leanpub-auto-a-pull-of-the-lever-prefaces">A Pull of the Lever: Prefaces</h2>

<div class="image-with-caption center image-with-caption center">
  <img src="/site_images/javascript-allonge/caffemolinari.jpg" alt="Caffe Molinari"><p class="caption">Caffe Molinari</p>
</div>

<blockquote>
  <p>“Café Allongé, also called Espresso Lungo, is a drink midway between an Espresso and Americano in strength. There are two different ways to make it. The first, and the one I prefer, is to add a small amount of hot water to a double or quadruple Espresso Ristretto. Like adding a splash of water to whiskey, the small dilution releases more of the complex flavours in the mouth.</p>

  <p>“The second way is to pull an extra long double shot of Espresso. This achieves approximately the same ratio of oils to water as the dilution method, but also releases a different mix of flavours due to the longer extraction. Some complain that the long pull is more bitter and detracts from the best character of the coffee, others feel it releases even more complexity.</p>

  <p>“The important thing is that neither method of preparation should use so much water as to result in a sickly, pale ghost of Espresso. Moderation in all things.” </p>
</blockquote>

<h3 id="leanpub-auto-foreword-by-michael-fogus">Foreword by Michael Fogus</h3>

<p>As a life-long bibliophile and long-time follower of Reg’s online work, I was excited when he started writing books. However, I’m very conservative about books – let’s just say that if there was an aftershave scented to the essence of “Used Book Store” then I would be first in line to buy. So as you might imagine I was “skeptical” about the decision to release JavaScript Allongé as an ongoing ebook, with a pay-what-you-want model. However, Reg sent me a copy of his book and I was humbled. Not only was this a great book, but it was also a great way to write and distribute books. Having written books myself, I know the pain of soliciting and receiving feedback.</p>

<p>The act of writing is an iterative process with (very often) tight revision loops. However, the process of soliciting feedback, gathering responses, sending out copies, waiting for people to actually read it (if they ever do), receiving feedback and then ultimately making sense out of how to use it takes weeks and sometimes months. On more than one occasion I’ve found myself attempting to reify feedback with content that either no longer existed or was changed beyond recognition. However, with the Leanpub model the read-feedback-change process is extremely efficient, leaving in its wake a quality book that continues to get better as others likewise read and comment into infinitude.</p>

<p>In the case of JavaScript Allongé, you’ll find the Leanpub model a shining example of effectiveness. Reg has crafted (and continues to craft) not only an interesting book from the perspective of a connoisseur, but also an entertaining exploration into some of the most interesting aspects of his art. No matter how much of an expert you think you are, JavaScript Allongé has something to teach you… about coffee. I kid.</p>

<p>As a staunch advocate of functional programming, much of what Reg has written rings true to me. While not exclusively a book about functional programming, JavaScript Allongé will provide a solid foundation for functional techniques. However, you’ll not be beaten about the head and neck with dogma. Instead, every section is motivated by relevant dialog and fortified with compelling source examples. As an author of programming books I admire what Reg has managed to accomplish and I envy the fine reader who finds JavaScript Allongé via some darkened channel in the Internet sprawl and reads it for the first time.</p>

<p>Enjoy.</p>

<p>– Fogus, <a href="http://www.fogus.me">fogus.me</a></p>

<h3 id="leanpub-auto-foreword-by-matthew-knox">Foreword by Matthew Knox</h3>

<p>A different kind of language requires a different kind of book.</p>

<p>JavaScript holds surprising depths–its scoping rules are neither strictly lexical nor strictly dynamic, and it supports procedural, object-oriented (in several flavors!), and functional programming.  Many books try to hide most of those capabilities away, giving you recipes for writing JavaScript in a way that approximates class-centric programming in other languages.  Not JavaScript Allongé.  It starts with the fundamentals of values, functions, and objects, and then guides you through JavaScript from the inside with exploratory bits of code that illustrate scoping, combinators, context, state, prototypes, and constructors.</p>

<p>Like JavaScript itself, this book gives you a gentle start before showing you its full depth, and like a Cafe Allongé, it’s over too soon.  Enjoy!</p>

<p>–Matthew Knox, <a href="http://mattknox.com">mattknox.com</a></p>

<h3 id="leanpub-auto-why-javascript-allong">Why JavaScript Allongé?</h3>

<p><em>JavaScript Allongé</em> solves two important problems for the ambitious JavaScript programmer. First, <em>JavaScript Allongé</em> gives you the tools to deal with JavaScript bugs, hitches, edge cases, and other potential pitfalls.</p>

<p>There are plenty of good directions for how to write JavaScript programs. If you follow them without alteration or deviation, you will be satisfied. Unfortunately, software is a complex thing, full of interactions and side-effects. Two perfectly reasonable pieces of advice when taken separately may conflict with each other when taken together. An approach may seem sound at the outset of a project, but need to be revised when new requirements are discovered.</p>

<p>When you “leave the path” of the directions, you discover their limitations. In order to solve the problems that occur at the edges, in order to adapt and deal with changes, in order to refactor and rewrite as needed, you need to understand the underlying principles of the JavaScript programming language in detail.</p>

<p>You need to understand <em>why</em> the directions work so that you can understand <em>how</em> to modify them to work properly at or beyond their original limitations. That’s where <em>JavaScript Allongé</em> comes in.</p>

<p><em>JavaScript Allongé</em> is a book about programming with functions, because <a href="https://developer.mozilla.org/en-US/docs/JavaScript">JavaScript</a> is a programming language built on flexible and powerful functions. <em>JavaScript Allongé</em> begins at the beginning, with values and expressions, and builds from there to discuss types, identity, functions, closures, scopes, and many more subjects up to working with classes and instances. In each case, <em>JavaScript Allongé</em> takes care to explain exactly how things work so that when you encounter a problem, you’ll know exactly what is happening and how to fix it.</p>

<p>Second, <em>JavaScript Allongé</em> provides recipes for using functions to write software that is simpler, cleaner, and less complicated than alternative approaches that are object-centric or code-centric. JavaScript idioms like function combinators and decorators leverage JavaScript’s power to make code easier to read, modify, debug and refactor, thus <em>avoiding</em> problems before they happen.</p>

<p><em>JavaScript Allongé</em> teaches you how to handle complex code, and it also teaches you how to simplify code without dumbing it down. As a result, <em>JavaScript Allongé</em> is a rich read releasing many of JavaScript’s subtleties, much like the Café Allongé beloved by coffee enthusiasts everywhere.</p>

<h4 id="leanpub-auto-how-the-book-is-organized">how the book is organized</h4>

<p><em>JavaScript Allongé</em> introduces new aspects of programming with functions in each chapter, explaining exactly how JavaScript works. Code examples within each chapter are small and emphasize exposition rather than serving as patterns for everyday use.</p>

<p>Following each chapter are a series of recipes designed to show the application of the chapters ideas in practical form. While the content of each chapter builds naturally on what was discussed in the previous chapter, the recipes may draw upon any aspect of the JavaScript programming language.</p>

<h3 id="leanpub-auto-a-personal-word-about-the-recipes">A Personal Word About The Recipes</h3>

<p>As noted, <em>JavaScript Allongé</em> alternates between chapters describing the semantics of JavaScript’s functions with chapters containing recipes for writing programs with functions. You can read the book in order or read the chapters explaining JavaScript first and return to the recipes later.</p>

<p>The recipes share a common theme: They hail from a style of programming inspired by the creation of small functions that compose with each other. Using these recipes, you’ll learn when it’s appropriate to write:</p>

<div class="code-block">
<div class="highlight"><pre><code class="lineno">1</code> <code class="k">return</code> <code class="nf">mapWith</code><code class="p">(</code><code class="n">maybe</code><code class="p">(</code><code class="n">getWith</code><code class="p">(</code><code class="err">'</code><code class="n">name</code><code class="err">'</code><code class="p">)))(</code><code class="n">customerList</code><code class="p">);</code>
</pre></div>

</div>

<p>Instead of:</p>

<div class="code-block">
<div class="highlight"><pre><code class="lineno">1</code> <code class="k">return</code> <code class="nx">customerList</code><code class="p">.</code><code class="nx">map</code><code class="p">(</code><code class="kd">function</code> <code class="p">(</code><code class="nx">customer</code><code class="p">)</code> <code class="p">{</code>
<code class="lineno">2</code>   <code class="k">if</code> <code class="p">(</code><code class="nx">customer</code><code class="p">)</code> <code class="p">{</code>
<code class="lineno">3</code>     <code class="k">return</code> <code class="nx">customer</code><code class="p">.</code><code class="nx">name</code>
<code class="lineno">4</code>   <code class="p">}</code>
<code class="lineno">5</code> <code class="p">});</code>
</pre></div>

</div>

<p>As well as how it works and how to refactor it when you need. This style of programming is hardly the most common thing anyone does in JavaScript, so the argument can be made that more “practical” or “commonplace” recipes would be helpful. If you never read any other books about JavaScript, if you avoid blog posts and screen casts about JavaScript, if you don’t attend workshops or talks about JavaScript, then I agree that this is not One Book to Rule Them All.</p>

<p>But given that there are other resources out there, and that programmers are curious creatures with an unslakable thirst for personal growth, we choose to provide recipes that you are unlikely to find anywhere else in anything like this concentration. The recipes reinforce the lessons taught in the book about functions in JavaScript.</p>

<p>You’ll find all of the recipes collected online at <a href="http://allong.es">http://allong.es</a>. They’re free to share under the MIT license.</p>

<p><a href="http://braythwayt.com">Reginald Braithwaite</a><br>
reg@braythwayt.com<br>
@raganwald</p>

<h3 id="leanpub-auto-legend">Legend</h3>

<p>Some text in monospaced type like <code>this</code> in the text represents some code being discussed. Some monospaced code in its own lines also represents code being discussed:</p>

<div class="code-block">
<div class="highlight"><pre><code class="lineno">1</code> <code class="n">this</code><code class="p">.</code><code class="n">async</code> <code class="o">=</code> <code class="k">do</code> <code class="p">(</code><code class="n">async</code> <code class="o">=</code> <code class="n">undefined</code><code class="p">)</code> <code class="o">-&gt;</code>
<code class="lineno">2</code> 
<code class="lineno">3</code>   <code class="n">async</code> <code class="o">=</code> <code class="p">(</code><code class="n">fn</code><code class="p">)</code> <code class="o">-&gt;</code>
<code class="lineno">4</code>     <code class="p">(</code><code class="n">argv</code><code class="p">...,</code> <code class="n">callback</code><code class="p">)</code> <code class="o">-&gt;</code>
<code class="lineno">5</code>       <code class="n">callback</code><code class="p">(</code><code class="n">fn</code><code class="p">.</code><code class="n">apply</code><code class="p">(</code><code class="n">this</code><code class="p">,</code> <code class="n">argv</code><code class="p">))</code>
</pre></div>

</div>

<p>Sometimes it will contain some code for you to type in for yourself. When it does, the result of typing something in will often be shown using <code>//=&gt;</code>, like this:</p>

<div class="code-block">
<div class="highlight"><pre><code class="lineno">1</code> <code class="mi">2</code> <code class="o">+</code> <code class="mi">2</code>
<code class="lineno">2</code>   <code class="c1">//=&gt; 4</code>
</pre></div>

</div>

<table class="tip sidebarish"><tbody><tr>
<td class="sidebar-icon">
      <img class="sidebar-image" src="/site_images/javascript-allonge/leanpub_key.png" alt="tip">
</td>
    <td>
      <p>A paragraph marked like this is a “key fact.” It summarizes an idea without adding anything new.</p>

    </td>
  </tr></tbody></table>
<table class="exercise sidebarish"><tbody><tr>
<td class="sidebar-icon">
      <img class="sidebar-image" src="/site_images/javascript-allonge/leanpub_pencil.png" alt="exercise">
</td>
    <td>
      <p>A paragraph marked like this is a suggested exercise to be performed on your own.</p>

    </td>
  </tr></tbody></table>
<div class="aside sidebarish">
  <p>A paragraph marked like this is an aside. It can be safely ignored. It contains whimsey and other doupleplusunserious logorrhea that will <em>not</em> be on the test.</p>

</div>

<h2 id="leanpub-auto-prelude-values-and-expressions">Prelude: Values and Expressions</h2>

<p><em>The following material is extremely basic, however like most stories, the best way to begin is to start at the very beginning.</em></p>

<p>Imagine we are visiting our favourite coffee shop. They will make for you just about any drink you desire, from a short, intense espresso ristretto through a dry cappuccino, up to those coffee-flavoured desert concoctions featuring various concentrated syrups and milks. (You tolerate the existence of sugary drinks because they provide a sufficient profit margin to the establishment to finance your hanging out there all day using their WiFi and ordering a $3 drink every few hours.)</p>

<p>You express your order at one end of their counter, the folks behind the counter perform their magic, and deliver the coffee you value at the other end. This is exactly how the JavaScript environment works for the purpose of this book. We are going to dispense with web servers, browsers and other complexities and deal with this simple model: You give the computer an <a href="https://en.wikipedia.org/wiki/Expression_" title="computer_science">expression</a>, and it returns a <a href="https://en.wikipedia.org/wiki/Value_" title="computer_science">value</a>, just as you express your wishes to a barista and receive a coffee in return.</p>

<h3 id="leanpub-auto-values-and-expressions">values and expressions</h3>

<p>All values are expressions. Say you hand the barista a café Cubano. Yup, you hand over a cup with some coffee infused through partially caramelized sugar. You say, “I want one of these.” The barista is no fool, she gives it straight back to you, and you get exactly what you want. Thus, a café Cubano is an expression (you can use it to place an order) and a value (you get it back from the barista).</p>

<p>Let’s try this with something the computer understands easily:</p>

<div class="code-block">
<div class="highlight"><pre><code class="lineno">1</code> <code class="mi">42</code>
</pre></div>

</div>

<p>Is this an expression? A value? Neither? Or both?</p>

<p>The answer is, this is both an expression <em>and</em> a value.<sup id="fnref-representation"><a href="#fn-representation" rel="footnote">1</a></sup> The way you can tell that it’s both is very easy: When you type it into JavaScript, you get the same thing back, just like our café Cubano:</p>

<div class="code-block">
<div class="highlight"><pre><code class="lineno">1</code> <code class="mi">42</code>
<code class="lineno">2</code>   <code class="c1">//=&gt; 42</code>
</pre></div>

</div>

<p>All values are expressions. That’s easy! Are there any other kinds of expressions? Sure! let’s go back to the coffee shop. Instead of handing over the finished coffee, we can hand over the ingredients. Let’s hand over some ground coffee plus some boiling water.</p>

<div class="aside sidebarish">
  <p>Astute readers will realize we’re omitting something. Congratulations! Take a sip of espresso. We’ll get to that in a moment.</p>

</div>

<p>Now the barista gives us back an espresso. And if we hand over the espresso, we get the espresso right back. So, boiling water plus ground coffee is an expression, but it isn’t a value.<sup id="fnref-homoiconicity"><a href="#fn-homoiconicity" rel="footnote">2</a></sup> Boiling water is a value. Ground coffee is a value. Espresso is a value. Boiling water plus ground coffee is an expression.</p>

<p>Let’s try this as well with something else the computer understands easily:</p>

<div class="code-block">
<div class="highlight"><pre><code class="lineno">1</code> <code class="s">"JavaScript"</code> <code class="o">+</code> <code class="s">" "</code> <code class="o">+</code> <code class="s">"Allonge"</code>
<code class="lineno">2</code>   <code class="c1">//=&gt; "JavaScript Allonge"</code>
</pre></div>

</div>

<p>Now we see that “strings” are values, and you can make an expression out of strings and an operator <code>+</code>. Since strings are values, they are also expressions by themselves. But strings with operators are not values, they are expressions. Now we know what was missing with our “coffee grounds plus hot water” example. The coffee grounds were a value, the boiling hot water was a value, and the “plus” operator between them made the whole thing an expression that was not a value.</p>

<h3 id="leanpub-auto-values-and-identity">values and identity</h3>

<p>In JavaScript, we test whether two values are identical with the <code>===</code> operator, and whether they are not identical with the <code>!==</code> operator:</p>

<div class="code-block">
<div class="highlight"><pre><code class="lineno">1</code> 	<code class="mi">2</code> <code class="o">===</code> <code class="mi">2</code>
<code class="lineno">2</code> 		<code class="c1">//=&gt; true</code>
<code class="lineno">3</code> 		
<code class="lineno">4</code> 	<code class="err">'</code><code class="n">hello</code><code class="err">'</code> <code class="o">!==</code> <code class="err">'</code><code class="n">goodbye</code><code class="err">'</code>
<code class="lineno">5</code> 		<code class="c1">//=&gt; true</code>
</pre></div>

</div>

<p>How does <code>===</code> work, exactly? Imagine that you’re shown a cup of coffee. And then you’re shown another cup of coffee. Are the two cups “identical?” In JavaScript, there are four possibilities:</p>

<p>First, sometimes, the cups are of different kinds. One is a demitasse, the other a mug. This corresponds to comparing two things in JavaScript that have different <em>types</em>. For example, the string <code>"2"</code> is not the same thing as the number <code>2</code>. Strings and numbers are different types, so strings and numbers are never identical:</p>

<div class="code-block">
<div class="highlight"><pre><code class="lineno">1</code> <code class="mi">2</code> <code class="o">===</code> <code class="sc">'2'</code>
<code class="lineno">2</code>   <code class="c1">//=&gt; false</code>
<code class="lineno">3</code>   
<code class="lineno">4</code> <code class="nb">true</code> <code class="o">!==</code> <code class="err">'</code><code class="nb">true</code><code class="err">'</code>
<code class="lineno">5</code>   <code class="c1">//=&gt; true</code>
</pre></div>

</div>

<p>Second, sometimes, the cups are of the same type–perhaps two espresso cups–but they have different contents. One holds a single, one a double. This corresponds to comparing two JavaScript values that have the same type but different “content.” For example, the number <code>5</code> is not the same thing as the number <code>2</code>.</p>

<div class="code-block">
<div class="highlight"><pre><code class="lineno">1</code> <code class="nb">true</code> <code class="o">===</code> <code class="nb">false</code>
<code class="lineno">2</code>   <code class="c1">//=&gt; false</code>
<code class="lineno">3</code>   
<code class="lineno">4</code> <code class="mi">2</code> <code class="o">!==</code> <code class="mi">5</code>
<code class="lineno">5</code>   <code class="c1">//=&gt; true</code>
<code class="lineno">6</code>   
<code class="lineno">7</code> <code class="err">'</code><code class="n">two</code><code class="err">'</code> <code class="o">===</code> <code class="err">'</code><code class="n">five</code><code class="err">'</code>
<code class="lineno">8</code>   <code class="c1">//=&gt; false</code>
</pre></div>

</div>

<p>What if the cups are of the same type <em>and</em> the contents are the same? Well, JavaScript’s third and fourth possibilities cover that.</p>

<h4 id="leanpub-auto-value-types">value types</h4>

<p>Third, some types of cups have no distinguishing marks on them. If they are the same kind of cup, and they hold the same contents, we have no way to tell the difference between them. This is the case with the strings, numbers, and booleans we have seen so far.</p>

<div class="code-block">
<div class="highlight"><pre><code class="lineno">1</code> <code class="mi">2</code> <code class="o">+</code> <code class="mi">2</code> <code class="o">===</code> <code class="mi">4</code>
<code class="lineno">2</code>   <code class="c1">//=&gt; true</code>
<code class="lineno">3</code>   
<code class="lineno">4</code> <code class="p">(</code><code class="mi">2</code> <code class="o">+</code> <code class="mi">2</code> <code class="o">===</code> <code class="mi">4</code><code class="p">)</code> <code class="o">===</code> <code class="p">(</code><code class="mi">2</code> <code class="o">!==</code> <code class="mi">5</code><code class="p">)</code>
<code class="lineno">5</code>   <code class="c1">//=&gt; true</code>
</pre></div>

</div>

<p>Note well what is happening with these examples: Even when we obtain a string, number, or boolean as the result of evaluating an expression, it is identical to another value of the same type with the same “content.” Strings, numbers, and booleans are examples of what JavaScript calls “value” or “primitive” types. We’ll use both terms interchangeably.</p>

<p>We haven’t encountered the fourth possibility yet. Stretching the metaphor somewhat, some types of cups have a serial number on the bottom. So even if you have two cups of the same type, and their contents are the same, you can still distinguish between them.</p>

<div class="image-with-caption center image-with-caption center">
  <img src="/site_images/javascript-allonge/macchiato_1200.jpg" alt="Cafe Macchiato is also a fine drink, especially when following up on the fortunes of the Azzuri or the standings in the Giro D'Italia"><p class="caption">Cafe Macchiato is also a fine drink, especially when following up on the fortunes of the Azzuri or the standings in the Giro D’Italia</p>
</div>

<h4 id="leanpub-auto-reference-types">reference types</h4>

<p>So what kinds of values might be the same type and have the same contents, but not be considered identical to JavaScript? Let’s meet a data structure that is very common in contemporary programming languages, the <em>Array</em> (other languages sometimes call it a List or a Vector).</p>

<p>An array looks like this: <code>[1, 2, 3]</code>. This is an expression, and you can combine <code>[]</code> with other expressions. Go wild with things like:</p>

<div class="code-block">
<div class="highlight"><pre><code class="lineno">1</code> <code class="k">[2-1, 2, 2+1]</code>
<code class="lineno">2</code> <code class="k">[1, 1+1, 1+1+1]</code>
</pre></div>

</div>

<p>Notice that you are always generating arrays with the same contents. But are they identical the same way that every value of <code>42</code> is identical to every other value of <code>42</code>? Try these for yourself:</p>

<div class="code-block">
<div class="highlight"><pre><code class="lineno">1</code> <code class="k">[2-1, 2, 2+1] === [1,2,3]</code>
<code class="lineno">2</code> <code class="k">[1,2,3] === [1, 2, 3]</code>
<code class="lineno">3</code> <code class="k">[1, 2, 3] === [1, 2, 3]</code>
</pre></div>

</div>

<p>How about that! When you type <code>[1, 2, 3]</code> or any of its variations, you are typing an expression that generates its own <em>unique</em> array that is not identical to any other array, even if that other array also looks like <code>[1, 2, 3]</code>. It’s as if JavaScript is generating new cups of coffee with serial numbers on the bottom.</p>

<div class="aside sidebarish">
  <p>Arrays look exceedingly simple, but this word “reference” is so laden with possibilities that there’s an entire chapter devoted to discussing <a href="#references">rebinding and references</a>. Try typing this code out:</p>

  <div class="code-block">
<div class="highlight"><pre><code class="lineno">1</code> <code class="kd">var</code> <code class="nx">ouroboros</code> <code class="o">=</code> <code class="p">[];</code>
<code class="lineno">2</code> <code class="nx">ouroboros</code><code class="p">[</code><code class="mi">0</code><code class="p">]</code> <code class="o">=</code> <code class="nx">ouroboros</code><code class="p">;</code>
<code class="lineno">3</code>   <code class="c1">//=&gt; [ [Circular] ]</code>
</pre></div>
  
</div>

  <p>You’ve just created an <a href="https://en.wikipedia.org/wiki/Ouroboros">ouroborian</a> array, an array that contains itself.</p>

</div>

<p>They look the same, but if you examine them with <code>===</code>, you see that they are different. Every time you evaluate an expression (including typing something in) to create an array, you’re creating a new, distinct value even if it <em>appears</em> to be the same as some other array value. As we’ll see, this is true of many other kinds of values, including <em>functions</em>, the main subject of this book.</p>

<!-- begin mainmatter -->
<div class="image-with-caption center image-with-caption center">
  <img src="/site_images/javascript-allonge/carmack.png" alt=" "><p class="caption"> </p>
</div>

<h2 id="functions">
<span class="section-number">1 </span>The first sip: Basic Functions</h2>

<div class="image-with-caption center image-with-caption center">
  <img src="/site_images/javascript-allonge/leaf-roaster.jpg" alt="The perfect Café Allongé begins with the right beans, properly roasted. JavaScript Allongé begins with functions, properly dissected."><p class="caption">The perfect Café Allongé begins with the right beans, properly roasted. JavaScript Allongé begins with functions, properly dissected.</p>
</div>

<h3 id="leanpub-auto-as-little-as-possible-about-functions-but-no-less">As Little As Possible About Functions, But No Less</h3>

<p>In JavaScript, functions are values, but they are also much more than simple numbers, strings, or even complex data structures like trees or maps. Functions represent computations to be performed. Like numbers, strings, and arrays, they have a representation. Let’s start with the very simplest possible function. In JavaScript, it looks like this:</p>

<div class="code-block">
<div class="highlight"><pre><code class="lineno">1</code> <code class="kd">function</code> <code class="p">()</code> <code class="p">{}</code>
</pre></div>

</div>

<p>This is a function that is applied to no values and produces no value. How do we represent “no value” in JavaScript? We’ll find out in a minute. First, let’s verify that our function is a value:</p>

<div class="code-block">
<div class="highlight"><pre><code class="lineno">1</code> <code class="p">(</code><code class="kd">function</code> <code class="p">()</code> <code class="p">{})</code>
<code class="lineno">2</code>   <code class="c1">//=&gt; </code><code class="cp">[</code><code class="nx">Function</code><code class="cp">]</code><code class="c1"></code>
</pre></div>

</div>

<p>What!? Why didn’t it type back <code>function () {}</code> for us? This <em>seems</em> to break our rule that if an expression is also a value, JavaScript will give the same value back to us. What’s going on? The simplest and easiest answer is that although the JavaScript interpreter does indeed return that value, displaying it on the screen is a slightly different matter. <code>[Function]</code> is a choice made by the people who wrote Node.js, the JavaScript environment that hosts the JavaScript REPL. If you try the same thing in a browser, you’ll see the code you typed.</p>

<div class="page-break"></div>
<div class="aside sidebarish">
  <p>I’d prefer something else, but I must accept that what gets typed back to us on the screen is arbitrary, and all that really counts is that it is somewhat useful for a human to read. But we must understand that whether we see <code>[Function]</code> or <code>function () {}</code>, internally JavaScript has a full and proper function.</p>

</div>

<h4 id="leanpub-auto-functions-and-identities">functions and identities</h4>

<p>You recall that we have two types of values with respect to identity: Value types and reference types. Value types share the same identity if they have the same contents.Reference types do not.</p>

<p>Which kind are functions? Let’s try it. For reasons of appeasing the JavaScript parser, we’ll enclose our functions in parentheses:</p>

<div class="code-block">
<div class="highlight"><pre><code class="lineno">1</code> <code class="p">(</code><code class="kd">function</code> <code class="p">()</code> <code class="p">{})</code> <code class="o">===</code> <code class="p">(</code><code class="kd">function</code> <code class="p">()</code> <code class="p">{})</code>
<code class="lineno">2</code>   <code class="c1">//=&gt; false</code>
</pre></div>

</div>

<p>Like arrays, every time you evaluate an expression to produce a function, you get a new function that is not identical to any other function, even if you use the same expression to generate it. “Function” is a reference type.</p>

<h4 id="leanpub-auto-applying-functions">applying functions</h4>

<p>Let’s put functions to work. The way we use functions is to <em>apply</em> them to zero or more values called <em>arguments</em>. Just as <code>2 + 2</code> produces a value (in this case <code>4</code>), applying a function to zero or more arguments produces a value as well.</p>

<p>Here’s how we apply a function to some values in JavaScript: Let’s say that <em>fn_expr</em> is an expression that when evaluated, produces a function. Let’s call the arguments <em>args</em>. Here’s how to apply a function to some arguments:</p>

<p><em>fn_expr</em><code>(</code><em>args</em><code>)</code></p>

<p>Right now, we only know about one such expression: <code>function () {}</code>, so let’s use it. We’ll put it in parentheses<sup id="fnref-ambiguous"><a href="#fn-ambiguous" rel="footnote">3</a></sup> to keep the parser happy, like we did above: <code>(function () {})</code>. Since we aren’t giving it any arguments, we’ll simply write <code>()</code> after the expression. So we write:</p>

<div class="code-block">
<div class="highlight"><pre><code class="lineno">1</code> <code class="p">(</code><code class="kd">function</code> <code class="p">()</code> <code class="p">{})()</code>
<code class="lineno">2</code>   <code class="c1">//=&gt; undefined</code>
</pre></div>

</div>

<p>What is this <code>undefined</code>?</p>

<h4 id="leanpub-auto-undefined"><code>undefined</code></h4>

<p>In JavaScript, the absence of a value is written <code>undefined</code>, and it means there is no value. It will crop up again. <code>undefined</code> is its own type of value, and it acts like a value type:</p>

<div class="code-block">
<div class="highlight"><pre><code class="lineno">1</code> <code class="n">undefined</code>
<code class="lineno">2</code>   <code class="c1">//=&gt; undefined</code>
</pre></div>

</div>

<p>Like numbers, booleans and strings, JavaScript can print out the value <code>undefined</code>.</p>

<div class="code-block">
<div class="highlight"><pre><code class="lineno">1</code> <code class="kc">undefined</code> <code class="o">===</code> <code class="kc">undefined</code>
<code class="lineno">2</code>   <code class="c1">//=&gt; true</code>
<code class="lineno">3</code> <code class="p">(</code><code class="kd">function</code> <code class="p">()</code> <code class="p">{})()</code> <code class="o">===</code> <code class="p">(</code><code class="kd">function</code> <code class="p">()</code> <code class="p">{})()</code>
<code class="lineno">4</code>   <code class="c1">//=&gt; true</code>
<code class="lineno">5</code> <code class="p">(</code><code class="kd">function</code> <code class="p">()</code> <code class="p">{})()</code> <code class="o">===</code> <code class="kc">undefined</code>
<code class="lineno">6</code>   <code class="c1">//=&gt; true</code>
</pre></div>

</div>

<p>No matter how you evaluate <code>undefined</code>, you get an identical value back. <code>undefined</code> is a value that means “I don’t have a value.” But it’s still a value :-)</p>

<div class="aside sidebarish">
  <p>You might think that <code>undefined</code> in JavaScript is equivalent to <code>NULL</code> in SQL. No. In SQL, two things that are <code>NULL</code> are not equal to nor share the same identity, because two unknowns can’t be equal. In JavaScript, every <code>undefined</code> is identical to every other <code>undefined</code>.</p>

</div>

<h4 id="leanpub-auto-void">void</h4>

<p>We’ve seen that JavaScript represents an undefined value by typing <code>undefined</code>, and we’ve generated undefined values in two ways:</p>

<ol class="numeric numeric">
<li>By evaluating a function that doesn’t return a value <code>(function () {})()</code>, and;</li>
  <li>By writing <code>undefined</code> ourselves.</li>
</ol>
<p>There’s a third way, with JavaScript’s <code>void</code> operator. Behold:</p>

<div class="code-block">
<div class="highlight"><pre><code class="lineno">1</code> <code class="kt">void</code> <code class="mi">0</code>
<code class="lineno">2</code>   <code class="c1">//=&gt; undefined</code>
<code class="lineno">3</code> <code class="kt">void</code> <code class="mi">1</code>
<code class="lineno">4</code>   <code class="c1">//=&gt; undefined</code>
<code class="lineno">5</code> <code class="kt">void</code> <code class="p">(</code><code class="mi">2</code> <code class="o">+</code> <code class="mi">2</code><code class="p">)</code>
<code class="lineno">6</code>   <code class="c1">//=&gt; undefined</code>
</pre></div>

</div>

<p><code>void</code> is an operator that takes any value and evaluates to <code>undefined</code>, always. So, when we deliberately want an undefined value, should we use the first, second, or third form?<sup id="fnref-fourth"><a href="#fn-fourth" rel="footnote">4</a></sup> The answer is, use <code>void</code>. By convention, use <code>void 0</code>.</p>

<p>The first form works but it’s cumbersome. The second form works most of the time, but it is possible to break it by reassigning <code>undefined</code> to a different value, something we’ll discuss in <a href="#reassignment">Reassignment and Mutation</a>. The third form is guaranteed to always work, so that’s what we will use.<sup id="fnref-void"><a href="#fn-void" rel="footnote">5</a></sup></p>

<h4 id="leanpub-auto-functions-with-no-arguments-and-their-bodies">functions with no arguments and their bodies</h4>

<p>Back to our function. We evaluated this:</p>

<div class="code-block">
<div class="highlight"><pre><code class="lineno">1</code> <code class="p">(</code><code class="kd">function</code> <code class="p">()</code> <code class="p">{})()</code>
<code class="lineno">2</code>   <code class="c1">//=&gt; undefined</code>
</pre></div>

</div>

<p>Let’s recall that we were applying the function <code>function () {}</code> to no arguments (because there was nothing inside of <code>()</code>). So how do we know to expect <code>undefined</code>? That’s easy:</p>

<p>When we define a function<sup id="fnref-todonamed"><a href="#fn-todonamed" rel="footnote">6</a></sup>, we write the word <code>function</code>. We then put a (possibly empty) list of arguments, then we give the function a <em>body</em> that is enclosed in braces <code>{...}</code>. Function bodies are (possibly empty) lists of JavaScript <em>statements</em> separated by semicolons.</p>

<p>Something like: { statement<sup>1</sup>; statement<sup>2</sup>; statement<sup>3</sup>; … ; statement<sup>n</sup> }</p>

<p>We haven’t discussed these <em>statements</em>. What’s a statement?</p>

<p>There are many kinds of JavaScript statements, but the first kind is one we’ve already met. An expression is a JavaScript statement. Although they aren’t very practical, the following are all valid JavaScript functions, and they all evaluate to undefined when applied:</p>

<div class="code-block">
<div class="highlight"><pre><code class="lineno">1</code> <code class="p">(</code><code class="kd">function</code> <code class="p">()</code> <code class="p">{</code> <code class="mi">2</code> <code class="o">+</code> <code class="mi">2</code> <code class="p">})</code>
<code class="lineno">2</code> 
<code class="lineno">3</code> <code class="p">(</code><code class="kd">function</code> <code class="p">()</code> <code class="p">{</code> <code class="mi">1</code> <code class="o">+</code> <code class="mi">1</code><code class="p">;</code> <code class="mi">2</code> <code class="o">+</code> <code class="mi">2</code> <code class="p">})</code>
</pre></div>

</div>

<p>You can also separate statements with line breaks.<sup id="fnref-asi"><a href="#fn-asi" rel="footnote">7</a></sup> The convention is to use some form of consistent indenting:</p>

<div class="code-block">
<div class="highlight"><pre><code class="lineno"> 1</code> <code class="p">(</code><code class="kd">function</code> <code class="p">()</code> <code class="p">{</code>
<code class="lineno"> 2</code>   <code class="mi">1</code> <code class="o">+</code> <code class="mi">1</code><code class="p">;</code> 
<code class="lineno"> 3</code>   <code class="mi">2</code> <code class="o">+</code> <code class="mi">2</code> 
<code class="lineno"> 4</code> <code class="p">})</code>
<code class="lineno"> 5</code> 
<code class="lineno"> 6</code> <code class="p">(</code><code class="kd">function</code> <code class="p">()</code> <code class="p">{</code> 
<code class="lineno"> 7</code>   <code class="p">(</code><code class="kd">function</code> <code class="p">()</code> <code class="p">{</code> 
<code class="lineno"> 8</code>     <code class="p">(</code><code class="kd">function</code> <code class="p">()</code> <code class="p">{</code> 
<code class="lineno"> 9</code>       <code class="p">(</code><code class="kd">function</code> <code class="p">()</code> <code class="p">{</code>
<code class="lineno">10</code>       <code class="p">})</code> 
<code class="lineno">11</code>     <code class="p">})</code> 
<code class="lineno">12</code>   <code class="p">});</code> 
<code class="lineno">13</code>   <code class="p">(</code><code class="kd">function</code> <code class="p">()</code> <code class="p">{</code>
<code class="lineno">14</code>   <code class="p">})</code> 
<code class="lineno">15</code> <code class="p">})</code>
</pre></div>

</div>

<p>That last one’s a doozy, but since a function body can contain a statement, and a statement can be an expression, and a function is an expression…. You get the idea.</p>

<p>So how do we get a function to return a value when applied? With the <code>return</code> keyword and any expression:</p>

<div class="code-block">
<div class="highlight"><pre><code class="lineno">1</code> <code class="p">(</code><code class="kd">function</code> <code class="p">()</code> <code class="p">{</code> <code class="k">return</code> <code class="mi">0</code> <code class="p">})()</code>
<code class="lineno">2</code>   <code class="c1">//=&gt; 0</code>
<code class="lineno">3</code>   
<code class="lineno">4</code> <code class="p">(</code><code class="kd">function</code> <code class="p">()</code> <code class="p">{</code> <code class="k">return</code> <code class="mi">1</code> <code class="p">})()</code>
<code class="lineno">5</code>   <code class="c1">//=&gt; 1</code>
<code class="lineno">6</code>   
<code class="lineno">7</code> <code class="p">(</code><code class="kd">function</code> <code class="p">()</code> <code class="p">{</code> <code class="k">return</code> <code class="s1">'Hello '</code> <code class="o">+</code> <code class="s1">'World'</code> <code class="p">})()</code>
<code class="lineno">8</code>   <code class="c1">// 'Hello World'</code>
</pre></div>

</div>

<p>The <code>return</code> keyword creates a return statement that immediately terminates the function application and returns the result of evaluating its expression.</p>

<h4 id="leanpub-auto-functions-that-evaluate-to-functions">functions that evaluate to functions</h4>

<p>If an expression that evaluates to a function is, well, an expression, and if a return statement can have any expression on its right side… <em>Can we put an expression that evaluates to a function on the right side of a function expression?</em></p>

<p>Yes:</p>

<div class="code-block">
<div class="highlight"><pre><code class="lineno">1</code> <code class="kd">function</code> <code class="p">()</code> <code class="p">{</code>
<code class="lineno">2</code>   <code class="k">return</code> <code class="p">(</code><code class="kd">function</code> <code class="p">()</code> <code class="p">{})</code> 
<code class="lineno">3</code> <code class="p">}</code>
</pre></div>

</div>

<p>That’s a function! It’s a function that when applied, evaluates to a function that when applied, evaluates to <code>undefined</code>.<sup id="fnref-mouthful"><a href="#fn-mouthful" rel="footnote">8</a></sup> Let’s use a simpler terminology. Instead of saying “that when applied, evaluates to _____,” we will say “gives _____.” And instead of saying “gives undefined,” we’ll say “doesn’t give anything.”</p>

<p>So we have <em>a function, that gives a function, that doesn’t give anything</em>. Likewise:</p>

<div class="code-block">
<div class="highlight"><pre><code class="lineno">1</code> <code class="kd">function</code> <code class="p">()</code> <code class="p">{</code> 
<code class="lineno">2</code>   <code class="k">return</code> <code class="p">(</code><code class="kd">function</code> <code class="p">()</code> <code class="p">{</code> 
<code class="lineno">3</code>     <code class="k">return</code> <code class="kc">true</code> 
<code class="lineno">4</code>   <code class="p">})</code> 
<code class="lineno">5</code> <code class="p">}</code>
</pre></div>

</div>

<p>That’s a function, that gives a function, that gives <code>true</code>:</p>

<div class="code-block">
<div class="highlight"><pre><code class="lineno">1</code> <code class="p">(</code><code class="kd">function</code> <code class="p">()</code> <code class="p">{</code> 
<code class="lineno">2</code>   <code class="k">return</code> <code class="p">(</code><code class="kd">function</code> <code class="p">()</code> <code class="p">{</code> 
<code class="lineno">3</code>     <code class="k">return</code> <code class="kc">true</code> 
<code class="lineno">4</code>   <code class="p">})</code> 
<code class="lineno">5</code> <code class="p">})()()</code>
<code class="lineno">6</code>   <code class="c1">//=&gt; true</code>
</pre></div>

</div>

<p>Well. We’ve been very clever, but so far this all seems very abstract. Diffraction of a crystal is beautiful and interesting in its own right, but you can’t blame us for wanting to be shown a practical use for it, like being able to determine the composition of a star millions of light years away. So… In the next chapter, “<a href="#fargs">I’d Like to Have an Argument, Please</a>,” we’ll see how to make functions practical.</p>

<h3 id="fargs">Ah. I’d Like to Have an Argument, Please.</h3>

<p>Up to now, we’ve looked at functions without arguments. We haven’t even said what an argument <em>is</em>, only that our functions don’t have any.</p>

<div class="aside sidebarish">
  <p>Most programmers are perfectly familiar with arguments (often called “parameters”). Secondary school mathematics discusses this. So you know what they are, and I know that you know what they are, but please be patient with the explanation!</p>

</div>

<p>Let’s make a function with an argument:</p>

<div class="code-block">
<div class="highlight"><pre><code class="lineno">1</code> <code class="kd">function</code> <code class="p">(</code><code class="nx">room</code><code class="p">)</code> <code class="p">{}</code>
</pre></div>

</div>

<p>This function has one argument, <code>room</code>, and no body. Here’s a function with two arguments and no body:</p>

<div class="code-block">
<div class="highlight"><pre><code class="lineno">1</code> <code class="kd">function</code> <code class="p">(</code><code class="nx">room</code><code class="p">,</code> <code class="nx">board</code><code class="p">)</code> <code class="p">{}</code>
</pre></div>

</div>

<p>I’m sure you are perfectly comfortable with the idea that this function has two arguments, <code>room</code>, and <code>board</code>. What does one do with the arguments? Use them in the body, of course. What do you think this is?</p>

<div class="code-block">
<div class="highlight"><pre><code class="lineno">1</code> <code class="kd">function</code> <code class="p">(</code><code class="nx">diameter</code><code class="p">)</code> <code class="p">{</code> <code class="k">return</code> <code class="nx">diameter</code> <code class="o">*</code> <code class="mf">3.14159265</code> <code class="p">}</code>
</pre></div>

</div>

<p>It’s a function for calculating the circumference of a circle given the diameter. I read that aloud as “When applied to a value representing the diameter, this function <em>returns</em> the diameter times 3.14159265.”</p>

<p>Remember that to apply a function with no arguments, we wrote <code>(function () {})()</code>. To apply a function with an argument (or arguments), we put the argument (or arguments) within the parentheses, like this:</p>

<div class="code-block">
<div class="highlight"><pre><code class="lineno">1</code> <code class="p">(</code><code class="kd">function</code> <code class="p">(</code><code class="nx">diameter</code><code class="p">)</code> <code class="p">{</code> <code class="k">return</code> <code class="nx">diameter</code> <code class="o">*</code> <code class="mf">3.14159265</code> <code class="p">})(</code><code class="mi">2</code><code class="p">)</code>
<code class="lineno">2</code>   <code class="c1">//=&gt; 6.2831853</code>
</pre></div>

</div>

<p>You won’t be surprised to see how to write and apply a function to two arguments:</p>

<div class="code-block">
<div class="highlight"><pre><code class="lineno">1</code> <code class="p">(</code><code class="kd">function</code> <code class="p">(</code><code class="nx">room</code><code class="p">,</code> <code class="nx">board</code><code class="p">)</code> <code class="p">{</code> <code class="k">return</code> <code class="nx">room</code> <code class="o">+</code> <code class="nx">board</code> <code class="p">})(</code><code class="mi">800</code><code class="p">,</code> <code class="mi">150</code><code class="p">)</code>
<code class="lineno">2</code>   <code class="c1">//=&gt; 950</code>
</pre></div>

</div>

<table class="tip sidebarish"><tbody><tr>
<td class="sidebar-icon">
      <img class="sidebar-image" src="/site_images/javascript-allonge/leanpub_key.png" alt="tip">
</td>
    <td>
      <h4 id="leanpub-auto-a-quick-summary-of-functions-and-bodies">a quick summary of functions and bodies</h4>

  <p>How arguments are used in a body’s expression is probably perfectly obvious to you from the examples, especially if you’ve used any programming language (except for the dialect of BASIC–which I recall from my secondary school–that didn’t allow parameters when you called a procedure).</p>

  <p>Expressions consist either of representations of values (like <code>3.14159265</code>, <code>true</code>, and <code>undefined</code>), operators that combine expressions (like <code>3 + 2</code>), some special forms like <code>[1, 2, 3]</code> for creating arrays out of expressions, or <code>function (</code><em>arguments</em><code>) {</code><em>body-statements</em><code>}</code> for creating functions.</p>

  <p>One of the important possible statements is a return statement. A return statement accepts any valid JavaScript expression.</p>

  <p>This loose definition is recursive, so we can intuit (or use our experience with other languages) that since a function can contain a return statement with an expression, we can write a function that returns a function, or an array that contains another array expression. Or a function that returns an array, an array of functions, a function that returns an array of functions, and so forth:</p>

  <div class="code-block">
<div class="highlight"><pre><code class="lineno"> 1</code> <code class="kd">function</code> <code class="p">()</code> <code class="p">{</code>
<code class="lineno"> 2</code>   <code class="k">return</code> <code class="kd">function</code> <code class="p">()</code> <code class="p">{}</code>
<code class="lineno"> 3</code> <code class="p">}</code>
<code class="lineno"> 4</code> 
<code class="lineno"> 5</code> <code class="kd">function</code> <code class="p">()</code> <code class="p">{</code>
<code class="lineno"> 6</code>   <code class="k">return</code> <code class="p">[</code> <code class="mi">1</code><code class="p">,</code> <code class="mi">2</code><code class="p">,</code> <code class="mi">3</code><code class="p">]</code>
<code class="lineno"> 7</code> <code class="p">}</code>
<code class="lineno"> 8</code> 
<code class="lineno"> 9</code> <code class="p">[</code><code class="mi">1</code><code class="p">,</code> <code class="p">[</code><code class="mi">2</code><code class="p">,</code> <code class="mi">3</code><code class="p">],</code> <code class="mi">4</code><code class="p">]</code>
<code class="lineno">10</code> 
<code class="lineno">11</code> <code class="kd">function</code> <code class="p">()</code> <code class="p">{</code>
<code class="lineno">12</code>   <code class="k">return</code> <code class="p">[</code>
<code class="lineno">13</code>     <code class="p">(</code><code class="kd">function</code> <code class="p">()</code> <code class="p">{</code> <code class="k">return</code> <code class="mi">1</code><code class="p">}),</code>
<code class="lineno">14</code>     <code class="p">(</code><code class="kd">function</code> <code class="p">()</code> <code class="p">{</code> <code class="k">return</code> <code class="mi">2</code><code class="p">}),</code>
<code class="lineno">15</code>     <code class="p">(</code><code class="kd">function</code> <code class="p">()</code> <code class="p">{</code> <code class="k">return</code> <code class="mi">3</code><code class="p">})</code>
<code class="lineno">16</code>   <code class="p">]</code>
<code class="lineno">17</code> <code class="p">}</code>
</pre></div>
  
</div>

    </td>
  </tr></tbody></table>
<h4 id="call-by-value">call by value</h4>

<p>Like most contemporary programming languages, JavaScript uses the “call by value” <a href="http://en.wikipedia.org/wiki/Evaluation_strategy">evaluation strategy</a>. That means that when you write some code that appears to apply a function to an expression or expressions, JavaScript evaluates all of those expressions and applies the functions to the resulting value(s).</p>

<p>So when you write:</p>

<div class="code-block">
<div class="highlight"><pre><code class="lineno">1</code> <code class="p">(</code><code class="kd">function</code> <code class="p">(</code><code class="nx">diameter</code><code class="p">)</code> <code class="p">{</code> <code class="k">return</code> <code class="nx">diameter</code> <code class="o">*</code> <code class="mf">3.14159265</code> <code class="p">})(</code><code class="mi">1</code> <code class="o">+</code> <code class="mi">1</code><code class="p">)</code>
<code class="lineno">2</code>   <code class="c1">//=&gt; 6.2831853</code>
</pre></div>

</div>

<p>What happened internally is that the expression <code>1 + 1</code> was evaluated first, resulting in <code>2</code>. Then our circumference function was applied to <code>2</code>.<sup id="fnref-f2f"><a href="#fn-f2f" rel="footnote">10</a></sup></p>

<h4 id="leanpub-auto-variables-and-bindings">variables and bindings</h4>

<p>Right now everything looks simple and straightforward, and we can move on to talk about arguments in more detail. And we’re going to work our way up from <code>function (diameter) { return diameter * 3.14159265 }</code> to functions like:</p>

<div class="code-block">
<div class="highlight"><pre><code class="lineno">1</code> <code class="kd">function</code> <code class="p">(</code><code class="nx">x</code><code class="p">)</code> <code class="p">{</code> <code class="k">return</code> <code class="p">(</code><code class="kd">function</code> <code class="p">(</code><code class="nx">y</code><code class="p">)</code> <code class="p">{</code> <code class="k">return</code> <code class="nx">x</code> <code class="p">})</code> <code class="p">}</code>
</pre></div>

</div>

<div class="aside sidebarish">
  <p><code>function (x) { return (function (y) { return x }) }</code> just looks crazy, as if we are learning English as a second language and the teacher promises us that soon we will be using words like <em>antidisestablishmentarianism</em>. Besides a desire to use long words to sound impressive, this is not going to seem attractive until we find ourselves wanting to discuss the role of the Church of England in 19th century British politics.</p>

  <p>But there’s another reason for learning the word <em>antidisestablishmentarianism</em>: We might learn how prefixes and postfixes work in English grammar. It’s the same thing with <code>function (x) { return (function (y) { return x }) }</code>. It has a certain important meaning in its own right, and it’s also an excellent excuse to learn about functions that make functions, environments, variables, and more.</p>

</div>

<p>In order to talk about how this works, we should agree on a few terms (you may already know them, but let’s check-in together and “synchronize our dictionaries”). The first <code>x</code>, the one in <code>function (x) ...</code>, is an <em>argument</em>. The <code>y</code> in <code>function (y) ...</code> is another argument. The second <code>x</code>, the one in <code>{ return x }</code>, is not an argument, <em>it’s an expression referring to a variable</em>. Arguments and variables work the same way whether we’re talking about <code>function (x) { return (function (y) { return x }) }</code>  or just plain <code>function (x) { return x }</code>.</p>

<p>Every time a function is invoked (“invoked” means “applied to zero or more arguments”), a new <em>environment</em> is created. An environment is a (possibly empty) dictionary that maps variables to values by name. The <code>x</code> in the expression that we call a “variable” is itself an expression that is evaluated by looking up the value in the environment.</p>

<p>How does the value get put in the environment? Well for arguments, that is very simple. When you apply the function to the arguments, an entry is placed in the dictionary for each argument. So when we write:</p>

<div class="code-block">
<div class="highlight"><pre><code class="lineno">1</code> <code class="p">(</code><code class="kd">function</code> <code class="p">(</code><code class="nx">x</code><code class="p">)</code> <code class="p">{</code> <code class="k">return</code> <code class="nx">x</code> <code class="p">})(</code><code class="mi">2</code><code class="p">)</code>
<code class="lineno">2</code>   <code class="c1">//=&gt; 2</code>
</pre></div>

</div>

<p>What happens is this:</p>

<ol class="numeric numeric">
<li>JavaScript parses this whole thing as an expression made up of several sub-expressions.</li>
  <li>It then starts evaluating the expression, including evaluating sub-expressions</li>
  <li>One sub-expression, <code>function (x) { return x }</code> evaluates to a function.</li>
  <li>Another, <code>2</code>, evaluates to the number 2.</li>
  <li>JavaScript now evaluates applying the function to the argument <code>2</code>. Here’s where it gets interesting…</li>
  <li>An environment is created.</li>
  <li>The value ‘2’ is bound to the name ‘x’ in the environment.</li>
  <li>The expression ‘x’ (the right side of the function) is evaluated within the environment we just created.</li>
  <li>The value of a variable when evaluated in an environment is the value bound to the variable’s name in that environment, which is ‘2’</li>
  <li>And that’s our result.</li>
</ol>
<p>When we talk about environments, we’ll use an <a href="http://json.org/">unsurprising syntax</a> for showing their bindings: <code>{x: 2, ...}</code>. meaning, that the environment is a dictionary, and that the value <code>2</code> is bound to the name <code>x</code>, and that there might be other stuff in that dictionary we aren’t discussing right now.</p>

<h4 id="leanpub-auto-call-by-sharing">call by sharing</h4>

<p>Earlier, we distinguished JavaScript’s <em>value types</em> from its <em>reference types</em>. At that time, we looked at how JavaScript distinguishes objects that are identical from objects that are not. Now it is time to take another look at the distinction between value and reference types.</p>

<p>There is a property that JavaScript strictly maintains: When a value–any value–is passed as an argument to a function, the value bound in the function’s environment must be identical to the original.</p>

<p>We said that JavaScript binds names to values, but we didn’t say what it means to bind a name to a value. Now we can elaborate: When JavaScript binds a value-type to a name, it makes a copy of the value and places the copy in the environment. As you recall, value types like strings and numbers are identical to each other if they have the same content. So JavaScript can make as many copies of strings, numbers, or booleans as it wishes.</p>

<p>What about reference types? JavaScript does not place copies of reference values in any environment. JavaScript places <em>references</em> to reference types in environments, and when the value needs to be used, JavaScript uses the reference to obtain the original.</p>

<p>Because many references can share the same value, and because JavaScript passes references as arguments, JavaScript can be said to implement “call by sharing” semantics. Call by sharing is generally understood to be a specialization of call by value, and it explains why some values are known as value types and other values are known as reference types.</p>

<p>And with that, we’re ready to look at <em>closures</em>. When we combine our knowledge of value types, reference types, arguments, and closures, we’ll understand why this function always evaluates to <code>true</code> no matter what argument you apply it to:</p>

<div class="code-block">
<div class="highlight"><pre><code class="lineno">1</code> <code class="kd">function</code> <code class="p">(</code><code class="nx">value</code><code class="p">)</code> <code class="p">{</code>
<code class="lineno">2</code>   <code class="k">return</code> <code class="p">(</code><code class="kd">function</code> <code class="p">(</code><code class="nx">copy</code><code class="p">)</code> <code class="p">{</code>
<code class="lineno">3</code>     <code class="k">return</code> <code class="nx">copy</code> <code class="o">===</code> <code class="nx">value</code>
<code class="lineno">4</code>   <code class="p">})(</code><code class="nx">value</code><code class="p">)</code>
<code class="lineno">5</code> <code class="p">}</code>
</pre></div>

</div>

<h3 id="closures">Closures and Scope</h3>

<p>It’s time to see how a function within a function works:</p>

<div class="code-block">
<div class="highlight"><pre><code class="lineno">1</code> <code class="p">(</code><code class="kd">function</code> <code class="p">(</code><code class="nx">x</code><code class="p">)</code> <code class="p">{</code>
<code class="lineno">2</code>   <code class="k">return</code> <code class="kd">function</code> <code class="p">(</code><code class="nx">y</code><code class="p">)</code> <code class="p">{</code>
<code class="lineno">3</code>     <code class="k">return</code> <code class="nx">x</code>
<code class="lineno">4</code>   <code class="p">}</code>
<code class="lineno">5</code> <code class="p">})(</code><code class="mi">1</code><code class="p">)(</code><code class="mi">2</code><code class="p">)</code>
<code class="lineno">6</code>   <code class="c1">//=&gt; 1</code>
</pre></div>

</div>

<p>First off, let’s use what we learned above. Given <code>(</code><em>some function</em><code>)(</code><em>some argument</em><code>)</code>, we know that we apply the function to the argument, create an environment, bind the value of the argument to the name, and evaluate the function’s expression. So we do that first with this code:</p>

<div class="code-block">
<div class="highlight"><pre><code class="lineno">1</code> <code class="p">(</code><code class="kd">function</code> <code class="p">(</code><code class="nx">x</code><code class="p">)</code> <code class="p">{</code>
<code class="lineno">2</code>   <code class="k">return</code> <code class="kd">function</code> <code class="p">(</code><code class="nx">y</code><code class="p">)</code> <code class="p">{</code>
<code class="lineno">3</code>     <code class="k">return</code> <code class="nx">x</code>
<code class="lineno">4</code>   <code class="p">}</code>
<code class="lineno">5</code> <code class="p">})(</code><code class="mi">1</code><code class="p">)</code>
<code class="lineno">6</code>   <code class="c1">//=&gt; </code><code class="cp">[</code><code class="nx">Function</code><code class="cp">]</code><code class="c1"></code>
</pre></div>

</div>

<p>The environment belonging to the function with signature <code>function (x) ...</code> becomes <code>{x: 1, ...}</code>, and the result of applying the function is another function value. It makes sense that the result value is a function, because the expression for <code>function (x) ...</code>’s body is:</p>

<div class="code-block">
<div class="highlight"><pre><code class="lineno">1</code>   <code class="kd">function</code> <code class="p">(</code><code class="nx">y</code><code class="p">)</code> <code class="p">{</code>
<code class="lineno">2</code>     <code class="k">return</code> <code class="nx">x</code>
<code class="lineno">3</code>   <code class="p">}</code>
</pre></div>

</div>

<p>So now we have a value representing that function. Then we’re going to take the value of that function and apply it to the argument <code>2</code>, something like this:</p>

<div class="code-block">
<div class="highlight"><pre><code class="lineno">1</code>   <code class="p">(</code><code class="kd">function</code> <code class="p">(</code><code class="nx">y</code><code class="p">)</code> <code class="p">{</code>
<code class="lineno">2</code>     <code class="k">return</code> <code class="nx">x</code>
<code class="lineno">3</code>   <code class="p">})(</code><code class="mi">2</code><code class="p">)</code>
</pre></div>

</div>

<p>So we seem to get a new environment <code>{y: 2, ...}</code>. How is the expression <code>x</code> going to be evaluated in that function’s environment? There is no <code>x</code> in its environment, it must come from somewhere else.</p>

<div class="aside sidebarish">
  <p>This, by the way, is one of the great defining characteristics of JavaScript and languages in the same family: Whether they allow things like functions to nest inside each other, and if so, how they handle variables from “outside” of a function that are referenced inside a function. For example, here’s the equivalent code in Ruby:</p>

  <div class="code-block">
<div class="highlight"><pre><code class="lineno">1</code> <code class="nb">lambda</code> <code class="p">{</code> <code class="o">|</code><code class="n">x</code><code class="o">|</code>
<code class="lineno">2</code>   <code class="nb">lambda</code> <code class="p">{</code> <code class="o">|</code><code class="n">y</code><code class="o">|</code> <code class="n">x</code> <code class="p">}</code>
<code class="lineno">3</code> <code class="p">}</code><code class="o">[</code><code class="mi">1</code><code class="o">][</code><code class="mi">2</code><code class="o">]</code>
<code class="lineno">4</code>   <code class="c1">#=&gt; 1</code>
</pre></div>
  
</div>

  <p>Now let’s enjoy a relaxed Allongé before we continue!</p>

</div>

<h4 id="leanpub-auto-if-functions-without-free-variables-are-pure-are-closures-impure">If functions without free variables are pure, are closures impure?</h4>

<p>The function <code>function (y) { return x }</code> is interesting. It contains a <em>free variable</em>, <code>x</code>.<sup id="fnref-nonlocal"><a href="#fn-nonlocal" rel="footnote">11</a></sup> A free variable is one that is not bound within the function. Up to now, we’ve only seen one way to “bind” a variable, namely by passing in an argument with the same name. Since the function <code>function (y) { return x }</code> doesn’t have an argument named <code>x</code>, the variable <code>x</code> isn’t bound in this function, which makes it “free.”</p>

<p>Now that we know that variables used in a function are either bound or free, we can bifurcate functions into those with free variables and those without:</p>

<ul>
<li>Functions containing no free variables are called <em>pure functions</em>.</li>
  <li>Functions containing one or more free variables are called <em>closures</em>.</li>
</ul>
<p>Pure functions are easiest to understand. They always mean the same thing wherever you use them. Here are some pure functions we’ve already seen:</p>

<div class="code-block">
<div class="highlight"><pre><code class="lineno"> 1</code> <code class="kd">function</code> <code class="p">()</code> <code class="p">{}</code>
<code class="lineno"> 2</code> 
<code class="lineno"> 3</code> <code class="kd">function</code> <code class="p">(</code><code class="nx">x</code><code class="p">)</code> <code class="p">{</code>
<code class="lineno"> 4</code>   <code class="k">return</code> <code class="nx">x</code>
<code class="lineno"> 5</code> <code class="p">}</code>
<code class="lineno"> 6</code>   
<code class="lineno"> 7</code> <code class="kd">function</code> <code class="p">(</code><code class="nx">x</code><code class="p">)</code> <code class="p">{</code>
<code class="lineno"> 8</code>   <code class="k">return</code> <code class="kd">function</code> <code class="p">(</code><code class="nx">y</code><code class="p">)</code> <code class="p">{</code>
<code class="lineno"> 9</code>     <code class="k">return</code> <code class="nx">x</code>
<code class="lineno">10</code>   <code class="p">}</code>
<code class="lineno">11</code> <code class="p">}</code>
</pre></div>

</div>

<p>The first function doesn’t have any variables, therefore doesn’t have any free variables. The second doesn’t have any free variables, because its only variable is bound. The third one is actually two functions, one in side the other. <code>function (y) ...</code> has a free variable, but the entire expression refers to <code>function (x) ...</code>, and it doesn’t have a free variable: The only variable anywhere in its body is <code>x</code>, which is certainly bound within <code>function (x) ...</code>.</p>

<p>From this, we learn something: A pure function can contain a closure.</p>

<table class="exercise sidebarish"><tbody><tr>
<td class="sidebar-icon">
      <img class="sidebar-image" src="/site_images/javascript-allonge/leanpub_pencil.png" alt="exercise">
</td>
    <td>
      <p>If pure functions can contain closures, can a closure contain a pure function? Using only what we’ve learned so far, attempt to compose a closure that contains a pure function. If you can’t, give your reasoning for why it’s impossible.</p>

    </td>
  </tr></tbody></table>
<p>Pure functions always mean the same thing because all of their “inputs” are fully defined by their arguments. Not so with a closure. If I present to you this pure function <code>function (x, y) { return x + y }</code>, we know exactly what it does with <code>(2, 2)</code>. But what about this closure: <code>function (y) { return x + y }</code>? We can’t say what it will do with argument <code>(2)</code> without understanding the magic for evaluating the free variable <code>x</code>.</p>

<h4 id="leanpub-auto-its-always-the-environment">it’s always the environment</h4>

<p>To understand how closures are evaluated, we need to revisit environments. As we’ve said before, all functions are associated with an environment. We also hand-waved something when describing our environment. Remember that we said the environment for <code>(function (x) { return (function (y) { return x }) })(1)</code> is <code>{x: 1, ...}</code> and that the environment for <code>(function (y) { return x })(2)</code> is <code>{y: 2, ...}</code>? Let’s fill in the blanks!</p>

<p>The environment for <code>(function (y) { return x })(2)</code> is <em>actually</em> <code>{y: 2, '..': {x: 1, ...}}</code>. <code>'..'</code> means something like “parent” or “enclosure” or “super-environment.” It’s <code>function (x) ...</code>’s environment, because the function <code>function (y) { return x }</code> is within <code>function (x) ...</code>’s body. So whenever a function is applied to arguments, its environment always has a reference to its parent environment.</p>

<p>And now you can guess how we evaluate <code>(function (y) { return x })(2)</code> in the environment <code>{y: 2, '..': {x: 1, ...}}</code>. The variable <code>x</code> isn’t in <code>function (y) ...</code>’s immediate environment, but it is in its parent’s environment, so it evaluates to <code>1</code> and that’s what <code>(function (y) { return x })(2)</code> returns even though it ended up ignoring its own argument.</p>

<div class="aside sidebarish">
  <p><code>function (x) { return x }</code> is called the I Combinator or Identity Function. <code>function (x) { return (function (y) { return x }) }</code> is called the K Combinator or Kestrel. Some people get so excited by this that they write entire books about them, some are <a href="http://www.amzn.com/0192801422?tag=raganwald001-20">great</a>, some–how shall I put this–are <a href="https://leanpub.com/combinators" title="Kestrels, Quirky Birds, and Hopeless Egocentricity">interesting</a> if you use Ruby.</p>

</div>

<p>Functions can have grandparents too:</p>

<div class="code-block">
<div class="highlight"><pre><code class="lineno">1</code> <code class="kd">function</code> <code class="p">(</code><code class="nx">x</code><code class="p">)</code> <code class="p">{</code>
<code class="lineno">2</code>   <code class="k">return</code> <code class="kd">function</code> <code class="p">(</code><code class="nx">y</code><code class="p">)</code> <code class="p">{</code>
<code class="lineno">3</code>     <code class="k">return</code> <code class="kd">function</code> <code class="p">(</code><code class="nx">z</code><code class="p">)</code> <code class="p">{</code>
<code class="lineno">4</code>       <code class="k">return</code> <code class="nx">x</code> <code class="o">+</code> <code class="nx">y</code> <code class="o">+</code> <code class="nx">z</code>
<code class="lineno">5</code>     <code class="p">}</code>
<code class="lineno">6</code>   <code class="p">}</code>
<code class="lineno">7</code> <code class="p">}</code>
</pre></div>

</div>

<p>This function does much the same thing as:</p>

<div class="code-block">
<div class="highlight"><pre><code class="lineno">1</code> <code class="kd">function</code> <code class="p">(</code><code class="nx">x</code><code class="p">,</code> <code class="nx">y</code><code class="p">,</code> <code class="nx">z</code><code class="p">)</code> <code class="p">{</code>
<code class="lineno">2</code>   <code class="k">return</code> <code class="nx">x</code> <code class="o">+</code> <code class="nx">y</code> <code class="o">+</code> <code class="nx">z</code>
<code class="lineno">3</code> <code class="p">}</code>
</pre></div>

</div>

<p>Only you call it with <code>(1)(2)(3)</code> instead of <code>(1, 2, 3)</code>. The other big difference is that you can call it with <code>(1)</code> and get a function back that you can later call with <code>(2)(3)</code>.</p>

<div class="page-break"></div>
<div class="aside sidebarish">
  <p>The first function is the result of <a href="https://en.wikipedia.org/wiki/Currying">currying</a> the second function. Calling a curried function with only some of its arguments is sometimes called <a href="https://en.wikipedia.org/wiki/Partial_application">partial application</a>. Some programming languages automatically curry and partially evaluate functions without the need to manually nest them.</p>

</div>

<h4 id="leanpub-auto-shadowy-variables-from-a-shadowy-planet">shadowy variables from a shadowy planet</h4>

<p>An interesting thing happens when a variable has the same name as an ancestor environment’s variable. Consider:</p>

<div class="code-block">
<div class="highlight"><pre><code class="lineno">1</code> <code class="kd">function</code> <code class="p">(</code><code class="nx">x</code><code class="p">)</code> <code class="p">{</code>
<code class="lineno">2</code>   <code class="k">return</code> <code class="kd">function</code> <code class="p">(</code><code class="nx">x</code><code class="p">,</code> <code class="nx">y</code><code class="p">)</code> <code class="p">{</code>
<code class="lineno">3</code>     <code class="k">return</code> <code class="nx">x</code> <code class="o">+</code> <code class="nx">y</code>
<code class="lineno">4</code>   <code class="p">}</code>
<code class="lineno">5</code> <code class="p">}</code>
</pre></div>

</div>

<p>The function <code>function (x, y) { return x + y }</code> is a pure function, because its <code>x</code> is defined within its own environment. Although its parent also defines an <code>x</code>, it is ignored when evaluating <code>x + y</code>. JavaScript always searches for a binding starting with the functions own environment and then each parent in turn until it finds one. The same is true of:</p>

<div class="code-block">
<div class="highlight"><pre><code class="lineno">1</code> <code class="kd">function</code> <code class="p">(</code><code class="nx">x</code><code class="p">)</code> <code class="p">{</code>
<code class="lineno">2</code>   <code class="k">return</code> <code class="kd">function</code> <code class="p">(</code><code class="nx">x</code><code class="p">,</code> <code class="nx">y</code><code class="p">)</code> <code class="p">{</code>
<code class="lineno">3</code>     <code class="k">return</code> <code class="kd">function</code> <code class="p">(</code><code class="nx">w</code><code class="p">,</code> <code class="nx">z</code><code class="p">)</code> <code class="p">{</code>
<code class="lineno">4</code>       <code class="k">return</code> <code class="kd">function</code> <code class="p">(</code><code class="nx">w</code><code class="p">)</code> <code class="p">{</code>
<code class="lineno">5</code>         <code class="k">return</code> <code class="nx">x</code> <code class="o">+</code> <code class="nx">y</code> <code class="o">+</code> <code class="nx">z</code>
<code class="lineno">6</code>       <code class="p">}</code>
<code class="lineno">7</code>     <code class="p">}</code>
<code class="lineno">8</code>   <code class="p">}</code>
<code class="lineno">9</code> <code class="p">}</code>
</pre></div>

</div>

<p>When evaluating <code>x + y + z</code>, JavaScript will find <code>x</code> and <code>y</code> in the great-grandparent scope and <code>z</code> in the parent scope. The <code>x</code> in the great-great-grandparent scope is ignored, as are both <code>w</code>s. When a variable has the same name as an ancestor environment’s binding, it is said to <em>shadow</em> the ancestor.</p>

<p>This is often a good thing.</p>

<h4 id="leanpub-auto-which-came-first-the-chicken-or-the-egg">which came first, the chicken or the egg?</h4>

<p>This behaviour of pure functions and closures has many, many consequences that can be exploited to write software. We are going to explore them in some detail as well as look at some of the other mechanisms JavaScript provides for working with variables and mutable state.</p>

<p>But before we do so, there’s one final question: Where does the ancestry start? If there’s no other code in a file, what is <code>function (x) { return x }</code>’s parent environment?</p>

<p>JavaScript always has the notion of at least one environment we do not control: A global environment in which many useful things are bound such as libraries full of standard functions. So when you invoke <code>(function (x) { return x })(1)</code> in the REPL, its full environment is going to look like this: <code>{x: 1, '..': </code><em>global environment</em><code>}</code>.</p>

<p>Sometimes, programmers wish to avoid this. If you don’t want your code to operate directly within the global environment, what can you do? Create an environment for them, of course. Many programmers choose to write every JavaScript file like this:</p>

<div class="code-block">
<div class="highlight"><pre><code class="lineno">1</code> <code class="c1">// top of the file</code>
<code class="lineno">2</code> <code class="p">(</code><code class="k">function</code> <code class="p">()</code> <code class="p">{</code>
<code class="lineno">3</code>   
<code class="lineno">4</code>   <code class="c1">// ... lots of JavaScript ...</code>
<code class="lineno">5</code>   
<code class="lineno">6</code> <code class="p">})();</code>
<code class="lineno">7</code> <code class="c1">// bottom of the file</code>
</pre></div>

</div>

<p>The effect is to insert a new, empty environment in between the global environment and your own functions: <code>{x: 1, '..': {'..': </code><em>global environment</em><code>}}</code>. As we’ll see when we discuss mutable state, this helps to prevent programmers from accidentally changing the global state that is shared by code in every file when they use the <a href="#var">var keyword</a> properly.</p>

<h3 id="let">Let’s Talk Var</h3>

<p>Up to now, all we’ve really seen are <em>anonymous functions</em>, functions that don’t have a name. This feels very different from programming in most other languages, where the focus is on naming functions, methods, and procedures. Naming things is a critical part of programming, but all we’ve seen so far is how to name arguments.</p>

<p>There are other ways to name things in JavaScript, but before we learn some of those, let’s see how to use what we already have to name things. Let’s revisit a very simple example:</p>

<div class="code-block">
<div class="highlight"><pre><code class="lineno">1</code> <code class="kd">function</code> <code class="p">(</code><code class="nx">diameter</code><code class="p">)</code> <code class="p">{</code>
<code class="lineno">2</code>   <code class="k">return</code> <code class="nx">diameter</code> <code class="o">*</code> <code class="mf">3.14159265</code>
<code class="lineno">3</code> <code class="p">}</code>
</pre></div>

</div>

<p>What is this “3.14159265” number? <a href="https://en.wikipedia.org/wiki/Pi">Pi</a>, obviously. We’d like to name it so that we can write something like:</p>

<div class="code-block">
<div class="highlight"><pre><code class="lineno">1</code> <code class="kd">function</code> <code class="p">(</code><code class="nx">diameter</code><code class="p">)</code> <code class="p">{</code>
<code class="lineno">2</code>   <code class="k">return</code> <code class="nx">diameter</code> <code class="o">*</code> <code class="nx">Pi</code>
<code class="lineno">3</code> <code class="p">}</code>
</pre></div>

</div>

<p>In order to bind <code>3.14159265</code> to the name <code>Pi</code>, we’ll need a function with a parameter of <code>Pi</code> applied to an argument of <code>3.14159265</code>. If we put our function expression in parentheses, we can apply it to the argument of <code>3.14159265</code>:</p>

<div class="code-block">
<div class="highlight"><pre><code class="lineno">1</code> <code class="p">(</code><code class="kd">function</code> <code class="p">(</code><code class="nx">Pi</code><code class="p">)</code> <code class="p">{</code>
<code class="lineno">2</code>   <code class="k">return</code> <code class="o">????</code>
<code class="lineno">3</code> <code class="p">})(</code><code class="mf">3.14159265</code><code class="p">)</code>
</pre></div>

</div>

<p>What do we put inside our new function that binds <code>3.14159265</code> to the name <code>Pi</code> when evaluated? Our circumference function, of course:</p>

<div class="code-block">
<div class="highlight"><pre><code class="lineno">1</code> <code class="p">(</code><code class="kd">function</code> <code class="p">(</code><code class="nx">Pi</code><code class="p">)</code> <code class="p">{</code>
<code class="lineno">2</code>   <code class="k">return</code> <code class="kd">function</code> <code class="p">(</code><code class="nx">diameter</code><code class="p">)</code> <code class="p">{</code>
<code class="lineno">3</code>     <code class="k">return</code> <code class="nx">diameter</code> <code class="o">*</code> <code class="nx">Pi</code>
<code class="lineno">4</code>   <code class="p">}</code>
<code class="lineno">5</code> <code class="p">})(</code><code class="mf">3.14159265</code><code class="p">)</code>
</pre></div>

</div>

<p>This expression, when evaluated, returns a function that calculates circumferences. It differs from our original in that it names the constant <code>Pi</code>. Let’s test it:</p>

<div class="code-block">
<div class="highlight"><pre><code class="lineno">1</code> <code class="p">(</code><code class="kd">function</code> <code class="p">(</code><code class="nx">Pi</code><code class="p">)</code> <code class="p">{</code>
<code class="lineno">2</code>   <code class="k">return</code> <code class="kd">function</code> <code class="p">(</code><code class="nx">diameter</code><code class="p">)</code> <code class="p">{</code>
<code class="lineno">3</code>     <code class="k">return</code> <code class="nx">diameter</code> <code class="o">*</code> <code class="nx">Pi</code>
<code class="lineno">4</code>   <code class="p">}</code>
<code class="lineno">5</code> <code class="p">})(</code><code class="mf">3.14159265</code><code class="p">)(</code><code class="mi">2</code><code class="p">)</code>
<code class="lineno">6</code>   <code class="c1">//=&gt; 6.2831853</code>
</pre></div>

</div>

<p>That works! We can bind anything we want in an expression by wrapping it in a function that is immediately invoked with the value we want to bind.</p>

<h4 id="leanpub-auto-immediately-invoked-function-expressions">immediately invoked function expressions</h4>

<p>JavaScript programmers regularly use the idea of writing an expression that denotes a function and then immediately applying it to arguments. Explaining the pattern, Ben Alman coined the term <a href="http://www.benalman.com/news/2010/11/immediately-invoked-function-expression/">Immediately Invoked Function Expression</a> for it, often abbreviated “IIFE.” As we’ll see in a moment, an IIFE need not have parameters:</p>

<div class="code-block">
<div class="highlight"><pre><code class="lineno">1</code> <code class="p">(</code><code class="kd">function</code> <code class="p">()</code> <code class="p">{</code>
<code class="lineno">2</code>   <code class="c1">// ... do something here...</code>
<code class="lineno">3</code> <code class="p">})();</code>
</pre></div>

</div>

<p>When an IIFE binds values to names (as we did above with <code>Pi</code>), retro-grouch programmers often call it “let.”<sup id="fnref-let"><a href="#fn-let" rel="footnote">12</a></sup> And confusing the issue, upcoming versions of JavaScript have support for a <code>let</code> keyword that has a similar binding behaviour.</p>

<h4 id="var">var</h4>

<p>Using an IIFE to bind names works very well, but only a masochist would write programs this way in JavaScript. Besides all the extra characters, it suffers from a fundamental semantic problem: there is a big visual distance between the name <code>Pi</code> and the value <code>3.14159265</code> we bind to it. They should be closer. Is there another way?</p>

<p>Yes.</p>

<p>Another way to write our “circumference” function would be to pass <code>Pi</code> along with the diameter argument, something like this:</p>

<div class="code-block">
<div class="highlight"><pre><code class="lineno">1</code> <code class="kd">function</code> <code class="p">(</code><code class="nx">diameter</code><code class="p">,</code> <code class="nx">Pi</code><code class="p">)</code> <code class="p">{</code>
<code class="lineno">2</code>   <code class="k">return</code> <code class="nx">diameter</code> <code class="o">*</code> <code class="nx">Pi</code>
<code class="lineno">3</code> <code class="p">}</code>
</pre></div>

</div>

<p>And you could use it like this:</p>

<div class="code-block">
<div class="highlight"><pre><code class="lineno">1</code> <code class="p">(</code><code class="kd">function</code> <code class="p">(</code><code class="nx">diameter</code><code class="p">,</code> <code class="nx">Pi</code><code class="p">)</code> <code class="p">{</code>
<code class="lineno">2</code>   <code class="k">return</code> <code class="nx">diameter</code> <code class="o">*</code> <code class="nx">Pi</code>
<code class="lineno">3</code> <code class="p">})(</code><code class="mi">2</code><code class="p">,</code> <code class="mf">3.14159265</code><code class="p">)</code>
<code class="lineno">4</code>   <code class="c1">//=&gt; 6.2831853</code>
</pre></div>

</div>

<p>This differs from our example above in that there is only one environment, rather than two. We have one binding in the environment representing our regular argument, and another our “constant.” That’s more efficient, and it’s <em>almost</em> what we wanted all along: A way to bind <code>3.14159265</code> to a readable name.</p>

<p>JavaScript gives us a way to do that, the <code>var</code> keyword. We’ll learn a lot more about <code>var</code> in future chapters, but here’s the most important thing you can do with <code>var</code>:</p>

<div class="code-block">
<div class="highlight"><pre><code class="lineno">1</code> <code class="kd">function</code> <code class="p">(</code><code class="nx">diameter</code><code class="p">)</code> <code class="p">{</code>
<code class="lineno">2</code>   <code class="kd">var</code> <code class="nx">Pi</code> <code class="o">=</code> <code class="mf">3.14159265</code><code class="p">;</code>
<code class="lineno">3</code> 
<code class="lineno">4</code>   <code class="k">return</code> <code class="nx">diameter</code> <code class="o">*</code> <code class="nx">Pi</code>
<code class="lineno">5</code> <code class="p">}</code>
</pre></div>

</div>

<p>The <code>var</code> keyword introduces one or more bindings in the current function’s environment. It works just as we want:</p>

<div class="code-block">
<div class="highlight"><pre><code class="lineno">1</code> <code class="p">(</code><code class="kd">function</code> <code class="p">(</code><code class="nx">diameter</code><code class="p">)</code> <code class="p">{</code>
<code class="lineno">2</code>   <code class="kd">var</code> <code class="nx">Pi</code> <code class="o">=</code> <code class="mf">3.14159265</code><code class="p">;</code>
<code class="lineno">3</code> 
<code class="lineno">4</code>   <code class="k">return</code> <code class="nx">diameter</code> <code class="o">*</code> <code class="nx">Pi</code>
<code class="lineno">5</code> <code class="p">})(</code><code class="mi">2</code><code class="p">)</code>
<code class="lineno">6</code>   <code class="c1">//=&gt; 6.2831853</code>
</pre></div>

</div>

<p>You can bind any expression. Functions are expressions, so you can bind helper functions:</p>

<div class="code-block">
<div class="highlight"><pre><code class="lineno">1</code> <code class="kd">function</code> <code class="p">(</code><code class="nx">d</code><code class="p">)</code> <code class="p">{</code>
<code class="lineno">2</code>   <code class="kd">var</code> <code class="nx">calc</code> <code class="o">=</code> <code class="kd">function</code> <code class="p">(</code><code class="nx">diameter</code><code class="p">)</code> <code class="p">{</code>
<code class="lineno">3</code>     <code class="kd">var</code> <code class="nx">Pi</code> <code class="o">=</code> <code class="mf">3.14159265</code><code class="p">;</code>
<code class="lineno">4</code> 
<code class="lineno">5</code>     <code class="k">return</code> <code class="nx">diameter</code> <code class="o">*</code> <code class="nx">Pi</code>
<code class="lineno">6</code>   <code class="p">};</code>
<code class="lineno">7</code> 
<code class="lineno">8</code>   <code class="k">return</code> <code class="s2">"The circumference is "</code> <code class="o">+</code> <code class="nx">calc</code><code class="p">(</code><code class="nx">d</code><code class="p">)</code>
<code class="lineno">9</code> <code class="p">}</code>
</pre></div>

</div>

<p>Notice <code>calc(d)</code>? This underscores what we’ve said: if you have an expression that evaluates to a function, you apply it with <code>()</code>. A name that’s bound to a function is a valid expression evaluating to a function.<sup id="fnref-namedfn"><a href="#fn-namedfn" rel="footnote">13</a></sup></p>

<div class="aside sidebarish">
  <p>Amazing how such an important idea–naming functions–can be explained <em>en passant</em> in just a few words. That emphasizes one of the things JavaScript gets really, really right: Functions as “first class entities.” Functions are values that can be bound to names like any other value, passed as arguments, returned from other functions, and so forth.</p>

</div>

<p>You can bind more than one name-value pair by separating them with commas. For readability, most people put one binding per line:</p>

<div class="code-block">
<div class="highlight"><pre><code class="lineno">1</code> <code class="kd">function</code> <code class="p">(</code><code class="nx">d</code><code class="p">)</code> <code class="p">{</code>
<code class="lineno">2</code>   <code class="kd">var</code> <code class="nx">Pi</code>   <code class="o">=</code> <code class="mf">3.14159265</code><code class="p">,</code>
<code class="lineno">3</code>       <code class="nx">calc</code> <code class="o">=</code> <code class="kd">function</code> <code class="p">(</code><code class="nx">diameter</code><code class="p">)</code> <code class="p">{</code>
<code class="lineno">4</code>         <code class="k">return</code> <code class="nx">diameter</code> <code class="o">*</code> <code class="nx">Pi</code>
<code class="lineno">5</code>       <code class="p">};</code>
<code class="lineno">6</code> 
<code class="lineno">7</code>   <code class="k">return</code> <code class="s2">"The circumference is "</code> <code class="o">+</code> <code class="nx">calc</code><code class="p">(</code><code class="nx">d</code><code class="p">)</code>
<code class="lineno">8</code> <code class="p">}</code>
</pre></div>

</div>

<p>These examples use the <code>var</code> keyword to bind names in the same environment as our function. We can also create a new scope using an IIFE if we wish to bind some names in part of a function:</p>

<div class="code-block">
<div class="highlight"><pre><code class="lineno"> 1</code> <code class="kd">function</code> <code class="nx">foobar</code> <code class="p">()</code> <code class="p">{</code>
<code class="lineno"> 2</code> 
<code class="lineno"> 3</code>   <code class="c1">// do something without foo or bar</code>
<code class="lineno"> 4</code> 
<code class="lineno"> 5</code>   <code class="p">(</code><code class="kd">function</code> <code class="p">()</code> <code class="p">{</code>
<code class="lineno"> 6</code>     <code class="kd">var</code> <code class="nx">foo</code> <code class="o">=</code> <code class="s1">'foo'</code><code class="p">,</code>
<code class="lineno"> 7</code>         <code class="nx">bar</code> <code class="o">=</code> <code class="s1">'bar'</code><code class="p">;</code>
<code class="lineno"> 8</code> 
<code class="lineno"> 9</code>     <code class="c1">// ... do something with foo and bar ...</code>
<code class="lineno">10</code> 
<code class="lineno">11</code>   <code class="p">})();</code>
<code class="lineno">12</code> 
<code class="lineno">13</code>   <code class="c1">// do something else without foo or bar</code>
<code class="lineno">14</code> 
<code class="lineno">15</code> <code class="p">}</code>
</pre></div>

</div>

<h3 id="named-function-expressions">Naming Functions</h3>

<p>Let’s get right to it. This code does <em>not</em> name a function:</p>

<div class="code-block">
<div class="highlight"><pre><code class="lineno">1</code> <code class="kd">var</code> <code class="nx">repeat</code> <code class="o">=</code> <code class="kd">function</code> <code class="p">(</code><code class="nx">str</code><code class="p">)</code> <code class="p">{</code>
<code class="lineno">2</code>   <code class="k">return</code> <code class="nx">str</code> <code class="o">+</code> <code class="nx">str</code>
<code class="lineno">3</code> <code class="p">};</code>
</pre></div>

</div>

<p>It doesn’t name the function “repeat” for the same reason that <code>var answer = 42</code> doesn’t name the number <code>42</code>. That snippet of code binds an anonymous function to a name in an environment, but the function itself remains anonymous.</p>

<p>JavaScript <em>does</em> have a syntax for naming a function, it looks like this:</p>

<div class="code-block">
<div class="highlight"><pre><code class="lineno">1</code> <code class="kd">var</code> <code class="nx">bindingName</code> <code class="o">=</code> <code class="kd">function</code> <code class="nx">actualName</code> <code class="p">()</code> <code class="p">{</code>
<code class="lineno">2</code>   <code class="c1">//...</code>
<code class="lineno">3</code> <code class="p">};</code>
</pre></div>

</div>

<p>In this expression, <code>bindingName</code> is the name in the environment, but <code>actualName</code> is the function’s actual name. This is a <em>named function expression</em>. That may seem confusing, but think of the binding names as properties of the environment, not the function itself. And indeed the name <em>is</em> a property:</p>

<div class="code-block">
<div class="highlight"><pre><code class="lineno">1</code> <code class="n">bindingName</code><code class="p">.</code><code class="n">name</code>
<code class="lineno">2</code>   <code class="c1">//=&gt; 'actualName'</code>
</pre></div>

</div>

<p>In this book we are not examining JavaScript’s tooling such as debuggers baked into browsers, but we will note that when you are navigating call stacks in all modern tools, the function’s binding name is ignored but its actual name is displayed, so naming functions is very useful even if they don’t get a formal binding, e.g.</p>

<div class="code-block">
<div class="highlight"><pre><code class="lineno">1</code> <code class="nx">someBackboneView</code><code class="p">.</code><code class="nx">on</code><code class="p">(</code><code class="s1">'click'</code><code class="p">,</code> <code class="kd">function</code> <code class="nx">clickHandler</code> <code class="p">()</code> <code class="p">{</code>
<code class="lineno">2</code>   <code class="c1">//...</code>
<code class="lineno">3</code> <code class="p">});</code>
</pre></div>

</div>

<p>Now, the function’s actual name has no effect on the environment in which it is used. To whit:</p>

<div class="code-block">
<div class="highlight"><pre><code class="lineno">1</code> <code class="kd">var</code> <code class="nx">bindingName</code> <code class="o">=</code> <code class="kd">function</code> <code class="nx">actualName</code> <code class="p">()</code> <code class="p">{</code>
<code class="lineno">2</code>   <code class="c1">//...</code>
<code class="lineno">3</code> <code class="p">};</code>
<code class="lineno">4</code> 
<code class="lineno">5</code> <code class="nx">bindingName</code>
<code class="lineno">6</code>   <code class="c1">//=&gt; </code><code class="cp">[</code><code class="nx">Function</code><code class="p">:</code> <code class="nx">actualName</code><code class="cp">]</code><code class="c1"></code>
<code class="lineno">7</code> 
<code class="lineno">8</code> <code class="nx">actualName</code>
<code class="lineno">9</code>   <code class="c1">//=&gt; ReferenceError: actualName is not defined</code>
</pre></div>

</div>

<p>So “actualName” isn’t bound in the environment where we use the named function expression. Is it bound anywhere else? Yes it is:</p>

<div class="code-block">
<div class="highlight"><pre><code class="lineno"> 1</code> <code class="kd">var</code> <code class="nx">fn</code> <code class="o">=</code> <code class="kd">function</code> <code class="nx">even</code> <code class="p">(</code><code class="nx">n</code><code class="p">)</code> <code class="p">{</code>
<code class="lineno"> 2</code>   <code class="k">if</code> <code class="p">(</code><code class="nx">n</code> <code class="o">===</code> <code class="mi">0</code><code class="p">)</code> <code class="p">{</code>
<code class="lineno"> 3</code>     <code class="k">return</code> <code class="kc">true</code>
<code class="lineno"> 4</code>   <code class="p">}</code>
<code class="lineno"> 5</code>   <code class="k">else</code> <code class="k">return</code> <code class="o">!</code><code class="nx">even</code><code class="p">(</code><code class="nx">n</code> <code class="o">-</code> <code class="mi">1</code><code class="p">)</code>
<code class="lineno"> 6</code> <code class="p">}</code>
<code class="lineno"> 7</code> 
<code class="lineno"> 8</code> <code class="nx">fn</code><code class="p">(</code><code class="mi">5</code><code class="p">)</code>
<code class="lineno"> 9</code>   <code class="c1">//=&gt; false</code>
<code class="lineno">10</code> 
<code class="lineno">11</code> <code class="nx">fn</code><code class="p">(</code><code class="mi">2</code><code class="p">)</code>
<code class="lineno">12</code>   <code class="c1">//=&gt; true</code>
</pre></div>

</div>

<p><code>even</code> is bound within the function itself, but not outside it. This is useful for making recursive functions.</p>

<h4 id="leanpub-auto-function-declarations">function declarations</h4>

<p>We’ve actually buried the lede.<sup id="fnref-lede"><a href="#fn-lede" rel="footnote">14</a></sup> Naming functions for the purpose of debugging is not as important as what we’re about to discuss. There is another syntax for naming and/or defining a function. It’s called a <em>function declaration</em>, and it looks like this:</p>

<div class="code-block">
<div class="highlight"><pre><code class="lineno">1</code> <code class="kd">function</code> <code class="nx">someName</code> <code class="p">()</code> <code class="p">{</code>
<code class="lineno">2</code>   <code class="c1">// ...</code>
<code class="lineno">3</code> <code class="p">}</code>
</pre></div>

</div>

<p>This behaves a <em>little</em> like:</p>

<div class="code-block">
<div class="highlight"><pre><code class="lineno">1</code> <code class="kd">var</code> <code class="nx">someName</code> <code class="o">=</code> <code class="kd">function</code> <code class="nx">someName</code> <code class="p">()</code> <code class="p">{</code>
<code class="lineno">2</code>   <code class="c1">// ...</code>
<code class="lineno">3</code> <code class="p">}</code>
</pre></div>

</div>

<p>In that it binds a name in the environment to a named function. However, consider this piece of code:</p>

<div class="code-block">
<div class="highlight"><pre><code class="lineno">1</code> <code class="p">(</code><code class="kd">function</code> <code class="p">()</code> <code class="p">{</code>
<code class="lineno">2</code>   <code class="k">return</code> <code class="nx">someName</code><code class="p">;</code>
<code class="lineno">3</code>   
<code class="lineno">4</code>   <code class="kd">var</code> <code class="nx">someName</code> <code class="o">=</code> <code class="kd">function</code> <code class="nx">someName</code> <code class="p">()</code> <code class="p">{</code>
<code class="lineno">5</code>     <code class="c1">// ...</code>
<code class="lineno">6</code>   <code class="p">}</code>
<code class="lineno">7</code> <code class="p">})()</code>
<code class="lineno">8</code>   <code class="c1">//=&gt; undefined  </code>
</pre></div>

</div>

<p>This is what we expect given what we learned about <a href="#var">var</a>: Although <code>someName</code> is declared later in the function, JavaScript behaves as if you’d written:</p>

<div class="code-block">
<div class="highlight"><pre><code class="lineno">1</code> <code class="p">(</code><code class="kd">function</code> <code class="p">()</code> <code class="p">{</code>
<code class="lineno">2</code>   <code class="kd">var</code> <code class="nx">someName</code><code class="p">;</code>
<code class="lineno">3</code>   
<code class="lineno">4</code>   <code class="k">return</code> <code class="nx">someName</code><code class="p">;</code>
<code class="lineno">5</code>   
<code class="lineno">6</code>   <code class="nx">someName</code> <code class="o">=</code> <code class="kd">function</code> <code class="nx">someName</code> <code class="p">()</code> <code class="p">{</code>
<code class="lineno">7</code>     <code class="c1">// ...</code>
<code class="lineno">8</code>   <code class="p">}</code>
<code class="lineno">9</code> <code class="p">})()</code>
</pre></div>

</div>

<p>What about a function declaration without <code>var</code>?</p>

<div class="code-block">
<div class="highlight"><pre><code class="lineno">1</code> <code class="p">(</code><code class="kd">function</code> <code class="p">()</code> <code class="p">{</code>
<code class="lineno">2</code>   <code class="k">return</code> <code class="nx">someName</code><code class="p">;</code>
<code class="lineno">3</code>   
<code class="lineno">4</code>   <code class="kd">function</code> <code class="nx">someName</code> <code class="p">()</code> <code class="p">{</code>
<code class="lineno">5</code>     <code class="c1">// ...</code>
<code class="lineno">6</code>   <code class="p">}</code>
<code class="lineno">7</code> <code class="p">})()</code>
<code class="lineno">8</code>   <code class="c1">//=&gt; </code><code class="cp">[</code><code class="nx">Function</code><code class="p">:</code> <code class="nx">someName</code><code class="cp">]</code><code class="c1"></code>
</pre></div>

</div>

<p>Aha! It works differently, as if you’d written:</p>

<div class="code-block">
<div class="highlight"><pre><code class="lineno">1</code> <code class="p">(</code><code class="kd">function</code> <code class="p">()</code> <code class="p">{</code>
<code class="lineno">2</code>   <code class="kd">var</code> <code class="nx">someName</code> <code class="o">=</code> <code class="kd">function</code> <code class="nx">someName</code> <code class="p">()</code> <code class="p">{</code>
<code class="lineno">3</code>     <code class="c1">// ...</code>
<code class="lineno">4</code>   <code class="p">}</code>
<code class="lineno">5</code>   <code class="k">return</code> <code class="nx">someName</code><code class="p">;</code>
<code class="lineno">6</code> <code class="p">})()</code>
</pre></div>

</div>

<p>That difference is intentional on the part of JavaScript’s design to facilitate a certain style of programming where you put the main logic up front, and the “helper functions” at the bottom. It is not necessary to declare functions in this way in JavaScript, but understanding the syntax and its behaviour (especially the way it differs from <code>var</code>) is essential for working with production code.</p>

<h4 id="leanpub-auto-function-declaration-caveatscaveats">function declaration caveats<sup id="fnref-caveats"><a href="#fn-caveats" rel="footnote">15</a></sup>
</h4>

<p>Function declarations are formally only supposed to be made at what we might call the “top level” of a function. Although some JavaScript environments may permit it, this example is technically illegal and definitely a bad idea:</p>

<div class="code-block">
<div class="highlight"><pre><code class="lineno">1</code> <code class="c1">// function declarations should not happen inside of </code>
<code class="lineno">2</code> <code class="c1">// a block and/or be conditionally executed</code>
<code class="lineno">3</code> <code class="k">if</code> <code class="p">(</code><code class="n">frobbishes</code><code class="p">.</code><code class="n">arePizzled</code><code class="p">())</code> <code class="p">{</code>
<code class="lineno">4</code>   <code class="k">function</code> <code class="n">complainToFactory</code> <code class="p">()</code> <code class="p">{</code>
<code class="lineno">5</code>     <code class="c1">// ...</code>
<code class="lineno">6</code>   <code class="p">}</code>
<code class="lineno">7</code> <code class="p">}</code>
</pre></div>

</div>

<p>The big trouble with expressions like this is that they may work just fine in your test environment but work a different way in production. Or it may work one way today and a different way when the JavaScript engine is updated, say with a new optimization.</p>

<p>Another caveat is that a function declaration cannot exist inside of <em>any</em> expression, otherwise it’s a function expression. So this is a function declaration:</p>

<div class="code-block">
<div class="highlight"><pre><code class="lineno">1</code> <code class="kd">function</code> <code class="nx">trueDat</code> <code class="p">()</code> <code class="p">{</code> <code class="k">return</code> <code class="kc">true</code> <code class="p">}</code>
</pre></div>

</div>

<p>But this is not:</p>

<div class="code-block">
<div class="highlight"><pre><code class="lineno">1</code> <code class="p">(</code><code class="kd">function</code> <code class="nx">trueDat</code> <code class="p">()</code> <code class="p">{</code> <code class="k">return</code> <code class="kc">true</code> <code class="p">})</code>
</pre></div>

</div>

<p>The parentheses make this an expression.</p>

<h3 id="combinators">Combinators and Function Decorators</h3>

<h4 id="leanpub-auto-higher-order-functions">higher-order functions</h4>

<p>As we’ve seen, JavaScript functions take values as arguments and return values. JavaScript functions are values, so JavaScript functions can take functions as arguments, return functions, or both. Generally speaking, a function that either takes functions as arguments or returns a function (or both) is referred to as a “higher-order” function.</p>

<p>Here’s very simple higher-order function that takes a function as an argument:</p>

<div class="code-block">
<div class="highlight"><pre><code class="lineno"> 1</code> <code class="kd">function</code> <code class="nx">repeat</code> <code class="p">(</code><code class="nx">num</code><code class="p">,</code> <code class="nx">fn</code><code class="p">)</code> <code class="p">{</code>
<code class="lineno"> 2</code>   <code class="kd">var</code> <code class="nx">i</code><code class="p">,</code> <code class="nx">value</code><code class="p">;</code>
<code class="lineno"> 3</code>   
<code class="lineno"> 4</code>   <code class="k">for</code> <code class="p">(</code><code class="nx">i</code> <code class="o">=</code> <code class="mi">1</code><code class="p">;</code> <code class="nx">i</code> <code class="o">&lt;=</code> <code class="nx">num</code><code class="p">;</code> <code class="o">++</code><code class="nx">i</code><code class="p">)</code>
<code class="lineno"> 5</code>     <code class="nx">value</code> <code class="o">=</code> <code class="nx">fn</code><code class="p">(</code><code class="nx">i</code><code class="p">);</code>
<code class="lineno"> 6</code>   
<code class="lineno"> 7</code>   <code class="k">return</code> <code class="nx">value</code><code class="p">;</code>
<code class="lineno"> 8</code> <code class="p">}</code>
<code class="lineno"> 9</code> 
<code class="lineno">10</code> <code class="nx">repeat</code><code class="p">(</code><code class="mi">3</code><code class="p">,</code> <code class="kd">function</code> <code class="p">()</code> <code class="p">{</code> 
<code class="lineno">11</code>   <code class="nx">console</code><code class="p">.</code><code class="nx">log</code><code class="p">(</code><code class="s1">'Hello'</code><code class="p">)</code> 
<code class="lineno">12</code> <code class="p">})</code>
<code class="lineno">13</code>   <code class="c1">//=&gt;</code>
<code class="lineno">14</code>     <code class="s1">'Hello'</code>
<code class="lineno">15</code>     <code class="s1">'Hello'</code>
<code class="lineno">16</code>     <code class="s1">'Hello'</code>
<code class="lineno">17</code>     <code class="kc">undefined</code>
</pre></div>

</div>

<p>Higher-order functions dominate <em>JavaScript Allongé</em>. But before we go on, we’ll talk about some specific types of higher-order functions.</p>

<h4 id="leanpub-auto-combinators">combinators</h4>

<p>The word “combinator” has a precise technical meaning in mathematics:</p>

<blockquote>
  <p>“A combinator is a higher-order function that uses only function application and earlier defined combinators to define a result from its arguments.”–<a href="https://en.wikipedia.org/wiki/Combinatory_logic" title="Combinatory Logic">Wikipedia</a></p>
</blockquote>

<p>If we were learning Combinatorial Logic, we’d start with the most basic combinators like <code>S</code>, <code>K</code>, and <code>I</code>, and work up from there to practical combinators. We’d learn that the fundamental combinators are named after birds following the example of Raymond Smullyan’s famous book <a href="http://www.amazon.com/gp/product/B00A1P096Y/ref=as_li_ss_tl?ie=UTF8&amp;camp=1789&amp;creative=390957&amp;creativeASIN=B00A1P096Y&amp;linkCode=as2&amp;tag=raganwald001-20">To Mock a Mockingbird</a>.</p>

<p>In this book, we will be using a looser definition of “combinator:” Higher-order pure functions that take only functions as arguments and return a function. We won’t be strict about using only previously defined combinators in their construction.</p>

<p>Let’s start with a useful combinator: Most programmers call it <em>Compose</em>, although the logicians call it the B combinator or “Bluebird.” Here is the typical<sup id="fnref-bluebird"><a href="#fn-bluebird" rel="footnote">16</a></sup> programming implementation:</p>

<div class="code-block">
<div class="highlight"><pre><code class="lineno">1</code> <code class="kd">function</code> <code class="nx">compose</code> <code class="p">(</code><code class="nx">a</code><code class="p">,</code> <code class="nx">b</code><code class="p">)</code> <code class="p">{</code>
<code class="lineno">2</code>   <code class="k">return</code> <code class="kd">function</code> <code class="p">(</code><code class="nx">c</code><code class="p">)</code> <code class="p">{</code>
<code class="lineno">3</code>     <code class="k">return</code> <code class="nx">a</code><code class="p">(</code><code class="nx">b</code><code class="p">(</code><code class="nx">c</code><code class="p">))</code>
<code class="lineno">4</code>   <code class="p">}</code>
<code class="lineno">5</code> <code class="p">}</code>
</pre></div>

</div>

<p>Let’s say we have:</p>

<div class="code-block">
<div class="highlight"><pre><code class="lineno">1</code> <code class="kd">function</code> <code class="nx">addOne</code> <code class="p">(</code><code class="nx">number</code><code class="p">)</code> <code class="p">{</code>
<code class="lineno">2</code>   <code class="k">return</code> <code class="nx">number</code> <code class="o">+</code> <code class="mi">1</code>
<code class="lineno">3</code> <code class="p">}</code>
<code class="lineno">4</code> 
<code class="lineno">5</code> <code class="kd">function</code> <code class="nx">doubleOf</code> <code class="p">(</code><code class="nx">number</code><code class="p">)</code> <code class="p">{</code>
<code class="lineno">6</code>   <code class="k">return</code> <code class="nx">number</code> <code class="o">*</code> <code class="mi">2</code>
<code class="lineno">7</code> <code class="p">}</code>
</pre></div>

</div>

<p>With <code>compose</code>, anywhere you would write</p>

<div class="code-block">
<div class="highlight"><pre><code class="lineno">1</code> <code class="kd">function</code> <code class="nx">doubleOfAddOne</code> <code class="p">(</code><code class="nx">number</code><code class="p">)</code> <code class="p">{</code>
<code class="lineno">2</code>   <code class="k">return</code> <code class="nx">doubleOf</code><code class="p">(</code><code class="nx">addOne</code><code class="p">(</code><code class="nx">number</code><code class="p">))</code>
<code class="lineno">3</code> <code class="p">}</code>
</pre></div>

</div>

<p>You could also write:</p>

<div class="code-block">
<div class="highlight"><pre><code class="lineno">1</code> <code class="n">var</code> <code class="n">doubleOfAddOne</code> <code class="o">=</code> <code class="n">compose</code><code class="p">(</code><code class="n">doubleOf</code><code class="p">,</code> <code class="n">addOne</code><code class="p">);</code>
</pre></div>

</div>

<p>This is, of course, just one example of many. You’ll find lots more perusing the recipes in this book. While some programmers believe “There Should Only Be One Way To Do It,” having combinators available as well as explicitly writing things out with lots of symbols and keywords has some advantages when used judiciously.</p>

<h4 id="leanpub-auto-a-balanced-statement-about-combinators">a balanced statement about combinators</h4>

<p>Code that uses a lot of combinators tends to name the verbs and adverbs (like <code>doubleOf</code>, <code>addOne</code>, and <code>compose</code>) while avoiding language keywords and the names of nouns (like <code>number</code>). So one perspective is that combinators are useful when you want to emphasize what you’re doing and how it fits together, and more explicit code is useful when you want to emphasize what you’re working with.</p>

<h4 id="decorators">function decorators</h4>

<p>A <em>function decorator</em> is a higher-order function that takes one function as an argument, returns another function, and the returned function is a variation of the argument function. Here’s a ridiculous example of a decorator:</p>

<div class="code-block">
<div class="highlight"><pre><code class="lineno">1</code> <code class="kd">function</code> <code class="nx">not</code> <code class="p">(</code><code class="nx">fn</code><code class="p">)</code> <code class="p">{</code>
<code class="lineno">2</code>   <code class="k">return</code> <code class="kd">function</code> <code class="p">(</code><code class="nx">argument</code><code class="p">)</code> <code class="p">{</code>
<code class="lineno">3</code>     <code class="k">return</code> <code class="o">!</code><code class="nx">fn</code><code class="p">(</code><code class="nx">argument</code><code class="p">)</code>
<code class="lineno">4</code>   <code class="p">}</code>
<code class="lineno">5</code> <code class="p">}</code>
</pre></div>

</div>

<p>So instead of writing <code>!someFunction(42)</code>, you can write <code>not(someFunction)(42)</code>. Hardly progress. But like <code>compose</code>, you could write either</p>

<div class="code-block">
<div class="highlight"><pre><code class="lineno">1</code> <code class="kd">function</code> <code class="nx">something</code> <code class="p">(</code><code class="nx">x</code><code class="p">)</code> <code class="p">{</code>
<code class="lineno">2</code>   <code class="k">return</code> <code class="nx">x</code> <code class="o">!=</code> <code class="kc">null</code>
<code class="lineno">3</code> <code class="p">}</code>
</pre></div>

</div>

<p>And elsewhere, he writes:</p>

<div class="code-block">
<div class="highlight"><pre><code class="lineno">1</code> <code class="kd">function</code> <code class="nx">nothing</code> <code class="p">(</code><code class="nx">x</code><code class="p">)</code> <code class="p">{</code>
<code class="lineno">2</code>   <code class="k">return</code> <code class="o">!</code><code class="nx">something</code><code class="p">(</code><code class="nx">x</code><code class="p">)</code>
<code class="lineno">3</code> <code class="p">}</code>
</pre></div>

</div>

<p>Or:</p>

<div class="code-block">
<div class="highlight"><pre><code class="lineno">1</code> <code class="n">var</code> <code class="n">nothing</code> <code class="o">=</code> <code class="n">not</code><code class="p">(</code><code class="n">something</code><code class="p">);</code>
</pre></div>

</div>

<p><code>not</code> is a function decorator because it modifies a function while remaining strongly related to the original function’s semantics. You’ll see other function decorators in the recipes, like <a href="#once">once</a>, <a href="#mapWith">mapWith</a>, and <a href="#maybe">maybe</a>. Function decorators aren’t strict about being pure functions, so there’s more latitude for making decorators than combinators.</p>

<h3 id="buildingblocks">Building Blocks</h3>

<p>When you look at functions within functions in JavaScript, there’s a bit of a “spaghetti code” look to it. The strength of JavaScript is that you can do anything. The weakness is that you will. There are ifs, fors, returns, everything thrown higgledy piggledy together. Although you needn’t restrict yourself to a small number of simple patterns, it can be helpful to understand the patterns so that you can structure your code around some basic building blocks.</p>

<h4 id="leanpub-auto-composition">composition</h4>

<p>One of the most basic of these building blocks is <em>composition</em>:</p>

<div class="code-block">
<div class="highlight"><pre><code class="lineno">1</code> <code class="kd">function</code> <code class="nx">cookAndEat</code> <code class="p">(</code><code class="nx">food</code><code class="p">)</code> <code class="p">{</code>
<code class="lineno">2</code>   <code class="k">return</code> <code class="nx">eat</code><code class="p">(</code><code class="nx">cook</code><code class="p">(</code><code class="nx">food</code><code class="p">))</code>
<code class="lineno">3</code> <code class="p">}</code>
</pre></div>

</div>

<p>It’s really that simple: Whenever you are chaining two or more functions together, you’re composing them. You can compose them with explicit JavaScript code as we’ve just done. You can also generalize composition with the B Combinator or “compose” that we saw in <a href="#combinators">Combinators and Decorators</a>:</p>

<div class="code-block">
<div class="highlight"><pre><code class="lineno">1</code> <code class="kd">function</code> <code class="nx">compose</code> <code class="p">(</code><code class="nx">a</code><code class="p">,</code> <code class="nx">b</code><code class="p">)</code> <code class="p">{</code>
<code class="lineno">2</code>   <code class="k">return</code> <code class="kd">function</code> <code class="p">(</code><code class="nx">c</code><code class="p">)</code> <code class="p">{</code>
<code class="lineno">3</code>     <code class="k">return</code> <code class="nx">a</code><code class="p">(</code><code class="nx">b</code><code class="p">(</code><code class="nx">c</code><code class="p">))</code>
<code class="lineno">4</code>   <code class="p">}</code>
<code class="lineno">5</code> <code class="p">}</code>
<code class="lineno">6</code> 
<code class="lineno">7</code> <code class="kd">var</code> <code class="nx">cookAndEat</code> <code class="o">=</code> <code class="nx">compose</code><code class="p">(</code><code class="nx">eat</code><code class="p">,</code> <code class="nx">cook</code><code class="p">);</code>
</pre></div>

</div>

<p>If that was all there was to it, composition wouldn’t matter much. But like many patterns, using it when it applies is only 20% of the benefit. The other 80% comes from organizing your code such that you can use it: Writing functions that can be composed in various ways.</p>

<p>In the recipes, we’ll look at a decorator called  <a href="#once">once</a>: It ensures that a function can only be executed once. Thereafter, it does nothing. Once is useful for ensuring that certain side effects are not repeated. We’ll also look at <a href="#maybe">maybe</a>: It ensures that a function does nothing if it is given nothing (like <code>null</code> or <code>undefined</code>) as an argument.</p>

<p>Of course, you needn’t use combinators to implement either of these ideas, you can use if statements. But <code>once</code> and <code>maybe</code> compose, so you can chain them together as you see fit:</p>

<div class="code-block">
<div class="highlight"><pre><code class="lineno">1</code> <code class="kd">function</code> <code class="nx">actuallyTransfer</code><code class="p">(</code><code class="nx">from</code><code class="p">,</code> <code class="nx">to</code><code class="p">,</code> <code class="nx">amount</code><code class="p">)</code> <code class="p">{</code>
<code class="lineno">2</code>   <code class="c1">// do something</code>
<code class="lineno">3</code> <code class="p">}</code>
<code class="lineno">4</code> 
<code class="lineno">5</code> <code class="kd">var</code> <code class="nx">invokeTransfer</code> <code class="o">=</code> <code class="nx">once</code><code class="p">(</code><code class="nx">maybe</code><code class="p">(</code><code class="nx">actuallyTransfer</code><code class="p">(...)));</code>
</pre></div>

</div>

<h4 id="leanpub-auto-partial-application">partial application</h4>

<p>Another basic building block is <em>partial application</em>. When a function takes multiple arguments, we “apply” the function to the arguments by evaluating it with all of the arguments, producing a value. But what if we only supply some of the arguments? In that case, we can’t get the final value, but we can get a function that represents <em>part</em> of our application.</p>

<p>Code is easier than words for this. The <a href="http://underscorejs.org">Underscore</a> library provides a higher-order function called <em>map</em>.<sup id="fnref-headache"><a href="#fn-headache" rel="footnote">17</a></sup> It applies another function to each element of an array, like this:</p>

<div class="code-block">
<div class="highlight"><pre><code class="lineno">1</code> <code class="nx">_</code><code class="p">.</code><code class="nx">map</code><code class="p">(</code><code class="cp">[</code><code class="mi">1</code><code class="p">,</code> <code class="mi">2</code><code class="p">,</code> <code class="mi">3</code><code class="cp">]</code><code class="p">,</code> <code class="kd">function</code> <code class="p">(</code><code class="nx">n</code><code class="p">)</code> <code class="p">{</code> <code class="k">return</code> <code class="nx">n</code> <code class="o">*</code> <code class="nx">n</code> <code class="p">})</code>
<code class="lineno">2</code>   <code class="c1">//=&gt; </code><code class="cp">[</code><code class="mi">1</code><code class="p">,</code> <code class="mi">4</code><code class="p">,</code> <code class="mi">9</code><code class="cp">]</code><code class="c1"></code>
</pre></div>

</div>

<p>This code implements a partial application of the map function by applying the function <code>function (n) { return n * n }</code> as its second argument:</p>

<div class="code-block">
<div class="highlight"><pre><code class="lineno">1</code> <code class="kd">function</code> <code class="nx">squareAll</code> <code class="p">(</code><code class="nx">array</code><code class="p">)</code> <code class="p">{</code>
<code class="lineno">2</code>   <code class="k">return</code> <code class="nx">_</code><code class="p">.</code><code class="nx">map</code><code class="p">(</code><code class="nx">array</code><code class="p">,</code> <code class="kd">function</code> <code class="p">(</code><code class="nx">n</code><code class="p">)</code> <code class="p">{</code> <code class="k">return</code> <code class="nx">n</code> <code class="o">*</code> <code class="nx">n</code> <code class="p">})</code>
<code class="lineno">3</code> <code class="p">}</code>
</pre></div>

</div>

<p>The resulting function–<code>squareAll</code>–is still the map function, it’s just that we’ve applied one of its two arguments already. <code>squareAll</code> is nice, but why write one function every time we want to partially apply a function to a map? We can abstract this one level higher. <code>mapWith</code> takes any function as an argument and returns a partially applied map function.</p>

<div class="code-block">
<div class="highlight"><pre><code class="lineno"> 1</code> <code class="kd">function</code> <code class="nx">mapWith</code> <code class="p">(</code><code class="nx">fn</code><code class="p">)</code> <code class="p">{</code>
<code class="lineno"> 2</code>   <code class="k">return</code> <code class="kd">function</code> <code class="p">(</code><code class="nx">array</code><code class="p">)</code> <code class="p">{</code>
<code class="lineno"> 3</code>     <code class="k">return</code> <code class="nx">_</code><code class="p">.</code><code class="nx">map</code><code class="p">(</code><code class="nx">array</code><code class="p">,</code> <code class="nx">fn</code><code class="p">)</code>
<code class="lineno"> 4</code>   <code class="p">}</code>
<code class="lineno"> 5</code> <code class="p">}</code>
<code class="lineno"> 6</code> 
<code class="lineno"> 7</code> <code class="kd">var</code> <code class="nx">squareAll</code> <code class="o">=</code> <code class="nx">mapWith</code><code class="p">(</code><code class="kd">function</code> <code class="p">(</code><code class="nx">n</code><code class="p">)</code> <code class="p">{</code> <code class="k">return</code> <code class="nx">n</code> <code class="o">*</code> <code class="nx">n</code> <code class="p">});</code>
<code class="lineno"> 8</code> 
<code class="lineno"> 9</code> <code class="nx">squareAll</code><code class="p">(</code><code class="cp">[</code><code class="mi">1</code><code class="p">,</code> <code class="mi">2</code><code class="p">,</code> <code class="mi">3</code><code class="cp">]</code><code class="p">)</code>
<code class="lineno">10</code>   <code class="c1">//=&gt; </code><code class="cp">[</code><code class="mi">1</code><code class="p">,</code> <code class="mi">4</code><code class="p">,</code> <code class="mi">9</code><code class="cp">]</code><code class="c1"></code>
</pre></div>

</div>

<p>We’ll discuss mapWith again in <a href="#mapWith">the recipes</a>. The important thing to see is that partial application is orthogonal to composition, and that they both work together nicely:</p>

<div class="code-block">
<div class="highlight"><pre><code class="lineno">1</code> <code class="kd">var</code> <code class="nx">safeSquareAll</code> <code class="o">=</code> <code class="nx">mapWith</code><code class="p">(</code><code class="nx">maybe</code><code class="p">(</code><code class="kd">function</code> <code class="p">(</code><code class="nx">n</code><code class="p">)</code> <code class="p">{</code> <code class="k">return</code> <code class="nx">n</code> <code class="o">*</code> <code class="nx">n</code> <code class="p">}));</code>
<code class="lineno">2</code> 
<code class="lineno">3</code> <code class="nx">safeSquareAll</code><code class="p">(</code><code class="cp">[</code><code class="mi">1</code><code class="p">,</code> <code class="kt">null</code><code class="p">,</code> <code class="mi">2</code><code class="p">,</code> <code class="mi">3</code><code class="cp">]</code><code class="p">)</code>
<code class="lineno">4</code>   <code class="c1">//=&gt; </code><code class="cp">[</code><code class="mi">1</code><code class="p">,</code> <code class="kt">null</code><code class="p">,</code> <code class="mi">4</code><code class="p">,</code> <code class="mi">9</code><code class="cp">]</code><code class="c1"></code>
</pre></div>

</div>

<p>We generalized composition with the <code>compose</code> combinator. Partial application also has a combinator, which we’ll see in the <a href="#partial">partial</a> recipe.</p>

<h3 id="arguments-again">I’d Like to Have Some Arguments. Again.</h3>

<p>As we’ve discussed, when a function is applied to arguments (or “called”), JavaScript binds the values of arguments to the function’s argument names in an environment created for the function’s execution. What we didn’t discuss is that JavaScript also binds some “magic” names in addition to any you put in the argument list.</p>

<p>You should never attempt to define your own bindings against these names. Consider them read-only at all times. The first is called <code>this</code> and it is bound to something called the function’s <a href="#context">context</a>. We will explore that when we start discussing objects and classes. The second is very interesting, it’s called <code>arguments</code>, and the most interesting thing about it is that it contains a list of arguments passed to the function:</p>

<div class="code-block">
<div class="highlight"><pre><code class="lineno">1</code> <code class="kd">function</code> <code class="nx">plus</code> <code class="p">(</code><code class="nx">a</code><code class="p">,</code> <code class="nx">b</code><code class="p">)</code> <code class="p">{</code>
<code class="lineno">2</code>   <code class="k">return</code> <code class="nx">arguments</code><code class="cp">[</code><code class="mi">0</code><code class="cp">]</code> <code class="o">+</code> <code class="nx">arguments</code><code class="cp">[</code><code class="mi">1</code><code class="cp">]</code>
<code class="lineno">3</code> <code class="p">}</code>
<code class="lineno">4</code> 
<code class="lineno">5</code> <code class="nx">plus</code><code class="p">(</code><code class="mi">2</code><code class="p">,</code><code class="mi">3</code><code class="p">)</code>
<code class="lineno">6</code>   <code class="c1">//=&gt; 5</code>
</pre></div>

</div>

<p>Although <code>arguments</code> looks like an array, it isn’t an array:<sup id="fnref-pojo"><a href="#fn-pojo" rel="footnote">18</a></sup> It’s more like an object[^pojo] that happens to bind some values to properties with names that look like integers starting with zero:</p>

<div class="code-block">
<div class="highlight"><pre><code class="lineno">1</code> <code class="kd">function</code> <code class="nx">args</code> <code class="p">(</code><code class="nx">a</code><code class="p">,</code> <code class="nx">b</code><code class="p">)</code> <code class="p">{</code>
<code class="lineno">2</code>   <code class="k">return</code> <code class="nx">arguments</code>
<code class="lineno">3</code> <code class="p">}</code>
<code class="lineno">4</code> 
<code class="lineno">5</code> <code class="nx">args</code><code class="p">(</code><code class="mi">2</code><code class="p">,</code><code class="mi">3</code><code class="p">)</code>
<code class="lineno">6</code>   <code class="c1">//=&gt; { '0': 2, '1': 3 }</code>
</pre></div>

</div>

<p><code>arguments</code> always contains all of the arguments passed to a function, regardless of how many are declared. Therefore, we can write <code>plus</code> like this:</p>

<div class="code-block">
<div class="highlight"><pre><code class="lineno">1</code> <code class="kd">function</code> <code class="nx">plus</code> <code class="p">()</code> <code class="p">{</code>
<code class="lineno">2</code>   <code class="k">return</code> <code class="nx">arguments</code><code class="cp">[</code><code class="mi">0</code><code class="cp">]</code> <code class="o">+</code> <code class="nx">arguments</code><code class="cp">[</code><code class="mi">1</code><code class="cp">]</code>
<code class="lineno">3</code> <code class="p">}</code>
<code class="lineno">4</code> 
<code class="lineno">5</code> <code class="nx">plus</code><code class="p">(</code><code class="mi">2</code><code class="p">,</code><code class="mi">3</code><code class="p">)</code>
<code class="lineno">6</code>   <code class="c1">//=&gt; 5</code>
</pre></div>

</div>

<p>When discussing objects, we’ll discuss properties in more depth. Here’s something interesting about <code>arguments</code>:</p>

<div class="code-block">
<div class="highlight"><pre><code class="lineno"> 1</code> <code class="kd">function</code> <code class="nx">howMany</code> <code class="p">()</code> <code class="p">{</code>
<code class="lineno"> 2</code>   <code class="k">return</code> <code class="nx">arguments</code><code class="cp">[</code><code class="s1">'length'</code><code class="cp">]</code>
<code class="lineno"> 3</code> <code class="p">}</code>
<code class="lineno"> 4</code> 
<code class="lineno"> 5</code> <code class="nx">howMany</code><code class="p">()</code>
<code class="lineno"> 6</code>   <code class="c1">//=&gt; 0</code>
<code class="lineno"> 7</code> 
<code class="lineno"> 8</code> <code class="nx">howMany</code><code class="p">(</code><code class="s1">'hello'</code><code class="p">)</code>
<code class="lineno"> 9</code>   <code class="c1">//=&gt; 1</code>
<code class="lineno">10</code> 
<code class="lineno">11</code> <code class="nx">howMany</code><code class="p">(</code><code class="s1">'sharks'</code><code class="p">,</code> <code class="s1">'are'</code><code class="p">,</code> <code class="s1">'apex'</code><code class="p">,</code> <code class="s1">'predators'</code><code class="p">)</code>
<code class="lineno">12</code>   <code class="c1">//=&gt; 4</code>
</pre></div>

</div>

<p>The most common use of the <code>arguments</code> binding is to build functions that can take a variable number of arguments. We’ll see it used in many of the recipes, starting off with <a href="#simple-partial">partial application</a> and <a href="#ellipses">ellipses</a>.</p>

<h3 id="leanpub-auto-summary">Summary</h3>

<table class="tip sidebarish"><tbody><tr>
<td class="sidebar-icon">
      <img class="sidebar-image" src="/site_images/javascript-allonge/leanpub_key.png" alt="tip">
</td>
    <td>
      <h4 id="leanpub-auto-functions">Functions</h4>

  <ul>
<li>Functions are values that can be part of expressions, returned from other functions, and so forth.</li>
    <li>Functions are <em>reference values</em>.</li>
    <li>Functions are applied to arguments.</li>
    <li>The arguments are passed by sharing, which is also called “pass by value.”</li>
    <li>Function bodies have zero or more expressions.</li>
    <li>Function application evaluates whatever is returned with the <code>return</code> keyword, or to <code>undefined</code>.</li>
    <li>Function application creates a scope. Scopes are nested and free variable references closed over.</li>
    <li>Variables can shadow variables in an enclosing scope.</li>
    <li>
<code>let</code> is an idiom where we create a function and call it immediately in order to bind values to names.</li>
    <li>JavaScript uses <code>var</code> to bind variables within a function’s scope.</li>
  </ul>
</td>
  </tr></tbody></table>
<h2 id="leanpub-auto-the-recipe-cheat-sheet">
<span class="section-number">2 </span>The Recipe Cheat Sheet</h2>

<p>In the recipes, you may see one or more of the following JavaScript constructs being used before being fully explained in the text. Here’re some brief explanations to tide you over:</p>

<h4 id="leanpub-auto-apply-and-call">apply and call</h4>

<p>Functions are applied with <code>()</code>. But they also have <em>methods</em> for applying them to arguments. <code>.call</code> and <code>.apply</code> are explained when we discuss <a href="#context">function contexts</a>, but here are some examples:</p>

<div class="code-block">
<div class="highlight"><pre><code class="lineno"> 1</code> <code class="kd">function</code> <code class="nx">plus</code> <code class="p">(</code><code class="nx">a</code><code class="p">,</code> <code class="nx">b</code><code class="p">)</code> <code class="p">{</code>
<code class="lineno"> 2</code>   <code class="k">return</code> <code class="nx">a</code> <code class="o">+</code> <code class="nx">b</code>
<code class="lineno"> 3</code> <code class="p">}</code>
<code class="lineno"> 4</code> 
<code class="lineno"> 5</code> <code class="nx">plus</code><code class="p">(</code><code class="mi">2</code><code class="p">,</code> <code class="mi">3</code><code class="p">)</code> 
<code class="lineno"> 6</code>   <code class="c1">//=&gt; 5</code>
<code class="lineno"> 7</code>   
<code class="lineno"> 8</code> <code class="nx">plus</code><code class="p">.</code><code class="nx">call</code><code class="p">(</code><code class="k">this</code><code class="p">,</code> <code class="mi">2</code><code class="p">,</code> <code class="mi">3</code><code class="p">)</code>
<code class="lineno"> 9</code>   <code class="c1">//=&gt; 5</code>
<code class="lineno">10</code>   
<code class="lineno">11</code> <code class="nx">plus</code><code class="p">.</code><code class="nx">apply</code><code class="p">(</code><code class="k">this</code><code class="p">,</code> <code class="cp">[</code><code class="mi">2</code><code class="p">,</code> <code class="mi">3</code><code class="cp">]</code><code class="p">)</code>
<code class="lineno">12</code>   <code class="c1">//=&gt; 5</code>
</pre></div>

</div>

<h4 id="leanpub-auto-slice">slice</h4>

<p>Arrays have a <code>.slice</code> method. The function can always be found at <code>Array.prototype.slice</code>. It works like this:</p>

<div class="code-block">
<div class="highlight"><pre><code class="lineno">1</code> <code class="cp">[</code><code class="mi">1</code><code class="p">,</code> <code class="mi">2</code><code class="p">,</code> <code class="mi">3</code><code class="p">,</code> <code class="mi">4</code><code class="p">,</code> <code class="mi">5</code><code class="cp">]</code><code class="x">.slice(0)</code>
<code class="lineno">2</code> <code class="x">  //=&gt; </code><code class="cp">[</code><code class="mi">1</code><code class="p">,</code> <code class="mi">2</code><code class="p">,</code> <code class="mi">3</code><code class="p">,</code> <code class="mi">4</code><code class="p">,</code> <code class="mi">5</code><code class="cp">]</code><code class="x"></code>
<code class="lineno">3</code> <code class="x">  </code>
<code class="lineno">4</code> <code class="cp">[</code><code class="mi">1</code><code class="p">,</code> <code class="mi">2</code><code class="p">,</code> <code class="mi">3</code><code class="p">,</code> <code class="mi">4</code><code class="p">,</code> <code class="mi">5</code><code class="cp">]</code><code class="x">.slice(1)</code>
<code class="lineno">5</code> <code class="x">  //=&gt; </code><code class="cp">[</code><code class="mi">2</code><code class="p">,</code> <code class="mi">3</code><code class="p">,</code> <code class="mi">4</code><code class="p">,</code> <code class="mi">5</code><code class="cp">]</code><code class="x"></code>
<code class="lineno">6</code> <code class="x">  </code>
<code class="lineno">7</code> <code class="cp">[</code><code class="mi">1</code><code class="p">,</code> <code class="mi">2</code><code class="p">,</code> <code class="mi">3</code><code class="p">,</code> <code class="mi">4</code><code class="p">,</code> <code class="mi">5</code><code class="cp">]</code><code class="x">.slice(1, 4)</code>
<code class="lineno">8</code> <code class="x">  //=&gt; </code><code class="cp">[</code><code class="mi">2</code><code class="p">,</code> <code class="mi">3</code><code class="p">,</code> <code class="mi">4</code><code class="cp">]</code><code class="x"></code>
</pre></div>

</div>

<p>Note that <code>slice</code> always creates a new array, so <code>.slice(0)</code> makes a copy of an array. The <a href="#arguments-again">arguments</a> pseudo-variable is not an array, but you can use <code>.slice</code> with it like this to get an array of all or some of the arguments:</p>

<div class="code-block">
<div class="highlight"><pre><code class="lineno">1</code> <code class="nb">Array</code><code class="p">.</code><code class="nx">prototype</code><code class="p">.</code><code class="nx">slice</code><code class="p">.</code><code class="nx">call</code><code class="p">(</code><code class="nx">arguments</code><code class="p">,</code> <code class="mi">0</code><code class="p">)</code>
<code class="lineno">2</code>   <code class="c1">//=&gt; returns the arguments in an array.</code>
<code class="lineno">3</code>   
<code class="lineno">4</code> <code class="kd">function</code> <code class="nx">butFirst</code> <code class="p">()</code> <code class="p">{</code>
<code class="lineno">5</code>   <code class="k">return</code> <code class="nb">Array</code><code class="p">.</code><code class="nx">prototype</code><code class="p">.</code><code class="nx">slice</code><code class="p">.</code><code class="nx">call</code><code class="p">(</code><code class="nx">arguments</code><code class="p">,</code> <code class="mi">1</code><code class="p">)</code>
<code class="lineno">6</code> <code class="p">}</code>
<code class="lineno">7</code> 
<code class="lineno">8</code> <code class="nx">butFirst</code><code class="p">(</code><code class="s1">'a'</code><code class="p">,</code> <code class="s1">'b'</code><code class="p">,</code> <code class="s1">'c'</code><code class="p">,</code> <code class="s1">'d'</code><code class="p">)</code>
<code class="lineno">9</code>   <code class="c1">//=&gt; </code><code class="cp">[</code> <code class="s1">'b'</code><code class="p">,</code> <code class="s1">'c'</code><code class="p">,</code> <code class="s1">'d'</code> <code class="cp">]</code><code class="c1"></code>
</pre></div>

</div>

<p>For simplicity and as a small speed improvement, <code>slice</code> is usually bound to a local variable:</p>

<div class="code-block">
<div class="highlight"><pre><code class="lineno">1</code> <code class="kd">var</code> <code class="nx">__slice</code> <code class="o">=</code> <code class="nb">Array</code><code class="p">.</code><code class="nx">prototype</code><code class="p">.</code><code class="nx">slice</code><code class="p">;</code>
<code class="lineno">2</code>   
<code class="lineno">3</code> <code class="kd">function</code> <code class="nx">butFirst</code> <code class="p">()</code> <code class="p">{</code>
<code class="lineno">4</code>   <code class="k">return</code> <code class="nx">__slice</code><code class="p">.</code><code class="nx">call</code><code class="p">(</code><code class="nx">arguments</code><code class="p">,</code> <code class="mi">1</code><code class="p">)</code>
<code class="lineno">5</code> <code class="p">}</code>
</pre></div>

</div>

<p>Or even:</p>

<div class="code-block">
<div class="highlight"><pre><code class="lineno">1</code> <code class="kd">var</code> <code class="nx">__slice</code> <code class="o">=</code> <code class="nb">Array</code><code class="p">.</code><code class="nx">prototype</code><code class="p">.</code><code class="nx">slice</code><code class="p">;</code>
<code class="lineno">2</code> 
<code class="lineno">3</code> <code class="kd">function</code> <code class="nx">slice</code> <code class="p">(</code><code class="nx">list</code><code class="p">,</code> <code class="nx">from</code><code class="p">,</code> <code class="nx">to</code><code class="p">)</code> <code class="p">{</code>
<code class="lineno">4</code>   <code class="k">return</code> <code class="nx">__slice</code><code class="p">.</code><code class="nx">call</code><code class="p">(</code><code class="nx">list</code><code class="p">,</code> <code class="nx">from</code><code class="p">,</code> <code class="nx">to</code><code class="p">)</code>
<code class="lineno">5</code> <code class="p">}</code>
<code class="lineno">6</code>   
<code class="lineno">7</code> <code class="kd">function</code> <code class="nx">butFirst</code> <code class="p">()</code> <code class="p">{</code>
<code class="lineno">8</code>   <code class="k">return</code> <code class="nx">slice</code><code class="p">(</code><code class="nx">arguments</code><code class="p">,</code> <code class="mi">1</code><code class="p">)</code>
<code class="lineno">9</code> <code class="p">}</code>
</pre></div>

</div>

<h4 id="leanpub-auto-concat">concat</h4>

<p>Arrays have another useful method, <code>.concat</code>. Concat returns an array created by concatenating the receiver with its argument:</p>

<div class="code-block">
<div class="highlight"><pre><code class="lineno">1</code> <code class="cp">[</code><code class="mi">1</code><code class="p">,</code> <code class="mi">2</code><code class="p">,</code> <code class="mi">3</code><code class="cp">]</code><code class="x">.concat(</code><code class="cp">[</code><code class="mi">2</code><code class="p">,</code> <code class="mi">1</code><code class="cp">]</code><code class="x">)</code>
<code class="lineno">2</code> <code class="x">  //=&gt; </code><code class="cp">[</code><code class="mi">1</code><code class="p">,</code> <code class="mi">2</code><code class="p">,</code> <code class="mi">3</code><code class="p">,</code> <code class="mi">2</code><code class="p">,</code> <code class="mi">1</code><code class="cp">]</code><code class="x"></code>
</pre></div>

</div>

<h4 id="leanpub-auto-function-lengths">function lengths</h4>

<p>Functions have a <code>.length</code> property that counts the number of arguments declared:</p>

<div class="code-block">
<div class="highlight"><pre><code class="lineno">1</code> <code class="kd">function</code> <code class="p">(</code><code class="nx">a</code><code class="p">,</code> <code class="nx">b</code><code class="p">,</code> <code class="nx">c</code><code class="p">)</code> <code class="p">{</code> <code class="k">return</code> <code class="nx">a</code> <code class="o">+</code> <code class="nx">b</code> <code class="o">+</code> <code class="nx">c</code> <code class="p">}.</code><code class="nx">length</code>
<code class="lineno">2</code>   <code class="c1">//=&gt; 3</code>
</pre></div>

</div>

<h2 id="leanpub-auto-recipes-with-basic-functions">
<span class="section-number">3 </span>Recipes with Basic Functions</h2>

<div class="image-with-caption center image-with-caption center">
  <img src="/site_images/javascript-allonge/mirage.jpg" alt="Before combining ingredients, begin with implements so clean, they gleam."><p class="caption">Before combining ingredients, begin with implements so clean, they gleam.</p>
</div>

<p>Having looked at basic pure functions and closures, we’re going to see some practical recipes that focus on the premise of functions that return functions.</p>

<h4 id="leanpub-auto-disclaimer">Disclaimer</h4>

<p>The recipes are written for practicality, and their implementation may introduce JavaScript features that haven’t been discussed in the text to this point, such as methods and/or prototypes. The overall <em>use</em> of each recipe will fit within the spirit of the language discussed so far, even if the implementations may not.</p>

<h3 id="simple-partial">Partial Application</h3>

<p>In <a href="#buildingblocks">Building Blocks</a>, we discussed partial application, but we didn’t write a generalized recipe for it. This is such a common tool that many libraries provide some form of partial application tool. You’ll find examples in <a href="https://github.com/fogus/lemonad">Lemonad</a> from Michael Fogus, <a href="http://osteele.com/sources/javascript/functional/">Functional JavaScript</a> from Oliver Steele and the terse but handy <a href="https://github.com/substack/node-ap">node-ap</a> from James Halliday.</p>

<p>These two recipes are for quickly and simply applying a single argument, either the leftmost or rightmost.<sup id="fnref-inspired"><a href="#fn-inspired" rel="footnote">19</a></sup> If you want to bind more than one argument, or you want to leave a “hole” in the argument list, you will need to either use a <a href="#partial">generalized partial recipe</a>, or you will need to repeatedly apply arguments. It is <a href="#context">context</a>-agnostic.</p>

<div class="code-block">
<div class="highlight"><pre><code class="lineno"> 1</code> <code class="kd">var</code> <code class="nx">__slice</code> <code class="o">=</code> <code class="nb">Array</code><code class="p">.</code><code class="nx">prototype</code><code class="p">.</code><code class="nx">slice</code><code class="p">;</code>
<code class="lineno"> 2</code> 
<code class="lineno"> 3</code> <code class="kd">function</code> <code class="nx">callFirst</code> <code class="p">(</code><code class="nx">fn</code><code class="p">,</code> <code class="nx">larg</code><code class="p">)</code> <code class="p">{</code>
<code class="lineno"> 4</code>   <code class="k">return</code> <code class="kd">function</code> <code class="p">()</code> <code class="p">{</code>
<code class="lineno"> 5</code>     <code class="kd">var</code> <code class="nx">args</code> <code class="o">=</code> <code class="nx">__slice</code><code class="p">.</code><code class="nx">call</code><code class="p">(</code><code class="nx">arguments</code><code class="p">,</code> <code class="mi">0</code><code class="p">);</code>
<code class="lineno"> 6</code>     
<code class="lineno"> 7</code>     <code class="k">return</code> <code class="nx">fn</code><code class="p">.</code><code class="nx">apply</code><code class="p">(</code><code class="k">this</code><code class="p">,</code> <code class="cp">[</code><code class="nx">larg</code><code class="cp">]</code><code class="p">.</code><code class="nx">concat</code><code class="p">(</code><code class="nx">args</code><code class="p">))</code>
<code class="lineno"> 8</code>   <code class="p">}</code>
<code class="lineno"> 9</code> <code class="p">}</code>
<code class="lineno">10</code> 
<code class="lineno">11</code> <code class="kd">function</code> <code class="nx">callLast</code> <code class="p">(</code><code class="nx">fn</code><code class="p">,</code> <code class="nx">rarg</code><code class="p">)</code> <code class="p">{</code>
<code class="lineno">12</code>   <code class="k">return</code> <code class="kd">function</code> <code class="p">()</code> <code class="p">{</code>
<code class="lineno">13</code>     <code class="kd">var</code> <code class="nx">args</code> <code class="o">=</code> <code class="nx">__slice</code><code class="p">.</code><code class="nx">call</code><code class="p">(</code><code class="nx">arguments</code><code class="p">,</code> <code class="mi">0</code><code class="p">);</code>
<code class="lineno">14</code>     
<code class="lineno">15</code>     <code class="k">return</code> <code class="nx">fn</code><code class="p">.</code><code class="nx">apply</code><code class="p">(</code><code class="k">this</code><code class="p">,</code> <code class="nx">args</code><code class="p">.</code><code class="nx">concat</code><code class="p">(</code><code class="cp">[</code><code class="nx">rarg</code><code class="cp">]</code><code class="p">))</code>
<code class="lineno">16</code>   <code class="p">}</code>
<code class="lineno">17</code> <code class="p">}</code>
<code class="lineno">18</code> 
<code class="lineno">19</code> <code class="kd">function</code> <code class="nx">greet</code> <code class="p">(</code><code class="nx">me</code><code class="p">,</code> <code class="nx">you</code><code class="p">)</code> <code class="p">{</code>
<code class="lineno">20</code>   <code class="k">return</code> <code class="s2">"Hello, "</code> <code class="o">+</code> <code class="nx">you</code> <code class="o">+</code> <code class="s2">", my name is "</code> <code class="o">+</code> <code class="nx">me</code>
<code class="lineno">21</code> <code class="p">}</code>
<code class="lineno">22</code> 
<code class="lineno">23</code> <code class="kd">var</code> <code class="nx">heliosSaysHello</code> <code class="o">=</code> <code class="nx">callFirst</code><code class="p">(</code><code class="nx">greet</code><code class="p">,</code> <code class="s1">'Helios'</code><code class="p">);</code>
<code class="lineno">24</code> 
<code class="lineno">25</code> <code class="nx">heliosSaysHello</code><code class="p">(</code><code class="s1">'Eartha'</code><code class="p">)</code>
<code class="lineno">26</code>   <code class="c1">//=&gt; 'Hello, Eartha, my name is Helios'</code>
<code class="lineno">27</code>   
<code class="lineno">28</code> <code class="kd">var</code> <code class="nx">sayHelloToCeline</code> <code class="o">=</code> <code class="nx">callLast</code><code class="p">(</code><code class="nx">greet</code><code class="p">,</code> <code class="s1">'Celine'</code><code class="p">);</code>
<code class="lineno">29</code> 
<code class="lineno">30</code> <code class="nx">sayHelloToCeline</code><code class="p">(</code><code class="s1">'Eartha'</code><code class="p">)</code>
<code class="lineno">31</code>   <code class="c1">//=&gt; 'Hello, Celine, my name is Eartha'</code>
</pre></div>

</div>

<p>As noted above, our partial recipe allows us to create functions that are partial applications of functions that are context aware. We’d need a different recipe if we wish to create partial applications of object methods.</p>

<h3 id="ellipses">Ellipses and improved Partial Application</h3>

<p>The CoffeeScript programming language has a useful feature: If a parameter of a method is written with trailing ellipses, it collects a list of parameters into an array. It can be used in various ways, and the CoffeeScript transpiler does some pattern matching to sort things out, but 80% of the use is to collect a variable number of arguments without using the <code>arguments</code> pseudo-variable, and 19% of the uses are to collect a trailing list of arguments.</p>

<p>Here’s what it looks like collecting a variable number of arguments and trailing arguments:</p>

<div class="code-block">
<div class="highlight"><pre><code class="lineno">1</code> <code class="n">callLeft</code> <code class="o">=</code> <code class="p">(</code><code class="n">fn</code><code class="p">,</code> <code class="n">args</code><code class="p">...)</code> <code class="o">-&gt;</code>
<code class="lineno">2</code>   <code class="p">(</code><code class="n">remainingArgs</code><code class="p">...)</code> <code class="o">-&gt;</code>
<code class="lineno">3</code>     <code class="n">fn</code><code class="p">.</code><code class="n">apply</code><code class="p">(</code><code class="n">this</code><code class="p">,</code> <code class="n">args</code><code class="p">.</code><code class="n">concat</code><code class="p">(</code><code class="n">remainingArgs</code><code class="p">))</code>
</pre></div>

</div>

<p>These are very handy features. Here’s our bogus, made-up attempt to write our own mapper function:</p>

<div class="code-block">
<div class="highlight"><pre><code class="lineno"> 1</code> <code class="n">mapper</code> <code class="o">=</code> <code class="p">(</code><code class="n">fn</code><code class="p">,</code> <code class="n">elements</code><code class="p">...)</code> <code class="o">-&gt;</code>
<code class="lineno"> 2</code>   <code class="n">elements</code><code class="p">.</code><code class="n">map</code><code class="p">(</code><code class="n">fn</code><code class="p">)</code>
<code class="lineno"> 3</code> 
<code class="lineno"> 4</code> <code class="n">mapper</code> <code class="p">((</code><code class="n">x</code><code class="p">)</code> <code class="o">-&gt;</code> <code class="n">x</code><code class="o">*</code><code class="n">x</code><code class="p">),</code> <code class="mi">1</code><code class="p">,</code> <code class="mi">2</code><code class="p">,</code> <code class="mi">3</code>
<code class="lineno"> 5</code>   <code class="err">#</code><code class="o">=&gt;</code> <code class="p">[</code><code class="mi">1</code><code class="p">,</code> <code class="mi">4</code><code class="p">,</code> <code class="mi">9</code><code class="p">]</code>
<code class="lineno"> 6</code> 
<code class="lineno"> 7</code> <code class="n">squarer</code> <code class="o">=</code> <code class="n">callLeft</code> <code class="n">mapper</code><code class="p">,</code> <code class="p">(</code><code class="n">x</code><code class="p">)</code> <code class="o">-&gt;</code> <code class="n">x</code><code class="o">*</code><code class="n">x</code>
<code class="lineno"> 8</code> 
<code class="lineno"> 9</code> <code class="n">squarer</code> <code class="mi">1</code><code class="p">,</code> <code class="mi">2</code><code class="p">,</code> <code class="mi">3</code>
<code class="lineno">10</code>   <code class="err">#</code><code class="o">=&gt;</code> <code class="p">[</code><code class="mi">1</code><code class="p">,</code> <code class="mi">4</code><code class="p">,</code> <code class="mi">9</code><code class="p">]</code>
</pre></div>

</div>

<p>JavaScript doesn’t support <a href="http://en.wikipedia.org/wiki/Ellipsis">ellipses</a>, those trailing periods CoffeeScript uses to collect arguments into an array. JavaScript is a <em>functional</em> language, so here is the recipe for a function that collects trailing arguments into an array for us:</p>

<div class="code-block">
<div class="highlight"><pre><code class="lineno"> 1</code> <code class="kd">var</code> <code class="nx">__slice</code> <code class="o">=</code> <code class="nb">Array</code><code class="p">.</code><code class="nx">prototype</code><code class="p">.</code><code class="nx">slice</code><code class="p">;</code>
<code class="lineno"> 2</code> 
<code class="lineno"> 3</code> <code class="kd">function</code> <code class="nx">variadic</code> <code class="p">(</code><code class="nx">fn</code><code class="p">)</code> <code class="p">{</code>
<code class="lineno"> 4</code>   <code class="kd">var</code> <code class="nx">fnLength</code> <code class="o">=</code> <code class="nx">fn</code><code class="p">.</code><code class="nx">length</code><code class="p">;</code>
<code class="lineno"> 5</code> 
<code class="lineno"> 6</code>   <code class="k">if</code> <code class="p">(</code><code class="nx">fnLength</code> <code class="o">&lt;</code> <code class="mi">1</code><code class="p">)</code> <code class="p">{</code>
<code class="lineno"> 7</code>     <code class="k">return</code> <code class="nx">fn</code><code class="p">;</code>
<code class="lineno"> 8</code>   <code class="p">}</code>
<code class="lineno"> 9</code>   <code class="k">else</code> <code class="k">if</code> <code class="p">(</code><code class="nx">fnLength</code> <code class="o">===</code> <code class="mi">1</code><code class="p">)</code>  <code class="p">{</code>
<code class="lineno">10</code>     <code class="k">return</code> <code class="kd">function</code> <code class="p">()</code> <code class="p">{</code>
<code class="lineno">11</code>       <code class="k">return</code> <code class="nx">fn</code><code class="p">.</code><code class="nx">call</code><code class="p">(</code>
<code class="lineno">12</code>         <code class="k">this</code><code class="p">,</code> <code class="nx">__slice</code><code class="p">.</code><code class="nx">call</code><code class="p">(</code><code class="nx">arguments</code><code class="p">,</code> <code class="mi">0</code><code class="p">))</code>
<code class="lineno">13</code>     <code class="p">}</code>
<code class="lineno">14</code>   <code class="p">}</code>
<code class="lineno">15</code>   <code class="k">else</code> <code class="p">{</code>
<code class="lineno">16</code>     <code class="k">return</code> <code class="kd">function</code> <code class="p">()</code> <code class="p">{</code>
<code class="lineno">17</code>       <code class="kd">var</code> <code class="nx">numberOfArgs</code> <code class="o">=</code> <code class="nx">arguments</code><code class="p">.</code><code class="nx">length</code><code class="p">,</code>
<code class="lineno">18</code>           <code class="nx">namedArgs</code> <code class="o">=</code> <code class="nx">__slice</code><code class="p">.</code><code class="nx">call</code><code class="p">(</code>
<code class="lineno">19</code>             <code class="nx">arguments</code><code class="p">,</code> <code class="mi">0</code><code class="p">,</code> <code class="nx">fnLength</code> <code class="o">-</code> <code class="mi">1</code><code class="p">),</code>
<code class="lineno">20</code>           <code class="nx">numberOfMissingNamedArgs</code> <code class="o">=</code> <code class="nb">Math</code><code class="p">.</code><code class="nx">max</code><code class="p">(</code>
<code class="lineno">21</code>             <code class="nx">fnLength</code> <code class="o">-</code> <code class="nx">numberOfArgs</code> <code class="o">-</code> <code class="mi">1</code><code class="p">,</code> <code class="mi">0</code><code class="p">),</code>
<code class="lineno">22</code>           <code class="nx">argPadding</code> <code class="o">=</code> <code class="k">new</code> <code class="nb">Array</code><code class="p">(</code><code class="nx">numberOfMissingNamedArgs</code><code class="p">),</code>
<code class="lineno">23</code>           <code class="nx">variadicArgs</code> <code class="o">=</code> <code class="nx">__slice</code><code class="p">.</code><code class="nx">call</code><code class="p">(</code>
<code class="lineno">24</code>             <code class="nx">arguments</code><code class="p">,</code> <code class="nx">fn</code><code class="p">.</code><code class="nx">length</code> <code class="o">-</code> <code class="mi">1</code><code class="p">);</code>
<code class="lineno">25</code> 
<code class="lineno">26</code>       <code class="k">return</code> <code class="nx">fn</code><code class="p">.</code><code class="nx">apply</code><code class="p">(</code>
<code class="lineno">27</code>         <code class="k">this</code><code class="p">,</code> <code class="nx">namedArgs</code>
<code class="lineno">28</code>               <code class="p">.</code><code class="nx">concat</code><code class="p">(</code><code class="nx">argPadding</code><code class="p">)</code>
<code class="lineno">29</code>               <code class="p">.</code><code class="nx">concat</code><code class="p">(</code><code class="cp">[</code><code class="nx">variadicArgs</code><code class="cp">]</code><code class="p">));</code>
<code class="lineno">30</code>     <code class="p">}</code>
<code class="lineno">31</code>   <code class="p">}</code>
<code class="lineno">32</code> <code class="p">};</code>
<code class="lineno">33</code> 
<code class="lineno">34</code> <code class="kd">function</code> <code class="nx">unary</code> <code class="p">(</code><code class="nx">first</code><code class="p">)</code> <code class="p">{</code>
<code class="lineno">35</code>   <code class="k">return</code> <code class="nx">first</code>
<code class="lineno">36</code> <code class="p">}</code>
<code class="lineno">37</code> 
<code class="lineno">38</code> <code class="nx">unary</code><code class="p">(</code><code class="s1">'why'</code><code class="p">,</code> <code class="s1">'hello'</code><code class="p">,</code> <code class="s1">'there'</code><code class="p">)</code>
<code class="lineno">39</code>   <code class="c1">//=&gt; 'why'</code>
<code class="lineno">40</code>   
<code class="lineno">41</code> <code class="nx">variadic</code><code class="p">(</code><code class="nx">unary</code><code class="p">)(</code><code class="s1">'why'</code><code class="p">,</code> <code class="s1">'hello'</code><code class="p">,</code> <code class="s1">'there'</code><code class="p">)</code>
<code class="lineno">42</code>   <code class="c1">//=&gt; </code><code class="cp">[</code> <code class="s1">'why'</code><code class="p">,</code> <code class="s1">'hello'</code><code class="p">,</code> <code class="s1">'there'</code> <code class="cp">]</code><code class="c1"></code>
<code class="lineno">43</code>   
<code class="lineno">44</code> <code class="kd">function</code> <code class="nx">binary</code> <code class="p">(</code><code class="nx">first</code><code class="p">,</code> <code class="nx">rest</code><code class="p">)</code> <code class="p">{</code>
<code class="lineno">45</code>   <code class="k">return</code> <code class="cp">[</code><code class="nx">first</code><code class="p">,</code> <code class="nx">rest</code><code class="cp">]</code>
<code class="lineno">46</code> <code class="p">}</code>
<code class="lineno">47</code> 
<code class="lineno">48</code> <code class="nx">binary</code><code class="p">(</code><code class="s1">'why'</code><code class="p">,</code> <code class="s1">'hello'</code><code class="p">,</code> <code class="s1">'there'</code><code class="p">)</code>
<code class="lineno">49</code>   <code class="c1">//=&gt; </code><code class="cp">[</code> <code class="s1">'why'</code><code class="p">,</code> <code class="s1">'hello'</code> <code class="cp">]</code><code class="c1"></code>
<code class="lineno">50</code> 
<code class="lineno">51</code> <code class="nx">variadic</code><code class="p">(</code><code class="nx">binary</code><code class="p">)(</code><code class="s1">'why'</code><code class="p">,</code> <code class="s1">'hello'</code><code class="p">,</code> <code class="s1">'there'</code><code class="p">)</code>
<code class="lineno">52</code>   <code class="c1">//=&gt; </code><code class="cp">[</code> <code class="s1">'why'</code><code class="p">,</code> <code class="err">[</code> <code class="s1">'hello'</code><code class="p">,</code> <code class="s1">'there'</code> <code class="cp">]</code><code class="c1"> ]</code>
</pre></div>

</div>

<p>Here’s what we write to create our partial application functions gently:</p>

<div class="code-block">
<div class="highlight"><pre><code class="lineno"> 1</code> <code class="kd">var</code> <code class="nx">callLeft</code> <code class="o">=</code> <code class="nx">variadic</code><code class="p">(</code> <code class="kd">function</code> <code class="p">(</code><code class="nx">fn</code><code class="p">,</code> <code class="nx">args</code><code class="p">)</code> <code class="p">{</code>
<code class="lineno"> 2</code>   <code class="k">return</code> <code class="nx">variadic</code><code class="p">(</code> <code class="kd">function</code> <code class="p">(</code><code class="nx">remainingArgs</code><code class="p">)</code> <code class="p">{</code>
<code class="lineno"> 3</code>     <code class="k">return</code> <code class="nx">fn</code><code class="p">.</code><code class="nx">apply</code><code class="p">(</code><code class="k">this</code><code class="p">,</code> <code class="nx">args</code><code class="p">.</code><code class="nx">concat</code><code class="p">(</code><code class="nx">remainingArgs</code><code class="p">))</code>
<code class="lineno"> 4</code>   <code class="p">})</code>
<code class="lineno"> 5</code> <code class="p">})</code>
<code class="lineno"> 6</code> 
<code class="lineno"> 7</code> <code class="c1">// Let's try it!</code>
<code class="lineno"> 8</code> 
<code class="lineno"> 9</code> <code class="kd">var</code> <code class="nx">mapper</code> <code class="o">=</code> <code class="nx">variadic</code><code class="p">(</code> <code class="kd">function</code> <code class="p">(</code><code class="nx">fn</code><code class="p">,</code> <code class="nx">elements</code><code class="p">)</code> <code class="p">{</code>
<code class="lineno">10</code>   <code class="k">return</code> <code class="nx">elements</code><code class="p">.</code><code class="nx">map</code><code class="p">(</code><code class="nx">fn</code><code class="p">)</code>
<code class="lineno">11</code> <code class="p">});</code>
<code class="lineno">12</code> 
<code class="lineno">13</code> <code class="nx">mapper</code><code class="p">(</code><code class="kd">function</code> <code class="p">(</code><code class="nx">x</code><code class="p">)</code> <code class="p">{</code> <code class="k">return</code> <code class="nx">x</code> <code class="o">*</code> <code class="nx">x</code> <code class="p">},</code> <code class="mi">1</code><code class="p">,</code> <code class="mi">2</code><code class="p">,</code> <code class="mi">3</code><code class="p">)</code>
<code class="lineno">14</code>   <code class="c1">//=&gt; </code><code class="cp">[</code><code class="mi">1</code><code class="p">,</code> <code class="mi">4</code><code class="p">,</code> <code class="mi">9</code><code class="cp">]</code><code class="c1"></code>
<code class="lineno">15</code> 
<code class="lineno">16</code> <code class="kd">var</code> <code class="nx">squarer</code> <code class="o">=</code> <code class="nx">callLeft</code><code class="p">(</code><code class="nx">mapper</code><code class="p">,</code> <code class="kd">function</code> <code class="p">(</code><code class="nx">x</code><code class="p">)</code> <code class="p">{</code> <code class="k">return</code> <code class="nx">x</code> <code class="o">*</code> <code class="nx">x</code> <code class="p">});</code>
<code class="lineno">17</code> 
<code class="lineno">18</code> <code class="nx">squarer</code><code class="p">(</code><code class="mi">1</code><code class="p">,</code> <code class="mi">2</code><code class="p">,</code> <code class="mi">3</code><code class="p">)</code>
<code class="lineno">19</code>   <code class="c1">//=&gt; </code><code class="cp">[</code><code class="mi">1</code><code class="p">,</code> <code class="mi">4</code><code class="p">,</code> <code class="mi">9</code><code class="cp">]</code><code class="c1"></code>
</pre></div>

</div>

<p>While we’re at it, here’s our implementation of <code>callRight</code> using the same technique:</p>

<div class="code-block">
<div class="highlight"><pre><code class="lineno">1</code> <code class="kd">var</code> <code class="nx">callRight</code> <code class="o">=</code> <code class="nx">variadic</code><code class="p">(</code> <code class="kd">function</code> <code class="p">(</code><code class="nx">fn</code><code class="p">,</code> <code class="nx">args</code><code class="p">)</code> <code class="p">{</code>
<code class="lineno">2</code>   <code class="k">return</code> <code class="nx">variadic</code><code class="p">(</code> <code class="kd">function</code> <code class="p">(</code><code class="nx">precedingArgs</code><code class="p">)</code> <code class="p">{</code>
<code class="lineno">3</code>     <code class="k">return</code> <code class="nx">fn</code><code class="p">.</code><code class="nx">apply</code><code class="p">(</code><code class="k">this</code><code class="p">,</code> <code class="nx">precedingArgs</code><code class="p">.</code><code class="nx">concat</code><code class="p">(</code><code class="nx">args</code><code class="p">))</code>
<code class="lineno">4</code>   <code class="p">})</code>
<code class="lineno">5</code> <code class="p">})</code>
</pre></div>

</div>

<p>Fine print: Of course, <code>variadic</code> introduces an extra function call and may not be the best choice in a highly performance-critical piece of code. Then again, using <code>arguments</code> is considerably slower than directly accessing argument bindings, so if the performance is that critical, maybe you shouldn’t be using a variable number of arguments in that section.</p>

<h3 id="leanpub-auto-unary">Unary</h3>

<p>In <a href="#ellipses">Ellipses</a>, we saw a function decorator that takes a function with a fixed number of arguments and turns it into a <em>variadic</em> function, a function taking any number of arguments. “Unary” is a another function decorator, and it also modifies the number of arguments a function takes: Unary takes any function and turns it into a function taking exactly one argument.</p>

<p>The most common use case is to fix a common problem. JavaScript has a <code>.map</code> method for arrays, and many libraries offer a <code>map</code> function with the same semantics. Here it is in action:</p>

<div class="code-block">
<div class="highlight"><pre><code class="lineno">1</code> <code class="cp">[</code><code class="s1">'1'</code><code class="p">,</code> <code class="s1">'2'</code><code class="p">,</code> <code class="s1">'3'</code><code class="cp">]</code><code class="x">.map(parseFloat)</code>
<code class="lineno">2</code> <code class="x">  //=&gt; </code><code class="cp">[</code><code class="mi">1</code><code class="p">,</code> <code class="mi">2</code><code class="p">,</code> <code class="mi">3</code><code class="cp">]</code><code class="x"></code>
</pre></div>

</div>

<p>In that example, it looks exactly like the mapping function you’ll find in most languages: You pass it a function, and it calls the function with one argument, the element of the array. However, that’s not the whole story. JavaScript’s <code>map</code> actually calls each function with <em>three</em> arguments: The element, the index of the element in the array, and the array itself.</p>

<p>Let’s try it:</p>

<div class="code-block">
<div class="highlight"><pre><code class="lineno">1</code> <code class="cp">[</code><code class="mi">1</code><code class="p">,</code> <code class="mi">2</code><code class="p">,</code> <code class="mi">3</code><code class="cp">]</code><code class="p">.</code><code class="nx">map</code><code class="p">(</code><code class="kd">function</code> <code class="p">(</code><code class="nx">element</code><code class="p">,</code> <code class="nx">index</code><code class="p">,</code> <code class="nx">arr</code><code class="p">)</code> <code class="p">{</code>
<code class="lineno">2</code>   <code class="nx">console</code><code class="p">.</code><code class="nx">log</code><code class="p">({</code><code class="nx">element</code><code class="o">:</code> <code class="nx">element</code><code class="p">,</code> <code class="nx">index</code><code class="o">:</code> <code class="nx">index</code><code class="p">,</code> <code class="nx">arr</code><code class="o">:</code> <code class="nx">arr</code><code class="p">})</code>
<code class="lineno">3</code> <code class="p">})</code>
<code class="lineno">4</code>   <code class="c1">//=&gt; { element: 1, index: 0, arr: </code><code class="cp">[</code> <code class="mi">1</code><code class="p">,</code> <code class="mi">2</code><code class="p">,</code> <code class="mi">3</code> <code class="cp">]</code><code class="c1"> }</code>
<code class="lineno">5</code>   <code class="c1">//   { element: 2, index: 1, arr: </code><code class="cp">[</code> <code class="mi">1</code><code class="p">,</code> <code class="mi">2</code><code class="p">,</code> <code class="mi">3</code> <code class="cp">]</code><code class="c1"> }</code>
<code class="lineno">6</code>   <code class="c1">//   { element: 3, index: 2, arr: </code><code class="cp">[</code> <code class="mi">1</code><code class="p">,</code> <code class="mi">2</code><code class="p">,</code> <code class="mi">3</code> <code class="cp">]</code><code class="c1"> }</code>
</pre></div>

</div>

<p>If you pass in a function taking only one argument, it simply ignores the additional arguments. But some functions have optional second or even third arguments. For example:</p>

<div class="code-block">
<div class="highlight"><pre><code class="lineno">1</code> <code class="cp">[</code><code class="s1">'1'</code><code class="p">,</code> <code class="s1">'2'</code><code class="p">,</code> <code class="s1">'3'</code><code class="cp">]</code><code class="x">.map(parseInt)</code>
<code class="lineno">2</code> <code class="x">  //=&gt; </code><code class="cp">[</code><code class="mi">1</code><code class="p">,</code> <code class="m">NaN</code><code class="p">,</code> <code class="m">NaN</code><code class="cp">]</code><code class="x"></code>
</pre></div>

</div>

<p>This doesn’t work because <code>parseInt</code> is defined as <code>parseInt(string[, radix])</code>. It takes an optional radix argument. And when you call <code>parseInt</code> with <code>map</code>, the index is interpreted as a radix. Not good! What we want is to convert <code>parseInt</code> into a function taking only one argument.</p>

<p>We could write <code>['1', '2', '3'].map(function (s) { return parseInt(s); })</code>, or we could come up with a decorator to do the job for us:</p>

<div class="code-block">
<div class="highlight"><pre><code class="lineno">1</code> <code class="kd">function</code> <code class="nx">unary</code> <code class="p">(</code><code class="nx">fn</code><code class="p">)</code> <code class="p">{</code>
<code class="lineno">2</code>   <code class="k">if</code> <code class="p">(</code><code class="nx">fn</code><code class="p">.</code><code class="nx">length</code> <code class="o">==</code> <code class="mi">1</code><code class="p">)</code> <code class="p">{</code>
<code class="lineno">3</code>     <code class="k">return</code> <code class="nx">fn</code>
<code class="lineno">4</code>   <code class="p">}</code>
<code class="lineno">5</code>   <code class="k">else</code> <code class="k">return</code> <code class="kd">function</code> <code class="p">(</code><code class="nx">something</code><code class="p">)</code> <code class="p">{</code>
<code class="lineno">6</code>     <code class="k">return</code> <code class="nx">fn</code><code class="p">.</code><code class="nx">call</code><code class="p">(</code><code class="k">this</code><code class="p">,</code> <code class="nx">something</code><code class="p">)</code>
<code class="lineno">7</code>   <code class="p">}</code>
<code class="lineno">8</code> <code class="p">}</code>
</pre></div>

</div>

<p>And now we can write:</p>

<div class="code-block">
<div class="highlight"><pre><code class="lineno">1</code> <code class="cp">[</code><code class="s1">'1'</code><code class="p">,</code> <code class="s1">'2'</code><code class="p">,</code> <code class="s1">'3'</code><code class="cp">]</code><code class="x">.map(unary(parseInt))</code>
<code class="lineno">2</code> <code class="x">  //=&gt; </code><code class="cp">[</code><code class="mi">1</code><code class="p">,</code> <code class="mi">2</code><code class="p">,</code> <code class="mi">3</code><code class="cp">]</code><code class="x"></code>
</pre></div>

</div>

<p>Presto!</p>

<h3 id="tap">Tap</h3>

<p>One of the most basic combinators is the “K Combinator,” nicknamed the “kestrel:”</p>

<div class="code-block">
<div class="highlight"><pre><code class="lineno">1</code> <code class="kd">function</code> <code class="nx">K</code> <code class="p">(</code><code class="nx">x</code><code class="p">)</code> <code class="p">{</code>
<code class="lineno">2</code>   <code class="k">return</code> <code class="kd">function</code> <code class="p">(</code><code class="nx">y</code><code class="p">)</code> <code class="p">{</code>
<code class="lineno">3</code>     <code class="k">return</code> <code class="nx">x</code>
<code class="lineno">4</code>   <code class="p">}</code>
<code class="lineno">5</code> <code class="p">};</code>
</pre></div>

</div>

<p>It has some surprising applications. One is when you want to do something with a value for side-effects, but keep the value around. Behold:</p>

<div class="code-block">
<div class="highlight"><pre><code class="lineno">1</code> <code class="kd">function</code> <code class="nx">tap</code> <code class="p">(</code><code class="nx">value</code><code class="p">)</code> <code class="p">{</code>
<code class="lineno">2</code>   <code class="k">return</code> <code class="kd">function</code> <code class="p">(</code><code class="nx">fn</code><code class="p">)</code> <code class="p">{</code>
<code class="lineno">3</code>     <code class="k">if</code> <code class="p">(</code><code class="k">typeof</code><code class="p">(</code><code class="nx">fn</code><code class="p">)</code> <code class="o">===</code> <code class="s1">'function'</code><code class="p">)</code> <code class="p">{</code>
<code class="lineno">4</code>       <code class="nx">fn</code><code class="p">(</code><code class="nx">value</code><code class="p">)</code>
<code class="lineno">5</code>     <code class="p">}</code>
<code class="lineno">6</code>     <code class="k">return</code> <code class="nx">value</code>
<code class="lineno">7</code>   <code class="p">}</code>
<code class="lineno">8</code> <code class="p">}</code>
</pre></div>

</div>

<p><code>tap</code> is a traditional name borrowed from various Unix shell commands. It takes a value and returns a function that always returns the value, but if you pass it a function, it executes the function for side-effects. Let’s see it in action as a poor-man’s debugger:</p>

<div class="code-block">
<div class="highlight"><pre><code class="lineno">1</code> <code class="kd">var</code> <code class="nx">drink</code> <code class="o">=</code> <code class="nx">tap</code><code class="p">(</code><code class="s1">'espresso'</code><code class="p">)(</code><code class="kd">function</code> <code class="p">(</code><code class="nx">it</code><code class="p">)</code> <code class="p">{</code>
<code class="lineno">2</code>   <code class="nx">console</code><code class="p">.</code><code class="nx">log</code><code class="p">(</code><code class="s2">"Our drink is"</code><code class="p">,</code> <code class="nx">it</code><code class="p">)</code> 
<code class="lineno">3</code> <code class="p">});</code>
<code class="lineno">4</code> 
<code class="lineno">5</code> <code class="c1">// outputs "Our drink is 'espresso'" to the console</code>
</pre></div>

</div>

<p>It’s easy to turn off:</p>

<div class="code-block">
<div class="highlight"><pre><code class="lineno">1</code> <code class="n">var</code> <code class="n">drink</code> <code class="o">=</code> <code class="n">tap</code><code class="p">(</code><code class="err">'</code><code class="n">espresso</code><code class="err">'</code><code class="p">)();</code>
<code class="lineno">2</code> 
<code class="lineno">3</code> <code class="c1">// doesn't output anything to the console</code>
</pre></div>

</div>

<p>Libraries like <a href="http://underscorejs.org">Underscore</a> use a version of <code>tap</code> that is “uncurried:”</p>

<div class="code-block">
<div class="highlight"><pre><code class="lineno">1</code> <code class="kd">var</code> <code class="nx">drink</code> <code class="o">=</code> <code class="nx">_</code><code class="p">.</code><code class="nx">tap</code><code class="p">(</code><code class="s1">'espresso'</code><code class="p">,</code> <code class="kd">function</code> <code class="p">()</code> <code class="p">{</code> 
<code class="lineno">2</code>   <code class="nx">console</code><code class="p">.</code><code class="nx">log</code><code class="p">(</code><code class="s2">"Our drink is"</code><code class="p">,</code> <code class="k">this</code><code class="p">)</code> 
<code class="lineno">3</code> <code class="p">});</code>
</pre></div>

</div>

<p>Let’s enhance our recipe so it works both ways:</p>

<div class="code-block">
<div class="highlight"><pre><code class="lineno"> 1</code> <code class="kd">function</code> <code class="nx">tap</code> <code class="p">(</code><code class="nx">value</code><code class="p">,</code> <code class="nx">fn</code><code class="p">)</code> <code class="p">{</code>
<code class="lineno"> 2</code>   <code class="k">if</code> <code class="p">(</code><code class="nx">fn</code> <code class="o">===</code> <code class="k">void</code> <code class="mi">0</code><code class="p">)</code> <code class="p">{</code>
<code class="lineno"> 3</code>     <code class="k">return</code> <code class="nx">curried</code>
<code class="lineno"> 4</code>   <code class="p">}</code>
<code class="lineno"> 5</code>   <code class="k">else</code> <code class="k">return</code> <code class="nx">curried</code><code class="p">(</code><code class="nx">fn</code><code class="p">);</code>
<code class="lineno"> 6</code>   
<code class="lineno"> 7</code>   <code class="kd">function</code> <code class="nx">curried</code> <code class="p">(</code><code class="nx">fn</code><code class="p">)</code> <code class="p">{</code>
<code class="lineno"> 8</code>     <code class="k">if</code> <code class="p">(</code><code class="k">typeof</code><code class="p">(</code><code class="nx">fn</code><code class="p">)</code> <code class="o">===</code> <code class="s1">'function'</code><code class="p">)</code> <code class="p">{</code>
<code class="lineno"> 9</code>       <code class="nx">fn</code><code class="p">(</code><code class="nx">value</code><code class="p">)</code>
<code class="lineno">10</code>     <code class="p">}</code>
<code class="lineno">11</code>     <code class="k">return</code> <code class="nx">value</code>
<code class="lineno">12</code>   <code class="p">}</code>
<code class="lineno">13</code> <code class="p">}</code>
</pre></div>

</div>

<p>Now you can write:</p>

<div class="code-block">
<div class="highlight"><pre><code class="lineno">1</code> <code class="kd">var</code> <code class="nx">drink</code> <code class="o">=</code> <code class="nx">tap</code><code class="p">(</code><code class="s1">'espresso'</code><code class="p">)(</code><code class="kd">function</code> <code class="p">(</code><code class="nx">it</code><code class="p">)</code> <code class="p">{</code> 
<code class="lineno">2</code>   <code class="nx">console</code><code class="p">.</code><code class="nx">log</code><code class="p">(</code><code class="s2">"Our drink is"</code><code class="p">,</code> <code class="nx">it</code><code class="p">)</code> 
<code class="lineno">3</code> <code class="p">});</code>
</pre></div>

</div>

<p>Or:</p>

<div class="code-block">
<div class="highlight"><pre><code class="lineno">1</code> <code class="kd">var</code> <code class="nx">drink</code> <code class="o">=</code> <code class="nx">tap</code><code class="p">(</code><code class="s1">'espresso'</code><code class="p">,</code> <code class="kd">function</code> <code class="p">(</code><code class="nx">it</code><code class="p">)</code> <code class="p">{</code> 
<code class="lineno">2</code>   <code class="nx">console</code><code class="p">.</code><code class="nx">log</code><code class="p">(</code><code class="s2">"Our drink is"</code><code class="p">,</code> <code class="nx">it</code><code class="p">)</code> 
<code class="lineno">3</code> <code class="p">});</code>
</pre></div>

</div>

<p>And if you wish it to do nothing at all, You can write either:</p>

<div class="code-block">
<div class="highlight"><pre><code class="lineno">1</code> <code class="n">var</code> <code class="n">drink</code> <code class="o">=</code> <code class="n">tap</code><code class="p">(</code><code class="err">'</code><code class="n">espresso</code><code class="err">'</code><code class="p">)();</code>
</pre></div>

</div>

<p>Or:</p>

<div class="code-block">
<div class="highlight"><pre><code class="lineno">1</code> <code class="n">var</code> <code class="n">drink</code> <code class="o">=</code> <code class="n">tap</code><code class="p">(</code><code class="err">'</code><code class="n">espresso</code><code class="err">'</code><code class="p">,</code> <code class="n">null</code><code class="p">);</code>
</pre></div>

</div>

<p><code>tap</code> can do more than just act as a debugging aid. It’s also useful for working with <a href="#tap-methods">object and instance methods</a>.</p>

<h3 id="maybe">Maybe</h3>

<p>A common problem in programming is checking for <code>null</code> or <code>undefined</code> (hereafter called “nothing,” while all other values including <code>0</code>, <code>[]</code> and <code>false</code> will be called “something”). Languages like JavaScript do not strongly enforce the notion that a particular variable or particular property be something, so programs are often written to account for values that may be nothing.</p>

<p>This recipe concerns a pattern that is very common: A function <code>fn</code> takes a value as a parameter, and its behaviour by design is to do nothing if the parameter is nothing:</p>

<div class="code-block">
<div class="highlight"><pre><code class="lineno">1</code> <code class="kd">function</code> <code class="nx">isSomething</code> <code class="p">(</code><code class="nx">value</code><code class="p">)</code> <code class="p">{</code>
<code class="lineno">2</code>   <code class="k">return</code> <code class="nx">value</code> <code class="o">!==</code> <code class="kc">null</code> <code class="o">&amp;&amp;</code> <code class="nx">value</code> <code class="o">!==</code> <code class="k">void</code> <code class="mi">0</code><code class="p">;</code>
<code class="lineno">3</code> <code class="p">}</code>
<code class="lineno">4</code> 
<code class="lineno">5</code> <code class="kd">function</code> <code class="nx">checksForSomething</code> <code class="p">(</code><code class="nx">value</code><code class="p">)</code> <code class="p">{</code>
<code class="lineno">6</code>   <code class="k">if</code> <code class="p">(</code><code class="nx">isSomething</code><code class="p">(</code><code class="nx">value</code><code class="p">))</code> <code class="p">{</code>
<code class="lineno">7</code>     <code class="c1">// function's true logic</code>
<code class="lineno">8</code>   <code class="p">}</code>
<code class="lineno">9</code> <code class="p">}</code>
</pre></div>

</div>

<p>Alternately, the function may be intended to work with any value, but the code calling the function wishes to emulate the behaviour of doing nothing by design when given nothing:</p>

<div class="code-block">
<div class="highlight"><pre><code class="lineno">1</code> <code class="n">var</code> <code class="n">something</code> <code class="o">=</code> <code class="n">isSomething</code><code class="p">(</code><code class="n">value</code><code class="p">)</code> <code class="o">?</code> 
<code class="lineno">2</code>   <code class="n">doesntCheckForSomething</code><code class="p">(</code><code class="n">value</code><code class="p">)</code> <code class="o">:</code> <code class="n">value</code><code class="p">;</code>
</pre></div>

</div>

<p>Naturally, there’s a recipe for that, borrowed from Haskell’s <a href="https://en.wikipedia.org/wiki/Monad_(functional_programming)#The_Maybe_monad">maybe monad</a>, Ruby’s <a href="https://github.com/raganwald/andand">andand</a>, and CoffeeScript’s existential method invocation:</p>

<div class="code-block">
<div class="highlight"><pre><code class="lineno"> 1</code> <code class="kd">function</code> <code class="nx">maybe</code> <code class="p">(</code><code class="nx">fn</code><code class="p">)</code> <code class="p">{</code>
<code class="lineno"> 2</code>   <code class="k">return</code> <code class="kd">function</code> <code class="p">()</code> <code class="p">{</code>
<code class="lineno"> 3</code>     <code class="kd">var</code> <code class="nx">i</code><code class="p">;</code>
<code class="lineno"> 4</code>     
<code class="lineno"> 5</code>     <code class="k">if</code> <code class="p">(</code><code class="nx">arguments</code><code class="p">.</code><code class="nx">length</code> <code class="o">===</code> <code class="mi">0</code><code class="p">)</code> <code class="p">{</code>
<code class="lineno"> 6</code>       <code class="k">return</code>
<code class="lineno"> 7</code>     <code class="p">}</code>
<code class="lineno"> 8</code>     <code class="k">else</code> <code class="p">{</code>
<code class="lineno"> 9</code>       <code class="k">for</code> <code class="p">(</code><code class="nx">i</code> <code class="o">=</code> <code class="mi">0</code><code class="p">;</code> <code class="nx">i</code> <code class="o">&lt;</code> <code class="nx">arguments</code><code class="p">.</code><code class="nx">length</code><code class="p">;</code> <code class="o">++</code><code class="nx">i</code><code class="p">)</code> <code class="p">{</code>
<code class="lineno">10</code>         <code class="k">if</code> <code class="p">(</code><code class="nx">arguments</code><code class="cp">[</code><code class="nx">i</code><code class="cp">]</code> <code class="o">==</code> <code class="kc">null</code><code class="p">)</code> <code class="k">return</code>
<code class="lineno">11</code>       <code class="p">}</code>
<code class="lineno">12</code>       <code class="k">return</code> <code class="nx">fn</code><code class="p">.</code><code class="nx">apply</code><code class="p">(</code><code class="k">this</code><code class="p">,</code> <code class="nx">arguments</code><code class="p">)</code>
<code class="lineno">13</code>     <code class="p">}</code>
<code class="lineno">14</code>   <code class="p">}</code>
<code class="lineno">15</code> <code class="p">}</code>
</pre></div>

</div>

<p><code>maybe</code> reduces the logic of checking for nothing to a function call, either:</p>

<div class="code-block">
<div class="highlight"><pre><code class="lineno">1</code> <code class="kd">var</code> <code class="nx">checksForSomething</code> <code class="o">=</code> <code class="nx">maybe</code><code class="p">(</code><code class="kd">function</code> <code class="p">(</code><code class="nx">value</code><code class="p">)</code> <code class="p">{</code>
<code class="lineno">2</code>   <code class="c1">// function's true logic</code>
<code class="lineno">3</code> <code class="p">});</code>
</pre></div>

</div>

<p>Or:</p>

<div class="code-block">
<div class="highlight"><pre><code class="lineno">1</code> <code class="n">var</code> <code class="n">something</code> <code class="o">=</code> <code class="n">maybe</code><code class="p">(</code><code class="n">doesntCheckForSomething</code><code class="p">)(</code><code class="n">value</code><code class="p">);</code>
</pre></div>

</div>

<p>As a bonus, <code>maybe</code> plays very nicely with instance methods, we’ll discuss those <a href="#methods">later</a>:</p>

<div class="code-block">
<div class="highlight"><pre><code class="lineno">1</code> <code class="kd">function</code> <code class="nx">Model</code> <code class="p">()</code> <code class="p">{};</code>
<code class="lineno">2</code> 
<code class="lineno">3</code> <code class="nx">Model</code><code class="p">.</code><code class="nx">prototype</code><code class="p">.</code><code class="nx">setSomething</code> <code class="o">=</code> <code class="nx">maybe</code><code class="p">(</code><code class="kd">function</code> <code class="p">(</code><code class="nx">value</code><code class="p">)</code> <code class="p">{</code>
<code class="lineno">4</code>   <code class="k">this</code><code class="p">.</code><code class="nx">something</code> <code class="o">=</code> <code class="nx">value</code><code class="p">;</code>
<code class="lineno">5</code> <code class="p">});</code>
</pre></div>

</div>

<p>If some code ever tries to call <code>model.setSomething</code> with nothing, the operation will be skipped.</p>

<h2 id="references">
<span class="section-number">4 </span>The Pause That Refreshes: Rebinding and References</h2>

<div class="image-with-caption center image-with-caption center">
  <img src="/site_images/javascript-allonge/bezzera.jpg" alt="It is not enough that coffee taste beautiful. Everything about its creation and consumption should reflect coffee's beauty."><p class="caption">It is not enough that coffee taste beautiful. Everything about its creation and consumption should reflect coffee’s beauty.</p>
</div>

<h4 id="leanpub-auto-a-simple-question">a simple question</h4>

<p>Consider this code:</p>

<div class="code-block">
<div class="highlight"><pre><code class="lineno">1</code> <code class="n">var</code> <code class="n">x</code> <code class="o">=</code> <code class="err">'</code><code class="n">June</code> <code class="mi">14</code><code class="p">,</code> <code class="mi">1962</code><code class="err">'</code><code class="p">,</code>
<code class="lineno">2</code>     <code class="n">y</code> <code class="o">=</code> <code class="n">x</code><code class="p">;</code>
<code class="lineno">3</code>     
<code class="lineno">4</code> <code class="n">x</code> <code class="o">===</code> <code class="n">y</code>
<code class="lineno">5</code>   <code class="c1">//=&gt; true</code>
</pre></div>

</div>

<p>This makes obvious sense, because we know that strings are a value type, so no matter what expression you use to derive the value ‘June 14, 1962’, you are going to get a string with the exact same identity.</p>

<p>But what about this code?</p>

<div class="code-block">
<div class="highlight"><pre><code class="lineno">1</code> <code class="n">var</code> <code class="n">x</code> <code class="o">=</code> <code class="p">[</code><code class="mi">2012</code><code class="p">,</code> <code class="mi">6</code><code class="p">,</code> <code class="mi">14</code><code class="p">],</code>
<code class="lineno">2</code>     <code class="n">y</code> <code class="o">=</code> <code class="n">x</code><code class="p">;</code>
<code class="lineno">3</code>     
<code class="lineno">4</code> <code class="n">x</code> <code class="o">===</code> <code class="n">y</code>
<code class="lineno">5</code>   <code class="c1">//=&gt; true</code>
</pre></div>

</div>

<p>Also true, even though we know that every time we evaluate an expression such as <code>[2012, 6, 14]</code>, we get a new array with a new identity. So what is happening in our environments?</p>

<h4 id="leanpub-auto-arguments-and-references">arguments and references</h4>

<p>In our discussion of <a href="#closures">closures</a>, we said that environments bind values (like <code>[2012, 6, 14]</code>) to names (like <code>x</code> and <code>y</code>), and that when we use these names as expressions, the name evaluates as the value.</p>

<p>What this means is that when we write something like <code>y = x</code>, the name <code>x</code> is looked up in the current environment, and its value is a specific array that was created when the expression <code>[2012, 6, 14]</code> was first evaluated. We then bind <em>that exact same value</em> to the name <code>y</code> in a new environment, and thus <code>x</code> and <code>y</code> are both bound to the exact same value, which is identical to itself.</p>

<p>The same thing happens with binding a variable through a more conventional means of applying a function to arguments:</p>

<div class="code-block">
<div class="highlight"><pre><code class="lineno">1</code> <code class="kd">var</code> <code class="nx">x</code> <code class="o">=</code> <code class="cp">[</code><code class="mi">2012</code><code class="p">,</code> <code class="mi">6</code><code class="p">,</code> <code class="mi">14</code><code class="cp">]</code><code class="p">;</code>
<code class="lineno">2</code> 
<code class="lineno">3</code> <code class="p">(</code><code class="kd">function</code> <code class="p">(</code><code class="nx">y</code><code class="p">)</code> <code class="p">{</code>
<code class="lineno">4</code>   <code class="k">return</code> <code class="nx">x</code> <code class="o">===</code> <code class="nx">y</code>
<code class="lineno">5</code> <code class="p">})(</code><code class="nx">x</code><code class="p">)</code>
<code class="lineno">6</code>   <code class="c1">//=&gt; true</code>
</pre></div>

</div>

<p><code>x</code> and <code>y</code> both end up bound to the exact same array, not two different arrays that look the same to our eyes.</p>

<h3 id="arrays">Arguments and Arrays</h3>

<p>JavaScript provides two different kinds of containers for values. We’ve met one already, the array. Let’s see how it treats values and identities. For starters, we’ll learn how to extract a value from an array. We’ll start with a function that makes a new value with a unique identity every time we call it. We already know that every function we create is unique, so that’s what we’ll use:</p>

<div class="code-block">
<div class="highlight"><pre><code class="lineno">1</code> <code class="kd">var</code> <code class="nx">unique</code> <code class="o">=</code> <code class="kd">function</code> <code class="p">()</code> <code class="p">{</code>
<code class="lineno">2</code>                 <code class="k">return</code> <code class="kd">function</code> <code class="p">()</code> <code class="p">{}</code>
<code class="lineno">3</code>               <code class="p">};</code>
<code class="lineno">4</code> 
<code class="lineno">5</code>   <code class="nx">unique</code><code class="p">()</code>
<code class="lineno">6</code>     <code class="c1">//=&gt; </code><code class="cp">[</code><code class="nx">Function</code><code class="cp">]</code><code class="c1"></code>
<code class="lineno">7</code>     
<code class="lineno">8</code>   <code class="nx">unique</code><code class="p">()</code> <code class="o">===</code> <code class="nx">unique</code><code class="p">()</code>
<code class="lineno">9</code>     <code class="c1">//=&gt; false</code>
</pre></div>

</div>

<p>Let’s verify that what we said about references applies to functions as well as arrays:</p>

<div class="code-block">
<div class="highlight"><pre><code class="lineno">1</code>   <code class="n">var</code> <code class="n">x</code> <code class="o">=</code> <code class="n">unique</code><code class="p">(),</code>
<code class="lineno">2</code>       <code class="n">y</code> <code class="o">=</code> <code class="n">x</code><code class="p">;</code>
<code class="lineno">3</code>       
<code class="lineno">4</code>   <code class="n">x</code> <code class="o">===</code> <code class="n">y</code>
<code class="lineno">5</code>     <code class="c1">//=&gt; true</code>
</pre></div>

</div>

<p>Ok. So what about things <em>inside</em> arrays? We know how to create an array with something inside it:</p>

<div class="code-block">
<div class="highlight"><pre><code class="lineno">1</code>   <code class="p">[</code> <code class="n">unique</code><code class="p">()</code> <code class="p">]</code>
<code class="lineno">2</code>     <code class="c1">//=&gt; [ [Function] ]</code>
</pre></div>

</div>

<p>That’s an array with one of our unique functions in it. How do we get something <em>out</em> of it?</p>

<div class="code-block">
<div class="highlight"><pre><code class="lineno">1</code>   <code class="n">var</code> <code class="n">a</code> <code class="o">=</code> <code class="p">[</code> <code class="err">'</code><code class="n">hello</code><code class="err">'</code> <code class="p">];</code>
<code class="lineno">2</code>   
<code class="lineno">3</code>   <code class="n">a</code><code class="p">[</code><code class="mi">0</code><code class="p">]</code>
<code class="lineno">4</code>     <code class="c1">//=&gt; 'hello'</code>
</pre></div>

</div>

<p>Cool, arrays work a lot like arrays in other languages and are zero-based. The trouble with this example is that strings are value types in JavaScript, so we have no idea whether <code>a[0]</code> always gives us the same value back like looking up a name in an environment, or whether it does some magic that tries to give us a new value.</p>

<p>We need to put a reference type into an array. If we get the same thing back, we know that the array stores a reference to whatever you put into it. If you get something different back, you know that arrays store copies of things.<sup id="fnref-hunh"><a href="#fn-hunh" rel="footnote">20</a></sup></p>

<p>Let’s test it:</p>

<div class="code-block">
<div class="highlight"><pre><code class="lineno">1</code> <code class="kd">var</code> <code class="nx">unique</code> <code class="o">=</code> <code class="kd">function</code> <code class="p">()</code> <code class="p">{</code>
<code class="lineno">2</code>                 <code class="k">return</code> <code class="kd">function</code> <code class="p">()</code> <code class="p">{}</code>
<code class="lineno">3</code>               <code class="p">},</code>
<code class="lineno">4</code>     <code class="nx">x</code> <code class="o">=</code> <code class="nx">unique</code><code class="p">(),</code>
<code class="lineno">5</code>     <code class="nx">a</code> <code class="o">=</code> <code class="cp">[</code> <code class="nx">x</code> <code class="cp">]</code><code class="p">;</code>
<code class="lineno">6</code>     
<code class="lineno">7</code> <code class="nx">a</code><code class="cp">[</code><code class="mi">0</code><code class="cp">]</code> <code class="o">===</code> <code class="nx">x</code>
<code class="lineno">8</code>   <code class="c1">//=&gt; true</code>
</pre></div>

</div>

<p>If we get a value out of an array using the <code>[]</code> suffix, it’s the exact same value with the same identity. Question: Does that apply to other locations in the array? Yes:</p>

<div class="code-block">
<div class="highlight"><pre><code class="lineno"> 1</code> <code class="kd">var</code> <code class="nx">unique</code> <code class="o">=</code> <code class="kd">function</code> <code class="p">()</code> <code class="p">{</code>
<code class="lineno"> 2</code>                <code class="k">return</code> <code class="kd">function</code> <code class="p">()</code> <code class="p">{}</code>
<code class="lineno"> 3</code>              <code class="p">},</code>
<code class="lineno"> 4</code>     <code class="nx">x</code> <code class="o">=</code> <code class="nx">unique</code><code class="p">(),</code>
<code class="lineno"> 5</code>     <code class="nx">y</code> <code class="o">=</code> <code class="nx">unique</code><code class="p">(),</code>
<code class="lineno"> 6</code>     <code class="nx">z</code> <code class="o">=</code> <code class="nx">unique</code><code class="p">(),</code>
<code class="lineno"> 7</code>     <code class="nx">a</code> <code class="o">=</code> <code class="cp">[</code> <code class="nx">x</code><code class="p">,</code> <code class="nx">y</code><code class="p">,</code> <code class="nx">z</code> <code class="cp">]</code><code class="p">;</code>
<code class="lineno"> 8</code>     
<code class="lineno"> 9</code> <code class="nx">a</code><code class="cp">[</code><code class="mi">0</code><code class="cp">]</code> <code class="o">===</code> <code class="nx">x</code> <code class="o">&amp;&amp;</code> <code class="nx">a</code><code class="cp">[</code><code class="mi">1</code><code class="cp">]</code> <code class="o">===</code> <code class="nx">y</code> <code class="o">&amp;&amp;</code> <code class="nx">a</code><code class="cp">[</code><code class="mi">2</code><code class="cp">]</code> <code class="o">===</code> <code class="nx">z</code>
<code class="lineno">10</code>   <code class="c1">//=&gt; true</code>
</pre></div>

</div>

<h3 id="objects">References and Objects</h3>

<p>JavaScript also provides objects. The word “object” is loaded in programming circles, due to the widespread use of the term “object-oriented programming” that was coined by Alan Kay but has since come to mean many, many things to many different people.</p>

<p>In JavaScript, an object[^pojo] is a map from names to values, a lot like an environment. The most common syntax for creating an object is simple:</p>

<p>Two objects created this way have differing identities, just like arrays:</p>

<div class="code-block">
<div class="highlight"><pre><code class="lineno">1</code> <code class="p">{</code> <code class="n">year</code><code class="o">:</code> <code class="mi">2012</code><code class="p">,</code> <code class="n">month</code><code class="o">:</code> <code class="mi">6</code><code class="p">,</code> <code class="n">day</code><code class="o">:</code> <code class="mi">14</code> <code class="p">}</code> <code class="o">===</code> <code class="p">{</code> <code class="n">year</code><code class="o">:</code> <code class="mi">2012</code><code class="p">,</code> <code class="n">month</code><code class="o">:</code> <code class="mi">6</code><code class="p">,</code> <code class="n">day</code><code class="o">:</code> <code class="mi">14</code> <code class="p">}</code>
<code class="lineno">2</code>   <code class="c1">//=&gt; false</code>
</pre></div>

</div>

<p>Objects use <code>[]</code> to access the values by name, using a string:</p>

<div class="code-block">
<div class="highlight"><pre><code class="lineno">1</code> <code class="p">{</code> <code class="n">year</code><code class="o">:</code> <code class="mi">2012</code><code class="p">,</code> <code class="n">month</code><code class="o">:</code> <code class="mi">6</code><code class="p">,</code> <code class="n">day</code><code class="o">:</code> <code class="mi">14</code> <code class="p">}[</code><code class="err">'</code><code class="n">day</code><code class="err">'</code><code class="p">]</code>
<code class="lineno">2</code>   <code class="c1">//=&gt; 14</code>
</pre></div>

</div>

<p>Values contained within an object work just like values contained within an array:</p>

<div class="code-block">
<div class="highlight"><pre><code class="lineno"> 1</code> <code class="kd">var</code> <code class="nx">unique</code> <code class="o">=</code> <code class="kd">function</code> <code class="p">()</code> <code class="p">{</code>
<code class="lineno"> 2</code>                 <code class="k">return</code> <code class="kd">function</code> <code class="p">()</code> <code class="p">{}</code>
<code class="lineno"> 3</code>               <code class="p">},</code>
<code class="lineno"> 4</code>     <code class="nx">x</code> <code class="o">=</code> <code class="nx">unique</code><code class="p">(),</code>
<code class="lineno"> 5</code>     <code class="nx">y</code> <code class="o">=</code> <code class="nx">unique</code><code class="p">(),</code>
<code class="lineno"> 6</code>     <code class="nx">z</code> <code class="o">=</code> <code class="nx">unique</code><code class="p">(),</code>
<code class="lineno"> 7</code>     <code class="nx">o</code> <code class="o">=</code> <code class="p">{</code> <code class="nx">a</code><code class="o">:</code> <code class="nx">x</code><code class="p">,</code> <code class="nx">b</code><code class="o">:</code> <code class="nx">y</code><code class="p">,</code> <code class="nx">c</code><code class="o">:</code> <code class="nx">z</code> <code class="p">};</code>
<code class="lineno"> 8</code> 
<code class="lineno"> 9</code> <code class="nx">o</code><code class="cp">[</code><code class="s1">'a'</code><code class="cp">]</code> <code class="o">===</code> <code class="nx">x</code> <code class="o">&amp;&amp;</code> <code class="nx">o</code><code class="cp">[</code><code class="s1">'b'</code><code class="cp">]</code> <code class="o">===</code> <code class="nx">y</code> <code class="o">&amp;&amp;</code> <code class="nx">o</code><code class="cp">[</code><code class="s1">'c'</code><code class="cp">]</code> <code class="o">===</code> <code class="nx">z</code>
<code class="lineno">10</code>   <code class="c1">//=&gt; true</code>
</pre></div>

</div>

<p>Names needn’t be alphanumeric strings. For anything else, enclose the label in quotes:</p>

<div class="code-block">
<div class="highlight"><pre><code class="lineno">1</code> <code class="p">{</code> <code class="err">'</code><code class="n">first</code> <code class="n">name</code><code class="err">'</code><code class="o">:</code> <code class="err">'</code><code class="n">reginald</code><code class="err">'</code><code class="p">,</code> <code class="err">'</code><code class="n">last</code> <code class="n">name</code><code class="err">'</code><code class="o">:</code> <code class="err">'</code><code class="n">lewis</code><code class="err">'</code> <code class="p">}[</code><code class="err">'</code><code class="n">first</code> <code class="n">name</code><code class="err">'</code><code class="p">]</code>
<code class="lineno">2</code>   <code class="c1">//=&gt; 'reginald'</code>
</pre></div>

</div>

<p>If the name is an alphanumeric string conforming to the same rules as names of variables, there’s a simplified syntax for accessing the values:</p>

<div class="code-block">
<div class="highlight"><pre><code class="lineno">1</code> <code class="p">{</code> <code class="n">year</code><code class="o">:</code> <code class="mi">2012</code><code class="p">,</code> <code class="n">month</code><code class="o">:</code> <code class="mi">6</code><code class="p">,</code> <code class="n">day</code><code class="o">:</code> <code class="mi">14</code> <code class="p">}[</code><code class="err">'</code><code class="n">day</code><code class="err">'</code><code class="p">]</code> <code class="o">===</code>
<code class="lineno">2</code>     <code class="p">{</code> <code class="n">year</code><code class="o">:</code> <code class="mi">2012</code><code class="p">,</code> <code class="n">month</code><code class="o">:</code> <code class="mi">6</code><code class="p">,</code> <code class="n">day</code><code class="o">:</code> <code class="mi">14</code> <code class="p">}.</code><code class="n">day</code>
<code class="lineno">3</code>   <code class="c1">//=&gt; true</code>
</pre></div>

</div>

<p>All containers can contain any value, including functions or other containers:</p>

<div class="code-block">
<div class="highlight"><pre><code class="lineno">1</code> <code class="kd">var</code> <code class="nx">Mathematics</code> <code class="o">=</code> <code class="p">{</code>
<code class="lineno">2</code>   <code class="nx">abs</code><code class="o">:</code> <code class="kd">function</code> <code class="p">(</code><code class="nx">a</code><code class="p">)</code> <code class="p">{</code>
<code class="lineno">3</code>          <code class="k">return</code> <code class="nx">a</code> <code class="o">&lt;</code> <code class="mi">0</code> <code class="o">?</code> <code class="o">-</code><code class="nx">a</code> <code class="o">:</code> <code class="nx">a</code>
<code class="lineno">4</code>        <code class="p">}</code>
<code class="lineno">5</code> <code class="p">};</code>
<code class="lineno">6</code> 
<code class="lineno">7</code> <code class="nx">Mathematics</code><code class="p">.</code><code class="nx">abs</code><code class="p">(</code><code class="o">-</code><code class="mi">5</code><code class="p">)</code>
<code class="lineno">8</code>   <code class="c1">//=&gt; 5</code>
</pre></div>

</div>

<p>Funny we should mention <code>Mathematics</code>. If you recall, JavaScript provides a global environment that contains some existing object that have handy functions you can use. One of them is called <code>Math</code>, and it contains functions for <code>abs</code>, <code>max</code>, <code>min</code>, and many others. Since it is always available, you can use it in any environment provided you don’t shadow <code>Math</code>.</p>

<div class="code-block">
<div class="highlight"><pre><code class="lineno">1</code> <code class="n">Math</code><code class="p">.</code><code class="n">abs</code><code class="p">(</code><code class="o">-</code><code class="mi">5</code><code class="p">)</code>
<code class="lineno">2</code>   <code class="c1">//=&gt; 5</code>
</pre></div>

</div>

<h3 id="reassignment">Reassignment and Mutation</h3>

<p>Like most imperative programming languages, JavaScript allows you to re-assign the value of variables. The syntax is familiar to users of most popular languages:</p>

<div class="code-block">
<div class="highlight"><pre><code class="lineno">1</code> <code class="n">var</code> <code class="n">age</code> <code class="o">=</code> <code class="mi">49</code><code class="p">;</code>
<code class="lineno">2</code> <code class="n">age</code> <code class="o">=</code> <code class="mi">50</code><code class="p">;</code>
<code class="lineno">3</code> <code class="n">age</code>
<code class="lineno">4</code>   <code class="c1">//=&gt; 50</code>
</pre></div>

</div>

<p>We took the time to carefully examine what happens with bindings in environments. Let’s take the time to explore what happens with reassigning values to variables. The key is to understand that we are rebinding a different value to the same name in the same environment.</p>

<p>So let’s consider what happens with a shadowed variable:</p>

<div class="code-block">
<div class="highlight"><pre><code class="lineno">1</code> <code class="p">(</code><code class="kd">function</code> <code class="p">()</code> <code class="p">{</code>
<code class="lineno">2</code>   <code class="kd">var</code> <code class="nx">age</code> <code class="o">=</code> <code class="mi">49</code><code class="p">;</code>
<code class="lineno">3</code>   <code class="p">(</code><code class="kd">function</code> <code class="p">()</code> <code class="p">{</code>
<code class="lineno">4</code>     <code class="kd">var</code> <code class="nx">age</code> <code class="o">=</code> <code class="mi">50</code><code class="p">;</code>
<code class="lineno">5</code>   <code class="p">})();</code>
<code class="lineno">6</code>   <code class="k">return</code> <code class="nx">age</code><code class="p">;</code>
<code class="lineno">7</code> <code class="p">})()</code>
<code class="lineno">8</code>   <code class="c1">//=&gt; 49</code>
</pre></div>

</div>

<p>Binding <code>50</code> to age in the inner environment does not change <code>age</code> in the outer environment because the binding of <code>age</code> in the inner environment shadows the binding of <code>age</code> in the outer environment. We go from:</p>

<div class="code-block">
<div class="highlight"><pre><code class="lineno">1</code> <code class="p">{</code><code class="n">age</code><code class="o">:</code> <code class="mi">49</code><code class="p">,</code> <code class="err">'</code><code class="p">..</code><code class="err">'</code><code class="o">:</code> <code class="n">global</code><code class="o">-</code><code class="n">environment</code><code class="p">}</code>
</pre></div>

</div>

<p>To:</p>

<div class="code-block">
<div class="highlight"><pre><code class="lineno">1</code> <code class="p">{</code><code class="n">age</code><code class="o">:</code> <code class="mi">50</code><code class="p">,</code> <code class="err">'</code><code class="p">..</code><code class="err">'</code><code class="o">:</code> <code class="p">{</code><code class="n">age</code><code class="o">:</code> <code class="mi">49</code><code class="p">,</code> <code class="err">'</code><code class="p">..</code><code class="err">'</code><code class="o">:</code> <code class="n">global</code><code class="o">-</code><code class="n">environment</code><code class="p">}}</code>
</pre></div>

</div>

<p>Then back to:</p>

<div class="code-block">
<div class="highlight"><pre><code class="lineno">1</code> <code class="p">{</code><code class="n">age</code><code class="o">:</code> <code class="mi">49</code><code class="p">,</code> <code class="err">'</code><code class="p">..</code><code class="err">'</code><code class="o">:</code> <code class="n">global</code><code class="o">-</code><code class="n">environment</code><code class="p">}</code>
</pre></div>

</div>

<div class="page-break"></div>
<p>However, if we don’t shadow <code>age</code> by explicitly using <code>var</code>, reassigning it in a nested environment changes the original:</p>

<div class="code-block">
<div class="highlight"><pre><code class="lineno">1</code> <code class="p">(</code><code class="kd">function</code> <code class="p">()</code> <code class="p">{</code>
<code class="lineno">2</code>   <code class="kd">var</code> <code class="nx">age</code> <code class="o">=</code> <code class="mi">49</code><code class="p">;</code>
<code class="lineno">3</code>   <code class="p">(</code><code class="kd">function</code> <code class="p">()</code> <code class="p">{</code>
<code class="lineno">4</code>     <code class="nx">age</code> <code class="o">=</code> <code class="mi">50</code><code class="p">;</code>
<code class="lineno">5</code>   <code class="p">})();</code>
<code class="lineno">6</code>   <code class="k">return</code> <code class="nx">age</code><code class="p">;</code>
<code class="lineno">7</code> <code class="p">})()</code>
<code class="lineno">8</code>   <code class="c1">//=&gt; 50</code>
</pre></div>

</div>

<p>Like evaluating variable labels, when a binding is rebound, JavaScript searches for the binding in the current environment and then each ancestor in turn until it finds one. It then rebinds the name in that environment.</p>

<div class="image-with-caption center image-with-caption center">
  <img src="/site_images/javascript-allonge/cupping.jpg" alt="Cupping Grinds"><p class="caption">Cupping Grinds</p>
</div>

<h4 id="leanpub-auto-mutation-and-aliases">mutation and aliases</h4>

<p>Now that we can reassign things, there’s another important factor to consider: Some values can <em>mutate</em>. Their identities stay the same, but not their structure. Specifically, arrays and objects can mutate. Recall that you can access a value from within an array or an object using <code>[]</code>. You can reassign a value using <code>[]</code> as well:</p>

<div class="code-block">
<div class="highlight"><pre><code class="lineno">1</code> <code class="n">var</code> <code class="n">oneTwoThree</code> <code class="o">=</code> <code class="p">[</code><code class="mi">1</code><code class="p">,</code> <code class="mi">2</code><code class="p">,</code> <code class="mi">3</code><code class="p">];</code>
<code class="lineno">2</code> <code class="n">oneTwoThree</code><code class="p">[</code><code class="mi">0</code><code class="p">]</code> <code class="o">=</code> <code class="err">'</code><code class="n">one</code><code class="err">'</code><code class="p">;</code>
<code class="lineno">3</code> <code class="n">oneTwoThree</code>
<code class="lineno">4</code>   <code class="c1">//=&gt; [ 'one', 2, 3 ]</code>
</pre></div>

</div>

<p>You can even add a value:</p>

<div class="code-block">
<div class="highlight"><pre><code class="lineno">1</code> <code class="n">var</code> <code class="n">oneTwoThree</code> <code class="o">=</code> <code class="p">[</code><code class="mi">1</code><code class="p">,</code> <code class="mi">2</code><code class="p">,</code> <code class="mi">3</code><code class="p">];</code>
<code class="lineno">2</code> <code class="n">oneTwoThree</code><code class="p">[</code><code class="mi">3</code><code class="p">]</code> <code class="o">=</code> <code class="err">'</code><code class="n">four</code><code class="err">'</code><code class="p">;</code>
<code class="lineno">3</code> <code class="n">oneTwoThree</code>
<code class="lineno">4</code>   <code class="c1">//=&gt; [ 1, 2, 3, 'four' ]</code>
</pre></div>

</div>

<p>You can do the same thing with both syntaxes for accessing objects:</p>

<div class="code-block">
<div class="highlight"><pre><code class="lineno">1</code> <code class="n">var</code> <code class="n">name</code> <code class="o">=</code> <code class="p">{</code><code class="n">firstName</code><code class="o">:</code> <code class="err">'</code><code class="n">Leonard</code><code class="err">'</code><code class="p">,</code> <code class="n">lastName</code><code class="o">:</code> <code class="err">'</code><code class="n">Braithwaite</code><code class="err">'</code><code class="p">};</code>
<code class="lineno">2</code> <code class="n">name</code><code class="p">.</code><code class="n">middleName</code> <code class="o">=</code> <code class="err">'</code><code class="n">Austin</code><code class="err">'</code>
<code class="lineno">3</code> <code class="n">name</code>
<code class="lineno">4</code>   <code class="c1">//=&gt; { firstName: 'Leonard',</code>
<code class="lineno">5</code>   <code class="err">#</code>     <code class="n">lastName</code><code class="o">:</code> <code class="err">'</code><code class="n">Braithwaite</code><code class="err">'</code><code class="p">,</code>
<code class="lineno">6</code>   <code class="err">#</code>     <code class="n">middleName</code><code class="o">:</code> <code class="err">'</code><code class="n">Austin</code><code class="err">'</code> <code class="p">}</code>
</pre></div>

</div>

<p>We have established that JavaScript’s semantics allow for two different bindings to refer to the same value. For example:</p>

<div class="code-block">
<div class="highlight"><pre><code class="lineno">1</code> <code class="n">var</code> <code class="n">allHallowsEve</code> <code class="o">=</code> <code class="p">[</code><code class="mi">2012</code><code class="p">,</code> <code class="mi">10</code><code class="p">,</code> <code class="mi">31</code><code class="p">]</code>
<code class="lineno">2</code> <code class="n">var</code> <code class="n">halloween</code> <code class="o">=</code> <code class="n">allHallowsEve</code><code class="p">;</code>  
</pre></div>

</div>

<p>Both <code>halloween</code> and <code>allHallowsEve</code> are bound to the same array value within the local environment. And also:</p>

<div class="code-block">
<div class="highlight"><pre><code class="lineno">1</code> <code class="kd">var</code> <code class="nx">allHallowsEve</code> <code class="o">=</code> <code class="cp">[</code><code class="mi">2012</code><code class="p">,</code> <code class="mi">10</code><code class="p">,</code> <code class="mi">31</code><code class="cp">]</code><code class="p">;</code>
<code class="lineno">2</code> <code class="p">(</code><code class="kd">function</code> <code class="p">(</code><code class="nx">halloween</code><code class="p">)</code> <code class="p">{</code>
<code class="lineno">3</code>   <code class="c1">// ...</code>
<code class="lineno">4</code> <code class="p">})(</code><code class="nx">allHallowsEve</code><code class="p">);</code>
</pre></div>

</div>

<p>There are two nested environments, and each one binds a name to the exact same array value. In each of these examples, we have created two <em>aliases</em> for the same value. Before we could reassign things, the most important point about this is that the identities were the same, because they were the same value.</p>

<p>This is vital. Consider what we already know about shadowing:</p>

<div class="code-block">
<div class="highlight"><pre><code class="lineno">1</code> <code class="kd">var</code> <code class="nx">allHallowsEve</code> <code class="o">=</code> <code class="cp">[</code><code class="mi">2012</code><code class="p">,</code> <code class="mi">10</code><code class="p">,</code> <code class="mi">31</code><code class="cp">]</code><code class="p">;</code>
<code class="lineno">2</code> <code class="p">(</code><code class="kd">function</code> <code class="p">(</code><code class="nx">halloween</code><code class="p">)</code> <code class="p">{</code>
<code class="lineno">3</code>   <code class="nx">halloween</code> <code class="o">=</code> <code class="cp">[</code><code class="mi">2013</code><code class="p">,</code> <code class="mi">10</code><code class="p">,</code> <code class="mi">31</code><code class="cp">]</code><code class="p">;</code>
<code class="lineno">4</code> <code class="p">})(</code><code class="nx">allHallowsEve</code><code class="p">);</code>
<code class="lineno">5</code> <code class="nx">allHallowsEve</code>
<code class="lineno">6</code>   <code class="c1">//=&gt; </code><code class="cp">[</code><code class="mi">2012</code><code class="p">,</code> <code class="mi">10</code><code class="p">,</code> <code class="mi">31</code><code class="cp">]</code><code class="c1"></code>
</pre></div>

</div>

<p>The outer value of <code>allHallowsEve</code> was not changed because all we did was rebind the name <code>halloween</code> within the inner environment. However, what happens if we <em>mutate</em> the value in the inner environment?</p>

<div class="code-block">
<div class="highlight"><pre><code class="lineno">1</code> <code class="kd">var</code> <code class="nx">allHallowsEve</code> <code class="o">=</code> <code class="cp">[</code><code class="mi">2012</code><code class="p">,</code> <code class="mi">10</code><code class="p">,</code> <code class="mi">31</code><code class="cp">]</code><code class="p">;</code>
<code class="lineno">2</code> <code class="p">(</code><code class="kd">function</code> <code class="p">(</code><code class="nx">halloween</code><code class="p">)</code> <code class="p">{</code>
<code class="lineno">3</code>   <code class="nx">halloween</code><code class="cp">[</code><code class="mi">0</code><code class="cp">]</code> <code class="o">=</code> <code class="mi">2013</code><code class="p">;</code>
<code class="lineno">4</code> <code class="p">})(</code><code class="nx">allHallowsEve</code><code class="p">);</code>
<code class="lineno">5</code> <code class="nx">allHallowsEve</code>
<code class="lineno">6</code>   <code class="c1">//=&gt; </code><code class="cp">[</code><code class="mi">2013</code><code class="p">,</code> <code class="mi">10</code><code class="p">,</code> <code class="mi">31</code><code class="cp">]</code><code class="c1"></code>
</pre></div>

</div>

<p>This is different. We haven’t rebound the inner name to a different variable, we’ve mutated the value that both bindings share. Now that we’ve finished with mutation and aliases, let’s have a look at it.</p>

<table class="tip sidebarish"><tbody><tr>
<td class="sidebar-icon">
      <img class="sidebar-image" src="/site_images/javascript-allonge/leanpub_key.png" alt="tip">
</td>
    <td>
      <p>JavaScript permits the reassignment of new values to existing bindings, as well as the reassignment and assignment of new values to elements of containers such as arrays and objects. Mutating existing objects has special implications when two bindings are aliases of the same value.</p>

    </td>
  </tr></tbody></table>
<h3 id="leanpub-auto-how-to-shoot-yourself-in-the-foot-with-var">How to Shoot Yourself in the Foot With Var</h3>

<p>As we’ve seen, JavaScript’s environments and bindings are quite powerful: You can bind and rebind names using function arguments or using variables declared with <code>var</code>. The takeaway is that when used properly, Javascript’s <code>var</code> keyword is a great tool.</p>

<p>When used properly.</p>

<p>Let’s look at a few ways to use it <em>improperly</em>.</p>

<h4 id="leanpub-auto-loose-use">loose use</h4>

<p>JavaScript’s <code>var</code> keyword is scoped to the function enclosing it. This makes sense, because bindings are made in environments, and the environments are associated with function calls. So if you write:</p>

<div class="code-block">
<div class="highlight"><pre><code class="lineno">1</code> <code class="kd">function</code> <code class="nx">foo</code> <code class="p">(</code><code class="nx">bar</code><code class="p">)</code> <code class="p">{</code>
<code class="lineno">2</code>   <code class="kd">var</code> <code class="nx">baz</code> <code class="o">=</code> <code class="nx">bar</code> <code class="o">*</code> <code class="mi">2</code><code class="p">;</code>
<code class="lineno">3</code>   
<code class="lineno">4</code>   <code class="k">if</code> <code class="p">(</code><code class="nx">bar</code> <code class="o">&gt;</code> <code class="mi">1</code><code class="p">)</code> <code class="p">{</code>
<code class="lineno">5</code>     <code class="kd">var</code> <code class="nx">blitz</code> <code class="o">=</code> <code class="nx">baz</code> <code class="o">-</code> <code class="mi">100</code><code class="p">;</code>
<code class="lineno">6</code>     
<code class="lineno">7</code>     <code class="c1">// ...</code>
<code class="lineno">8</code>   <code class="p">}</code>
<code class="lineno">9</code> <code class="p">}</code>
</pre></div>

</div>

<p>The name <code>blitz</code> is actually scoped to the function <code>foo</code>, not to the block of code in the consequent of an <code>if</code> statement. There are roughly two schools of thought. One line of reasoning goes like this: Since <code>blitz</code> is scoped to the function <code>foo</code>, you should write the code like this:</p>

<div class="code-block">
<div class="highlight"><pre><code class="lineno"> 1</code> <code class="kd">function</code> <code class="nx">foo</code> <code class="p">(</code><code class="nx">bar</code><code class="p">)</code> <code class="p">{</code>
<code class="lineno"> 2</code>   <code class="kd">var</code> <code class="nx">baz</code> <code class="o">=</code> <code class="nx">bar</code> <code class="o">*</code> <code class="mi">2</code><code class="p">,</code>
<code class="lineno"> 3</code>       <code class="nx">blitz</code><code class="p">;</code>
<code class="lineno"> 4</code>   
<code class="lineno"> 5</code>   <code class="k">if</code> <code class="p">(</code><code class="nx">bar</code> <code class="o">&gt;</code> <code class="mi">1</code><code class="p">)</code> <code class="p">{</code>
<code class="lineno"> 6</code>     <code class="nx">blitz</code> <code class="o">=</code> <code class="nx">baz</code> <code class="o">-</code> <code class="mi">100</code><code class="p">;</code>
<code class="lineno"> 7</code>     
<code class="lineno"> 8</code>     <code class="c1">// ...</code>
<code class="lineno"> 9</code>   <code class="p">}</code>
<code class="lineno">10</code> <code class="p">}</code>
</pre></div>

</div>

<p>We’ve separated the “declaration” from the “assignment,” and we’ve made it clear that <code>blitz</code> is scoped to the entire function. The other school of thought is that programmers are responsible for understanding how the tools work, and even if you write it the first way, other programmers reading the code ought to know how it works.</p>

<p>So here’s a question: Are both ways of writing the code equivalent? Let’s set up a test case that would tell them apart. We’ll try some aliasing:</p>

<div class="code-block">
<div class="highlight"><pre><code class="lineno"> 1</code> <code class="kd">var</code> <code class="nx">questionable</code> <code class="o">=</code> <code class="s1">'outer'</code><code class="p">;</code>
<code class="lineno"> 2</code> 
<code class="lineno"> 3</code> <code class="p">(</code><code class="kd">function</code> <code class="p">()</code> <code class="p">{</code>
<code class="lineno"> 4</code>   <code class="nx">alert</code><code class="p">(</code><code class="nx">questionable</code><code class="p">);</code>
<code class="lineno"> 5</code>   
<code class="lineno"> 6</code>   <code class="k">if</code> <code class="p">(</code><code class="kc">true</code><code class="p">)</code> <code class="p">{</code>
<code class="lineno"> 7</code>     <code class="kd">var</code> <code class="nx">questionable</code> <code class="o">=</code> <code class="s1">'inner'</code><code class="p">;</code>
<code class="lineno"> 8</code>     <code class="nx">alert</code><code class="p">(</code><code class="nx">questionable</code><code class="p">)</code>
<code class="lineno"> 9</code>   <code class="p">}</code>
<code class="lineno">10</code> <code class="p">})()</code>
</pre></div>

</div>

<p>What will this code do if we type it into a browser console? One theory is that it will alert <code>outer</code> and then <code>inner</code>, because when it evaluates the first alert, <code>questionable</code> hasn’t been bound in the function’s environment yet, so it will be looked up in the enclosing environment. Then an alias is bound, shadowing the outer binding, and it will alert <code>inner</code>.</p>

<p>This theory is wrong! It actually alerts <code>undefined</code> and then <code>inner</code>. Even though we wrote the <code>var</code> statement later in the code, JavaScript acts as if we’d declared it at the top of the function. This is true even if we never execute the <code>var</code> statement:</p>

<div class="code-block">
<div class="highlight"><pre><code class="lineno">1</code> <code class="kd">var</code> <code class="nx">questionable</code> <code class="o">=</code> <code class="s1">'outer'</code><code class="p">;</code>
<code class="lineno">2</code> 
<code class="lineno">3</code> <code class="p">(</code><code class="kd">function</code> <code class="p">()</code> <code class="p">{</code>
<code class="lineno">4</code>   <code class="k">return</code> <code class="nx">questionable</code><code class="p">;</code>
<code class="lineno">5</code>   
<code class="lineno">6</code>   <code class="kd">var</code> <code class="nx">questionable</code> <code class="o">=</code> <code class="s1">'inner'</code>
<code class="lineno">7</code> <code class="p">})()</code>
<code class="lineno">8</code> 
<code class="lineno">9</code>   <code class="c1">//=&gt; undefined</code>
</pre></div>

</div>

<p>So yes, both ways of writing the code work the same way, but only one represents the way it works directly and obviously. For this reason, we put the <code>var</code> declarations at the top of every function, always.</p>

<h4 id="leanpub-auto-for-petes-sake">for pete’s sake</h4>

<p>JavaScript provides a <code>for</code> loop for your iterating pleasure and convenience. It looks a lot like the <code>for</code> loop in C:</p>

<div class="code-block">
<div class="highlight"><pre><code class="lineno">1</code> <code class="n">var</code> <code class="n">sum</code> <code class="o">=</code> <code class="mi">0</code><code class="p">;</code>
<code class="lineno">2</code> <code class="k">for</code> <code class="p">(</code><code class="n">var</code> <code class="n">i</code> <code class="o">=</code> <code class="mi">1</code><code class="p">;</code> <code class="n">i</code> <code class="o">&lt;=</code> <code class="mi">100</code><code class="p">;</code> <code class="n">i</code><code class="o">++</code><code class="p">)</code> <code class="p">{</code>
<code class="lineno">3</code>   <code class="n">sum</code> <code class="o">=</code> <code class="n">sum</code> <code class="o">+</code> <code class="n">i</code>
<code class="lineno">4</code> <code class="p">}</code>
<code class="lineno">5</code> <code class="n">sum</code>
<code class="lineno">6</code>   <code class="err">#</code><code class="o">=&gt;</code> <code class="mi">5050</code>
</pre></div>

</div>

<p>Hopefully, you can think of a faster way to calculate this sum.<sup id="fnref-gauss"><a href="#fn-gauss" rel="footnote">21</a></sup> And perhaps you have noticed that <code>var i = 1</code> is tucked away instead of being at the top as we prefer. But is this ever a problem?</p>

<p>Yes. Consider this variation:</p>

<div class="code-block">
<div class="highlight"><pre><code class="lineno"> 1</code> <code class="n">var</code> <code class="n">introductions</code> <code class="o">=</code> <code class="p">[],</code>
<code class="lineno"> 2</code>     <code class="n">names</code> <code class="o">=</code> <code class="p">[</code><code class="err">'</code><code class="n">Karl</code><code class="err">'</code><code class="p">,</code> <code class="err">'</code><code class="n">Friedrich</code><code class="err">'</code><code class="p">,</code> <code class="err">'</code><code class="n">Gauss</code><code class="err">'</code><code class="p">];</code>
<code class="lineno"> 3</code>   
<code class="lineno"> 4</code> <code class="k">for</code> <code class="p">(</code><code class="n">var</code> <code class="n">i</code> <code class="o">=</code> <code class="mi">0</code><code class="p">;</code> <code class="n">i</code> <code class="o">&lt;</code> <code class="mi">3</code><code class="p">;</code> <code class="n">i</code><code class="o">++</code><code class="p">)</code> <code class="p">{</code>
<code class="lineno"> 5</code>   <code class="n">introductions</code><code class="p">[</code><code class="n">i</code><code class="p">]</code> <code class="o">=</code> <code class="s">"Hello, my name is "</code> <code class="o">+</code> <code class="n">names</code><code class="p">[</code><code class="n">i</code><code class="p">]</code>
<code class="lineno"> 6</code> <code class="p">}</code>
<code class="lineno"> 7</code> <code class="n">introductions</code>
<code class="lineno"> 8</code>   <code class="c1">//=&gt; [ 'Hello, my name is Karl',</code>
<code class="lineno"> 9</code>   <code class="c1">//     'Hello, my name is Friedrich',</code>
<code class="lineno">10</code>   <code class="c1">//     'Hello, my name is Gauss' ]</code>
</pre></div>

</div>

<p>So far, so good. Hey, remember that functions in JavaScript are values? Let’s get fancy!</p>

<div class="code-block">
<div class="highlight"><pre><code class="lineno"> 1</code> <code class="kd">var</code> <code class="nx">introductions</code> <code class="o">=</code> <code class="cp">[]</code><code class="p">,</code>
<code class="lineno"> 2</code>     <code class="nx">names</code> <code class="o">=</code> <code class="cp">[</code><code class="s1">'Karl'</code><code class="p">,</code> <code class="s1">'Friedrich'</code><code class="p">,</code> <code class="s1">'Gauss'</code><code class="cp">]</code><code class="p">;</code>
<code class="lineno"> 3</code>   
<code class="lineno"> 4</code> <code class="k">for</code> <code class="p">(</code><code class="kd">var</code> <code class="nx">i</code> <code class="o">=</code> <code class="mi">0</code><code class="p">;</code> <code class="nx">i</code> <code class="o">&lt;</code> <code class="mi">3</code><code class="p">;</code> <code class="nx">i</code><code class="o">++</code><code class="p">)</code> <code class="p">{</code>
<code class="lineno"> 5</code>   <code class="nx">introductions</code><code class="cp">[</code><code class="nx">i</code><code class="cp">]</code> <code class="o">=</code> <code class="kd">function</code> <code class="p">(</code><code class="nx">soAndSo</code><code class="p">)</code> <code class="p">{</code>
<code class="lineno"> 6</code>     <code class="k">return</code> <code class="s2">"Hello, "</code> <code class="o">+</code> <code class="nx">soAndSo</code> <code class="o">+</code> <code class="s2">", my name is "</code> <code class="o">+</code> <code class="nx">names</code><code class="cp">[</code><code class="nx">i</code><code class="cp">]</code>
<code class="lineno"> 7</code>   <code class="p">}</code>
<code class="lineno"> 8</code> <code class="p">}</code>
<code class="lineno"> 9</code> <code class="nx">introductions</code>
<code class="lineno">10</code>   <code class="c1">//=&gt; </code><code class="cp">[</code> <code class="err">[</code><code class="nx">Function</code><code class="cp">]</code><code class="c1">,</code>
<code class="lineno">11</code>   <code class="c1">//     </code><code class="cp">[</code><code class="nx">Function</code><code class="cp">]</code><code class="c1">,</code>
<code class="lineno">12</code>   <code class="c1">//     </code><code class="cp">[</code><code class="nx">Function</code><code class="cp">]</code><code class="c1"> ]</code>
</pre></div>

</div>

<p>So far, so good. Let’s try one of our functions:</p>

<div class="code-block">
<div class="highlight"><pre><code class="lineno">1</code> <code class="n">introductions</code><code class="p">[</code><code class="mi">1</code><code class="p">](</code><code class="err">'</code><code class="n">Raganwald</code><code class="err">'</code><code class="p">)</code>
<code class="lineno">2</code>   <code class="c1">//=&gt; 'Hello, Raganwald, my name is undefined'</code>
</pre></div>

</div>

<p>What went wrong? Why didn’t it give us ‘Hello, Raganwald, my name is Friedrich’? The answer is that pesky <code>var i</code>. Remember that <code>i</code> is bound in the surrounding environment, so it’s as if we wrote:</p>

<div class="code-block">
<div class="highlight"><pre><code class="lineno"> 1</code> <code class="kd">var</code> <code class="nx">introductions</code> <code class="o">=</code> <code class="cp">[]</code><code class="p">,</code>
<code class="lineno"> 2</code>     <code class="nx">names</code> <code class="o">=</code> <code class="cp">[</code><code class="s1">'Karl'</code><code class="p">,</code> <code class="s1">'Friedrich'</code><code class="p">,</code> <code class="s1">'Gauss'</code><code class="cp">]</code><code class="p">,</code>
<code class="lineno"> 3</code>     <code class="nx">i</code><code class="p">;</code>
<code class="lineno"> 4</code>   
<code class="lineno"> 5</code> <code class="k">for</code> <code class="p">(</code><code class="nx">i</code> <code class="o">=</code> <code class="mi">0</code><code class="p">;</code> <code class="nx">i</code> <code class="o">&lt;</code> <code class="mi">3</code><code class="p">;</code> <code class="nx">i</code><code class="o">++</code><code class="p">)</code> <code class="p">{</code>
<code class="lineno"> 6</code>   <code class="nx">introductions</code><code class="cp">[</code><code class="nx">i</code><code class="cp">]</code> <code class="o">=</code> <code class="kd">function</code> <code class="p">(</code><code class="nx">soAndSo</code><code class="p">)</code> <code class="p">{</code>
<code class="lineno"> 7</code>     <code class="k">return</code> <code class="s2">"Hello, "</code> <code class="o">+</code> <code class="nx">soAndSo</code> <code class="o">+</code> <code class="s2">", my name is "</code> <code class="o">+</code> <code class="nx">names</code><code class="cp">[</code><code class="nx">i</code><code class="cp">]</code>
<code class="lineno"> 8</code>   <code class="p">}</code>
<code class="lineno"> 9</code> <code class="p">}</code>
<code class="lineno">10</code> <code class="nx">introductions</code>
</pre></div>

</div>

<p>Now, at the time we created each function, <code>i</code> had a sensible value, like <code>0</code>, <code>1</code>, or <code>2</code>. But at the time we <em>call</em> one of the functions, <code>i</code> has the value <code>3</code>, which is why the loop terminated. So when the function is called, JavaScript looks <code>i</code> up in its enclosing environment (its  closure, obviously), and gets the value <code>3</code>. That’s not what we want at all. </p>

<p>Here’s how to fix it, once again with <code>let</code> as our guide:</p>

<div class="code-block">
<div class="highlight"><pre><code class="lineno"> 1</code> <code class="kd">var</code> <code class="nx">introductions</code> <code class="o">=</code> <code class="cp">[]</code><code class="p">,</code>
<code class="lineno"> 2</code>     <code class="nx">names</code> <code class="o">=</code> <code class="cp">[</code><code class="s1">'Karl'</code><code class="p">,</code> <code class="s1">'Friedrich'</code><code class="p">,</code> <code class="s1">'Gauss'</code><code class="cp">]</code><code class="p">;</code>
<code class="lineno"> 3</code>   
<code class="lineno"> 4</code> <code class="k">for</code> <code class="p">(</code><code class="kd">var</code> <code class="nx">i</code> <code class="o">=</code> <code class="mi">0</code><code class="p">;</code> <code class="nx">i</code> <code class="o">&lt;</code> <code class="mi">3</code><code class="p">;</code> <code class="nx">i</code><code class="o">++</code><code class="p">)</code> <code class="p">{</code>
<code class="lineno"> 5</code>   <code class="p">(</code><code class="kd">function</code> <code class="p">(</code><code class="nx">i</code><code class="p">)</code> <code class="p">{</code>
<code class="lineno"> 6</code>     <code class="nx">introductions</code><code class="cp">[</code><code class="nx">i</code><code class="cp">]</code> <code class="o">=</code> <code class="kd">function</code> <code class="p">(</code><code class="nx">soAndSo</code><code class="p">)</code> <code class="p">{</code>
<code class="lineno"> 7</code>       <code class="k">return</code> <code class="s2">"Hello, "</code> <code class="o">+</code> <code class="nx">soAndSo</code> <code class="o">+</code> <code class="s2">", my name is "</code> <code class="o">+</code> <code class="nx">names</code><code class="cp">[</code><code class="nx">i</code><code class="cp">]</code>
<code class="lineno"> 8</code>     <code class="p">}</code>
<code class="lineno"> 9</code>   <code class="p">})(</code><code class="nx">i</code><code class="p">)</code>
<code class="lineno">10</code> <code class="p">}</code>
<code class="lineno">11</code> <code class="nx">introductions</code><code class="cp">[</code><code class="mi">1</code><code class="cp">]</code><code class="p">(</code><code class="s1">'Raganwald'</code><code class="p">)</code>
<code class="lineno">12</code>   <code class="c1">//=&gt; 'Hello, Raganwald, my name is Friedrich'</code>
</pre></div>

</div>

<p>That works. What did we do? Well, we created a new function and called it immediately, and we deliberately shadowed <code>i</code> by passing it as an argument to our function, which had an argument of exactly the same name. If you dislike shadowing, this alternative also works:</p>

<div class="code-block">
<div class="highlight"><pre><code class="lineno"> 1</code> <code class="kd">var</code> <code class="nx">introductions</code> <code class="o">=</code> <code class="cp">[]</code><code class="p">,</code>
<code class="lineno"> 2</code>     <code class="nx">names</code> <code class="o">=</code> <code class="cp">[</code><code class="s1">'Karl'</code><code class="p">,</code> <code class="s1">'Friedrich'</code><code class="p">,</code> <code class="s1">'Gauss'</code><code class="cp">]</code><code class="p">;</code>
<code class="lineno"> 3</code>   
<code class="lineno"> 4</code> <code class="k">for</code> <code class="p">(</code><code class="kd">var</code> <code class="nx">i</code> <code class="o">=</code> <code class="mi">0</code><code class="p">;</code> <code class="nx">i</code> <code class="o">&lt;</code> <code class="mi">3</code><code class="p">;</code> <code class="nx">i</code><code class="o">++</code><code class="p">)</code> <code class="p">{</code>
<code class="lineno"> 5</code>   <code class="p">(</code><code class="kd">function</code> <code class="p">()</code> <code class="p">{</code>
<code class="lineno"> 6</code>     <code class="kd">var</code> <code class="nx">ii</code> <code class="o">=</code> <code class="nx">i</code><code class="p">;</code>
<code class="lineno"> 7</code>     <code class="nx">introductions</code><code class="cp">[</code><code class="nx">ii</code><code class="cp">]</code> <code class="o">=</code> <code class="kd">function</code> <code class="p">(</code><code class="nx">soAndSo</code><code class="p">)</code> <code class="p">{</code>
<code class="lineno"> 8</code>       <code class="k">return</code> <code class="s2">"Hello, "</code> <code class="o">+</code> <code class="nx">soAndSo</code> <code class="o">+</code> <code class="s2">", my name is "</code> <code class="o">+</code> <code class="nx">names</code><code class="cp">[</code><code class="nx">ii</code><code class="cp">]</code>
<code class="lineno"> 9</code>     <code class="p">}</code>
<code class="lineno">10</code>   <code class="p">})()</code>
<code class="lineno">11</code> <code class="p">}</code>
<code class="lineno">12</code> <code class="nx">introductions</code><code class="cp">[</code><code class="mi">1</code><code class="cp">]</code><code class="p">(</code><code class="s1">'Raganwald'</code><code class="p">)</code>
<code class="lineno">13</code>   <code class="c1">//=&gt; 'Hello, Raganwald, my name is Friedrich'</code>
</pre></div>

</div>

<p>Now we’re creating a new inner variable, <code>ii</code> and binding it  to the value of <code>i</code>. The shadowing code seems simpler and less error-prone to us, but both work.</p>

<h4 id="leanpub-auto-nope-nope-nope-nope-nope">nope, nope, nope, nope, nope</h4>

<p>The final caution about <code>var</code> concerns what happens if you omit to declare a variable with var, boldly writing something like:</p>

<div class="code-block">
<div class="highlight"><pre><code class="lineno">1</code> <code class="nx">fizzBuzz</code> <code class="o">=</code> <code class="kd">function</code> <code class="p">()</code> <code class="p">{</code>
<code class="lineno">2</code>   <code class="c1">// lots of interesting code elided</code>
<code class="lineno">3</code>   <code class="c1">// for the sake of hiring managers</code>
<code class="lineno">4</code> <code class="p">}</code>
</pre></div>

</div>

<p>So where is the name <code>fizzBuzz</code> bound? The answer is that if there is no enclosing <code>var</code> declaration for <code>fizzBuzz</code>, the name is bound in the <em>global</em> environment. And by global, we mean global. It is visible to every separate compilation unit. All of your npm modules. Every JavaScript snippet in a web page. Every included file.</p>

<p>This is almost never what you want. And when you do want it, JavaScript provides alternatives such as binding to <code>window.fizzBuzz</code> in a browser, or <code>this.fizzBuzz</code> in node. In short, eschew undeclared variables. Force yourself to make a habit of using <code>var</code> all of the time, and explicitly binding variables to the <code>window</code> or <code>this</code> objects when you truly want global visibility.</p>

<h3 id="recursive">When Rebinding Meets Recursion</h3>

<p>We’ve talked about binding values in environments, and now we’re talking about rebinding values and mutating values. Let’s take a small digression. As we’ve seen, in JavaScript functions are values. So you can bind a function just like binding a string, number or array. Here’s a function that tells us whether a (small and positive) number is even:</p>

<div class="code-block">
<div class="highlight"><pre><code class="lineno"> 1</code> <code class="kd">var</code> <code class="nx">even</code> <code class="o">=</code> <code class="kd">function</code> <code class="p">(</code><code class="nx">num</code><code class="p">)</code> <code class="p">{</code>
<code class="lineno"> 2</code>   <code class="k">return</code> <code class="p">(</code><code class="nx">num</code> <code class="o">===</code> <code class="mi">0</code><code class="p">)</code> <code class="o">||</code> <code class="o">!</code><code class="p">(</code><code class="nx">even</code><code class="p">(</code><code class="nx">num</code> <code class="o">-</code> <code class="mi">1</code><code class="p">))</code>
<code class="lineno"> 3</code> <code class="p">}</code>
<code class="lineno"> 4</code> 
<code class="lineno"> 5</code> <code class="nx">even</code><code class="p">(</code><code class="mi">0</code><code class="p">)</code>
<code class="lineno"> 6</code>   <code class="c1">//=&gt; true</code>
<code class="lineno"> 7</code>   
<code class="lineno"> 8</code> <code class="nx">even</code><code class="p">(</code><code class="mi">1</code><code class="p">)</code>
<code class="lineno"> 9</code>   <code class="c1">//=&gt; false</code>
<code class="lineno">10</code>   
<code class="lineno">11</code> <code class="nx">even</code><code class="p">(</code><code class="mi">42</code><code class="p">)</code>
<code class="lineno">12</code>   <code class="c1">//=&gt; true</code>
</pre></div>

</div>

<p>You can alias a function value:</p>

<div class="code-block">
<div class="highlight"><pre><code class="lineno"> 1</code> <code class="n">var</code> <code class="n">divisibleByTwo</code> <code class="o">=</code> <code class="n">even</code><code class="p">;</code>
<code class="lineno"> 2</code> 
<code class="lineno"> 3</code> <code class="n">divisibleByTwo</code><code class="p">(</code><code class="mi">0</code><code class="p">)</code>
<code class="lineno"> 4</code>   <code class="c1">//=&gt; true</code>
<code class="lineno"> 5</code>   
<code class="lineno"> 6</code> <code class="n">divisibleByTwo</code><code class="p">(</code><code class="mi">1</code><code class="p">)</code>
<code class="lineno"> 7</code>   <code class="c1">//=&gt; false</code>
<code class="lineno"> 8</code>   
<code class="lineno"> 9</code> <code class="n">divisibleByTwo</code><code class="p">(</code><code class="mi">42</code><code class="p">)</code>
<code class="lineno">10</code>   <code class="c1">//=&gt; true</code>
</pre></div>

</div>

<p>What happens when we redefine a recursive function like <code>even</code>? Does <code>dividibleByTwo</code> still work? Let’s try aliasing it and reassigning it:</p>

<div class="code-block">
<div class="highlight"><pre><code class="lineno">1</code> <code class="n">even</code> <code class="o">=</code> <code class="kt">void</code> <code class="mi">0</code><code class="p">;</code>
<code class="lineno">2</code> 
<code class="lineno">3</code> <code class="n">divisibleByTwo</code><code class="p">(</code><code class="mi">0</code><code class="p">)</code>
<code class="lineno">4</code>   <code class="c1">//=&gt; true</code>
<code class="lineno">5</code> 
<code class="lineno">6</code> <code class="n">divisibleByTwo</code><code class="p">(</code><code class="mi">1</code><code class="p">)</code>
<code class="lineno">7</code>   <code class="c1">//=&gt; TypeError</code>
</pre></div>

</div>

<p>What happened? Well, our new <code>divisibleByTwo</code> function wasn’t really a self-contained value. When we looked at functions, we talked about “pure” functions that only access their arguments and we looked at “closures” that have free variables. Recursive functions defined like this are closures, not pure functions, because when they “call themselves,” what they actually do is look themselves up by name in their enclosing environment. Thus, they depend upon a specific value (themselves) being bound in their enclosing environment. Reassign to that variable (or rebind the name, same thing), and you break their functionality.</p>

<h4 id="leanpub-auto-named-function-expressions">named function expressions</h4>

<p>You recall that in <a href="#named-function-expressions">Naming Functions</a>, we saw that when you create a named function expression, you bind the name of the function within its body but not the environment of the function expression, meaning you can write:</p>

<div class="code-block">
<div class="highlight"><pre><code class="lineno"> 1</code> <code class="kd">var</code> <code class="nx">even</code> <code class="o">=</code> <code class="kd">function</code> <code class="nx">myself</code> <code class="p">(</code><code class="nx">num</code><code class="p">)</code> <code class="p">{</code>
<code class="lineno"> 2</code>   <code class="k">return</code> <code class="p">(</code><code class="nx">num</code> <code class="o">===</code> <code class="mi">0</code><code class="p">)</code> <code class="o">||</code> <code class="o">!</code><code class="p">(</code><code class="nx">myself</code><code class="p">(</code><code class="nx">num</code> <code class="o">-</code> <code class="mi">1</code><code class="p">))</code>
<code class="lineno"> 3</code> <code class="p">}</code>
<code class="lineno"> 4</code> 
<code class="lineno"> 5</code> <code class="kd">var</code> <code class="nx">divisibleByTwo</code> <code class="o">=</code> <code class="nx">even</code><code class="p">;</code>
<code class="lineno"> 6</code> <code class="nx">even</code> <code class="o">=</code> <code class="k">void</code> <code class="mi">0</code><code class="p">;</code>
<code class="lineno"> 7</code> 
<code class="lineno"> 8</code> <code class="nx">divisibleByTwo</code><code class="p">(</code><code class="mi">0</code><code class="p">)</code>
<code class="lineno"> 9</code>   <code class="c1">//=&gt; true</code>
<code class="lineno">10</code>   
<code class="lineno">11</code> <code class="nx">divisibleByTwo</code><code class="p">(</code><code class="mi">1</code><code class="p">)</code>
<code class="lineno">12</code>   <code class="c1">//=&gt; false</code>
<code class="lineno">13</code>   
<code class="lineno">14</code> <code class="nx">divisibleByTwo</code><code class="p">(</code><code class="mi">42</code><code class="p">)</code>
<code class="lineno">15</code>   <code class="c1">//=&gt; true</code>
</pre></div>

</div>

<p>This is different, because the function doesn’t refer to a name bound in its enclosing environment, it refers to a name bound in its own body. It is now a pure function. In fact, you can even bind it to the exact same name in its enclosing environment and it will still work:</p>

<div class="code-block">
<div class="highlight"><pre><code class="lineno"> 1</code> <code class="kd">var</code> <code class="nx">even</code> <code class="o">=</code> <code class="kd">function</code> <code class="nx">even</code> <code class="p">(</code><code class="nx">num</code><code class="p">)</code> <code class="p">{</code>
<code class="lineno"> 2</code>   <code class="k">return</code> <code class="p">(</code><code class="nx">num</code> <code class="o">===</code> <code class="mi">0</code><code class="p">)</code> <code class="o">||</code> <code class="o">!</code><code class="p">(</code><code class="nx">even</code><code class="p">(</code><code class="nx">num</code> <code class="o">-</code> <code class="mi">1</code><code class="p">))</code>
<code class="lineno"> 3</code> <code class="p">}</code>
<code class="lineno"> 4</code> 
<code class="lineno"> 5</code> <code class="kd">var</code> <code class="nx">divisibleByTwo</code> <code class="o">=</code> <code class="nx">even</code><code class="p">;</code>
<code class="lineno"> 6</code> <code class="nx">even</code> <code class="o">=</code> <code class="k">void</code> <code class="mi">0</code><code class="p">;</code>
<code class="lineno"> 7</code> 
<code class="lineno"> 8</code> <code class="nx">divisibleByTwo</code><code class="p">(</code><code class="mi">0</code><code class="p">)</code>
<code class="lineno"> 9</code>   <code class="c1">//=&gt; true</code>
<code class="lineno">10</code>   
<code class="lineno">11</code> <code class="nx">divisibleByTwo</code><code class="p">(</code><code class="mi">1</code><code class="p">)</code>
<code class="lineno">12</code>   <code class="c1">//=&gt; false</code>
<code class="lineno">13</code>   
<code class="lineno">14</code> <code class="nx">divisibleByTwo</code><code class="p">(</code><code class="mi">42</code><code class="p">)</code>
<code class="lineno">15</code>   <code class="c1">//=&gt; true</code>
</pre></div>

</div>

<p>The <code>even</code> inside the function refers to the name bound within the function by the named function expression. It may have the same name as the <code>even</code> bound in the enclosing environment, but they are two different bindings in two different environments. Thus, rebinding the name in the enclosing environment does not break the function.</p>

<p>You may ask, what if we rebind <code>even</code>  inside of itself. Now will it break?</p>

<div class="code-block">
<div class="highlight"><pre><code class="lineno"> 1</code> <code class="kd">var</code> <code class="nx">even</code> <code class="o">=</code> <code class="kd">function</code> <code class="nx">even</code> <code class="p">(</code><code class="nx">num</code><code class="p">)</code> <code class="p">{</code>
<code class="lineno"> 2</code>   <code class="nx">even</code> <code class="o">=</code> <code class="k">void</code> <code class="mi">0</code><code class="p">;</code>
<code class="lineno"> 3</code>   <code class="k">return</code> <code class="p">(</code><code class="nx">num</code> <code class="o">===</code> <code class="mi">0</code><code class="p">)</code> <code class="o">||</code> <code class="o">!</code><code class="p">(</code><code class="nx">even</code><code class="p">(</code><code class="nx">num</code> <code class="o">-</code> <code class="mi">1</code><code class="p">))</code>
<code class="lineno"> 4</code> <code class="p">}</code>
<code class="lineno"> 5</code> 
<code class="lineno"> 6</code> <code class="kd">var</code> <code class="nx">divisibleByTwo</code> <code class="o">=</code> <code class="nx">even</code><code class="p">;</code>
<code class="lineno"> 7</code> <code class="nx">even</code> <code class="o">=</code> <code class="k">void</code> <code class="mi">0</code><code class="p">;</code>
<code class="lineno"> 8</code> 
<code class="lineno"> 9</code> <code class="nx">divisibleByTwo</code><code class="p">(</code><code class="mi">0</code><code class="p">)</code>
<code class="lineno">10</code>   <code class="c1">//=&gt; true</code>
<code class="lineno">11</code>   
<code class="lineno">12</code> <code class="nx">divisibleByTwo</code><code class="p">(</code><code class="mi">1</code><code class="p">)</code>
<code class="lineno">13</code>   <code class="c1">//=&gt; false</code>
<code class="lineno">14</code>   
<code class="lineno">15</code> <code class="nx">divisibleByTwo</code><code class="p">(</code><code class="mi">42</code><code class="p">)</code>
<code class="lineno">16</code>   <code class="c1">//=&gt; true</code>
</pre></div>

</div>

<p>Strangely, <em>no it doesn’t</em>. The name bound by a named function expression is read-only. Why do we say strangely? Because other quasi-declarations like function declarations do <em>not</em> behave like this.</p>

<p>So, when we want to make a recursive function, the safest practice is to use a named function expression.</p>

<h4 id="leanpub-auto-limits">limits</h4>

<p>Named function expressions have limits. Here’s one such limit: You can do simple recursion, but not mutual recursion. For example:</p>

<div class="code-block">
<div class="highlight"><pre><code class="lineno"> 1</code> <code class="kd">var</code> <code class="nx">even</code> <code class="o">=</code> <code class="kd">function</code> <code class="p">(</code><code class="nx">num</code><code class="p">)</code> <code class="nx">even</code> <code class="p">{</code> <code class="k">return</code> <code class="p">(</code><code class="nx">num</code> <code class="o">===</code> <code class="mi">0</code><code class="p">)</code> <code class="o">||</code> <code class="nx">odd</code><code class="p">(</code> <code class="nx">num</code> <code class="o">-</code> <code class="mi">1</code><code class="p">)</code> <code class="p">};</code>
<code class="lineno"> 2</code> <code class="kd">var</code> <code class="nx">odd</code>  <code class="o">=</code> <code class="kd">function</code> <code class="p">(</code><code class="nx">num</code><code class="p">)</code> <code class="nx">odd</code>  <code class="p">{</code> <code class="k">return</code> <code class="p">(</code><code class="nx">num</code>  <code class="o">&gt;</code>  <code class="mi">0</code><code class="p">)</code> <code class="o">&amp;&amp;</code> <code class="nx">even</code><code class="p">(</code><code class="nx">num</code> <code class="o">-</code> <code class="mi">1</code><code class="p">)</code> <code class="p">};</code>
<code class="lineno"> 3</code> 
<code class="lineno"> 4</code> <code class="nx">odd</code> <code class="o">=</code> <code class="s1">'unusual'</code><code class="p">;</code>
<code class="lineno"> 5</code> 
<code class="lineno"> 6</code> <code class="nx">even</code><code class="p">(</code><code class="mi">0</code><code class="p">)</code>
<code class="lineno"> 7</code>   <code class="c1">//=&gt; true</code>
<code class="lineno"> 8</code> 
<code class="lineno"> 9</code> <code class="nx">even</code><code class="p">(</code><code class="mi">1</code><code class="p">)</code>
<code class="lineno">10</code>   <code class="c1">//=&gt; TypeError</code>
</pre></div>

</div>

<p>Using named function expressions doesn’t help us, because <code>even</code> and <code>odd</code> need to be bound in an environment accessible to each other, not just to themselves. You either have to avoid rebinding the names of these functions, or use a closure to build a <a href="#modules">module</a>:</p>

<div class="code-block">
<div class="highlight"><pre><code class="lineno"> 1</code> <code class="kd">var</code> <code class="nx">operations</code> <code class="o">=</code> <code class="p">(</code><code class="kd">function</code> <code class="p">()</code> <code class="p">{</code>
<code class="lineno"> 2</code>       <code class="kd">var</code> <code class="nx">even</code> <code class="o">=</code> <code class="kd">function</code> <code class="p">(</code><code class="nx">num</code><code class="p">)</code> <code class="p">{</code> <code class="k">return</code> <code class="p">(</code><code class="nx">num</code> <code class="o">===</code> <code class="mi">0</code><code class="p">)</code> <code class="o">||</code> <code class="nx">odd</code><code class="p">(</code> <code class="nx">num</code> <code class="o">-</code> <code class="mi">1</code><code class="p">)</code> <code class="p">};</code>
<code class="lineno"> 3</code>       <code class="kd">var</code> <code class="nx">odd</code>  <code class="o">=</code> <code class="kd">function</code> <code class="p">(</code><code class="nx">num</code><code class="p">)</code> <code class="p">{</code> <code class="k">return</code> <code class="p">(</code><code class="nx">num</code>  <code class="o">&gt;</code>  <code class="mi">0</code><code class="p">)</code> <code class="o">&amp;&amp;</code> <code class="nx">even</code><code class="p">(</code><code class="nx">num</code> <code class="o">-</code> <code class="mi">1</code><code class="p">)</code> <code class="p">};</code>
<code class="lineno"> 4</code>       <code class="k">return</code> <code class="p">{</code>
<code class="lineno"> 5</code>         <code class="nx">even</code><code class="o">:</code> <code class="nx">even</code><code class="p">,</code>
<code class="lineno"> 6</code>         <code class="nx">odd</code><code class="o">:</code>  <code class="nx">odd</code>
<code class="lineno"> 7</code>       <code class="p">}</code>
<code class="lineno"> 8</code>     <code class="p">})(),</code>
<code class="lineno"> 9</code>     <code class="nx">even</code> <code class="o">=</code> <code class="nx">operations</code><code class="p">.</code><code class="nx">even</code><code class="p">,</code>
<code class="lineno">10</code>     <code class="nx">odd</code> <code class="o">=</code> <code class="nx">operations</code><code class="p">.</code><code class="nx">odd</code><code class="p">;</code>
</pre></div>

</div>

<p>Now you can rebind one without breaking the other, because the names outside of the closure have no effect on the bindings inside the closure:</p>

<div class="code-block">
<div class="highlight"><pre><code class="lineno"> 1</code> <code class="n">odd</code> <code class="o">=</code> <code class="err">'</code><code class="n">unusual</code><code class="p">;</code>
<code class="lineno"> 2</code> 
<code class="lineno"> 3</code> <code class="n">even</code><code class="p">(</code><code class="mi">0</code><code class="p">)</code>
<code class="lineno"> 4</code>   <code class="c1">//=&gt; true</code>
<code class="lineno"> 5</code>   
<code class="lineno"> 6</code> <code class="n">even</code><code class="p">(</code><code class="mi">1</code><code class="p">)</code>
<code class="lineno"> 7</code>   <code class="c1">//=&gt; false</code>
<code class="lineno"> 8</code>   
<code class="lineno"> 9</code> <code class="n">even</code><code class="p">(</code><code class="mi">42</code><code class="p">)</code>
<code class="lineno">10</code>   <code class="c1">//=&gt; true</code>
</pre></div>

</div>

<table class="tip sidebarish"><tbody><tr>
<td class="sidebar-icon">
      <img class="sidebar-image" src="/site_images/javascript-allonge/leanpub_key.png" alt="tip">
</td>
    <td>
      <p>As has often been noted, refactoring <em>to</em> a pattern is more important than designing <em>with</em> a pattern. So don’t rush off to write all your recursive functions this way, but familiarize yourself with the technique so that if and when you run into a subtle bug, you can recognize the problem and know how to fix it.</p>

    </td>
  </tr></tbody></table>
<h3 id="modules">From Let to Modules</h3>

<h4 id="leanpub-auto-transient-let">transient let</h4>

<p>In the section on <a href="#let">let and Var</a>, we learned that we can create a new environment any time we want by combining a function definition with a function invocation, to whit:</p>

<div class="code-block">
<div class="highlight"><pre><code class="lineno">1</code> <code class="p">(</code><code class="kd">function</code> <code class="p">()</code> <code class="p">{</code>
<code class="lineno">2</code>   <code class="c1">//</code>
<code class="lineno">3</code> <code class="p">})();</code>
</pre></div>

</div>

<p>Because this function is invoked, if it contains a return statement, it evaluates to a value of some kind. So you can, for example, write something like:</p>

<div class="code-block">
<div class="highlight"><pre><code class="lineno">1</code> <code class="kd">var</code> <code class="nx">factorialOfTwentyFive</code> <code class="o">=</code> <code class="p">(</code><code class="kd">function</code> <code class="p">()</code> <code class="p">{</code>
<code class="lineno">2</code>   <code class="kd">var</code> <code class="nx">factorial</code> <code class="o">=</code> <code class="kd">function</code> <code class="p">(</code><code class="nx">num</code><code class="p">)</code> <code class="p">{</code>
<code class="lineno">3</code>     <code class="k">if</code> <code class="p">(</code><code class="nx">num</code>  <code class="o">&lt;</code>  <code class="mi">2</code> <code class="p">)</code> <code class="p">{</code>
<code class="lineno">4</code>       <code class="k">return</code> <code class="mi">1</code>
<code class="lineno">5</code>     <code class="p">}</code>
<code class="lineno">6</code>     <code class="k">else</code> <code class="k">return</code> <code class="nx">num</code> <code class="o">*</code> <code class="nx">factorial</code> <code class="p">(</code><code class="nx">num</code> <code class="o">-</code> <code class="mi">1</code><code class="p">)</code>
<code class="lineno">7</code>   <code class="p">}</code>
<code class="lineno">8</code>   <code class="k">return</code> <code class="nx">factorial</code><code class="p">(</code><code class="mi">25</code><code class="p">)</code>
<code class="lineno">9</code> <code class="p">})();</code>
</pre></div>

</div>

<p>This could have been written using a named function to avoid the need for a let, but as we’ll see in the <a href="#recipe">memoize</a> later, sometimes there’s good reason to write it like this. In any event, our let serves to create a scope for the <code>factorial</code> function. Presumably we write it this way to signal that we do not want to use it elsewhere, so putting it inside of a let keeps it invisible from the rest of the code.</p>

<p>You’ll note that once we’ve calculated the factorial of 25, we have no further need for the environment of the function, so it will   be thrown away. This is what we might call a <strong>transient let</strong>: Nothing we bind in the <code>let</code> is returned from the <code>let</code> or otherwise passed out though assignment, so the environment of the let is discarded when the let finishes being evaluated.</p>

<h4 id="leanpub-auto-private-closure">private closure</h4>

<p>The transient let only uses its environment to generate the result, then it can be discarded. Another type of let is the <strong>private closure</strong>. This let returns a closure that references one or more bindings in the let’s environment. For example:</p>

<div class="code-block">
<div class="highlight"><pre><code class="lineno"> 1</code> <code class="kd">var</code> <code class="nx">counter</code> <code class="o">=</code> <code class="p">(</code><code class="kd">function</code> <code class="p">()</code> <code class="p">{</code>
<code class="lineno"> 2</code>   <code class="kd">var</code> <code class="nx">value</code> <code class="o">=</code> <code class="mi">0</code><code class="p">;</code>
<code class="lineno"> 3</code>   
<code class="lineno"> 4</code>   <code class="k">return</code> <code class="kd">function</code> <code class="p">()</code> <code class="p">{</code>
<code class="lineno"> 5</code>     <code class="k">return</code> <code class="nx">value</code><code class="o">++</code>
<code class="lineno"> 6</code>   <code class="p">}</code>
<code class="lineno"> 7</code> <code class="p">})();</code>
<code class="lineno"> 8</code> 
<code class="lineno"> 9</code> <code class="nx">counter</code><code class="p">()</code>
<code class="lineno">10</code>   <code class="c1">//=&gt; 0</code>
<code class="lineno">11</code>   
<code class="lineno">12</code> <code class="nx">counter</code><code class="p">()</code>
<code class="lineno">13</code>   <code class="c1">//=&gt; 1</code>
<code class="lineno">14</code>   
<code class="lineno">15</code> <code class="nx">counter</code><code class="p">()</code>
<code class="lineno">16</code>   <code class="c1">//=&gt; 2</code>
</pre></div>

</div>

<p><code>counter</code> is bound to a function closure that references the binding <code>value</code> in the let’s environment. So the environment isn’t transient, it remains active until the function bound to the name <code>counter</code> is discarded. Private closures are often used to manage state as we see in the counter example, but they can also be used for helper functions.</p>

<p>For example, this date format function cribbed from somewhere or other has a helper function that isn’t used anywhere else:</p>

<div class="code-block">
<div class="highlight"><pre><code class="lineno"> 1</code> <code class="kd">function</code> <code class="nx">formatDate</code> <code class="p">(</code><code class="nx">time</code><code class="p">)</code> <code class="p">{</code>
<code class="lineno"> 2</code>   <code class="kd">var</code> <code class="nx">date</code><code class="p">;</code>
<code class="lineno"> 3</code> 
<code class="lineno"> 4</code>   <code class="k">if</code> <code class="p">(</code><code class="nx">time</code><code class="p">)</code> <code class="p">{</code>
<code class="lineno"> 5</code>     <code class="nx">date</code> <code class="o">=</code> <code class="nx">unformattedDate</code><code class="p">(</code><code class="nx">time</code><code class="p">);</code>
<code class="lineno"> 6</code>     <code class="c1">// Have to massage the date because</code>
<code class="lineno"> 7</code>     <code class="c1">// we can't create a date </code>
<code class="lineno"> 8</code>     <code class="c1">// based on GMT which the server gives us</code>
<code class="lineno"> 9</code> 
<code class="lineno">10</code>     <code class="k">if</code> <code class="p">(</code><code class="o">!</code><code class="p">(</code><code class="sr">/-\d\d:\d\d/</code><code class="p">.</code><code class="nx">test</code><code class="p">(</code><code class="nx">time</code><code class="p">)))</code> <code class="p">{</code>
<code class="lineno">11</code>       <code class="nx">date</code><code class="p">.</code><code class="nx">setHours</code><code class="p">(</code>
<code class="lineno">12</code>         <code class="nx">date</code><code class="p">.</code><code class="nx">getHours</code><code class="p">()</code> <code class="o">-</code> <code class="nx">date</code><code class="p">.</code><code class="nx">getTimezoneOffset</code><code class="p">()</code><code class="o">/</code><code class="mi">60</code><code class="p">);</code>
<code class="lineno">13</code>     <code class="p">}</code>
<code class="lineno">14</code> 
<code class="lineno">15</code>     <code class="kd">var</code> <code class="nx">diff</code> <code class="o">=</code> <code class="p">(</code>
<code class="lineno">16</code>         <code class="p">(</code><code class="k">new</code> <code class="nb">Date</code><code class="p">()).</code><code class="nx">getTime</code><code class="p">()</code> <code class="o">-</code> <code class="nx">date</code><code class="p">.</code><code class="nx">getTime</code><code class="p">()</code>
<code class="lineno">17</code>       <code class="p">)</code> <code class="o">/</code> <code class="mi">1000</code><code class="p">;</code>
<code class="lineno">18</code>     <code class="nx">day_diff</code> <code class="o">=</code> <code class="nb">Math</code><code class="p">.</code><code class="nx">floor</code><code class="p">(</code><code class="nx">diff</code> <code class="o">/</code> <code class="mi">86400</code><code class="p">);</code>
<code class="lineno">19</code> 
<code class="lineno">20</code>     <code class="k">if</code> <code class="p">(</code> <code class="nb">isNaN</code><code class="p">(</code><code class="nx">day_diff</code><code class="p">)</code> <code class="o">||</code> <code class="nx">day_diff</code> <code class="o">&lt;</code> <code class="mi">0</code>  <code class="p">)</code>
<code class="lineno">21</code>       <code class="k">return</code><code class="p">;</code>
<code class="lineno">22</code> 
<code class="lineno">23</code>     <code class="k">return</code> <code class="s1">'&lt;span title="'</code> <code class="o">+</code> <code class="nx">date</code><code class="p">.</code><code class="nx">toUTCString</code><code class="p">()</code> <code class="o">+</code> <code class="s1">'"&gt;'</code> <code class="o">+</code> <code class="p">(</code><code class="nx">day_diff</code> <code class="o">==</code> <code class="mi">0</code> <code class="o">&amp;&amp;</code> <code class="p">(</code>
<code class="lineno">24</code>         <code class="nx">diff</code> <code class="o">&lt;</code> <code class="mi">60</code> <code class="o">&amp;&amp;</code> <code class="s2">"just now"</code> <code class="o">||</code>
<code class="lineno">25</code>         <code class="nx">diff</code> <code class="o">&lt;</code> <code class="mi">120</code> <code class="o">&amp;&amp;</code> <code class="s2">"1 minute ago"</code> <code class="o">||</code>
<code class="lineno">26</code>         <code class="nx">diff</code> <code class="o">&lt;</code> <code class="mi">3600</code> <code class="o">&amp;&amp;</code> <code class="nb">Math</code><code class="p">.</code><code class="nx">floor</code><code class="p">(</code> <code class="nx">diff</code> <code class="o">/</code> <code class="mi">60</code> <code class="p">)</code> <code class="o">+</code> <code class="s2">" minutes ago"</code> <code class="o">||</code>
<code class="lineno">27</code>         <code class="nx">diff</code> <code class="o">&lt;</code> <code class="mi">7200</code> <code class="o">&amp;&amp;</code> <code class="s2">"1 hour ago"</code> <code class="o">||</code>
<code class="lineno">28</code>         <code class="nx">diff</code> <code class="o">&lt;</code> <code class="mi">86400</code> <code class="o">&amp;&amp;</code> <code class="nb">Math</code><code class="p">.</code><code class="nx">floor</code><code class="p">(</code> <code class="nx">diff</code> <code class="o">/</code> <code class="mi">3600</code> <code class="p">)</code> <code class="o">+</code> <code class="s2">" hours ago"</code><code class="p">)</code> <code class="o">||</code>
<code class="lineno">29</code>       <code class="nx">day_diff</code> <code class="o">==</code> <code class="mi">1</code> <code class="o">&amp;&amp;</code> <code class="s2">"Yesterday"</code> <code class="o">||</code>
<code class="lineno">30</code>       <code class="nx">day_diff</code> <code class="o">&lt;</code> <code class="mi">7</code> <code class="o">&amp;&amp;</code> <code class="nx">day_diff</code> <code class="o">+</code> <code class="s2">" days ago"</code> <code class="o">||</code>
<code class="lineno">31</code>       <code class="nx">day_diff</code> <code class="o">&lt;</code> <code class="mi">31</code> <code class="o">&amp;&amp;</code> <code class="nb">Math</code><code class="p">.</code><code class="nx">ceil</code><code class="p">(</code> <code class="nx">day_diff</code> <code class="o">/</code> <code class="mi">7</code> <code class="p">)</code> <code class="o">+</code> <code class="s2">" weeks ago"</code> <code class="o">||</code>
<code class="lineno">32</code>       <code class="p">(</code><code class="nx">day_diff</code> <code class="o">&lt;</code> <code class="mi">360</code> <code class="o">&amp;&amp;</code> <code class="nx">day_diff</code> <code class="o">&gt;=</code> <code class="mi">31</code><code class="p">)</code> <code class="o">&amp;&amp;</code> <code class="nb">Math</code><code class="p">.</code><code class="nx">ceil</code><code class="p">(</code><code class="nx">day_diff</code> <code class="o">/</code> <code class="mi">31</code><code class="p">)</code> <code class="o">+</code> 
<code class="lineno">33</code>         <code class="s1">' month'</code> <code class="o">+</code> <code class="p">(</code><code class="nx">day_diff</code> <code class="o">==</code> <code class="mi">31</code> <code class="o">?</code> <code class="s1">''</code> <code class="o">:</code> <code class="s1">'s'</code><code class="p">)</code> <code class="o">+</code> <code class="s1">' ago'</code> <code class="o">||</code>
<code class="lineno">34</code>         <code class="nx">day_diff</code> <code class="o">&gt;</code> <code class="mi">360</code> <code class="o">&amp;&amp;</code> <code class="nb">Math</code><code class="p">.</code><code class="nx">floor</code><code class="p">(</code> <code class="nx">day_diff</code> <code class="o">/</code> <code class="mi">360</code><code class="p">)</code> <code class="o">+</code> <code class="s2">" years "</code> <code class="o">+</code> 
<code class="lineno">35</code>         <code class="nb">Math</code><code class="p">.</code><code class="nx">floor</code><code class="p">(</code><code class="nx">day_diff</code><code class="o">%</code><code class="mi">360</code><code class="o">/</code><code class="mi">32</code><code class="p">)</code> <code class="o">+</code> <code class="s2">" months ago"</code><code class="p">)</code> <code class="o">+</code> <code class="s1">'&lt;/span&gt;'</code><code class="p">;</code>
<code class="lineno">36</code>   <code class="p">}</code>
<code class="lineno">37</code>   <code class="k">else</code> <code class="k">return</code> <code class="s1">'-'</code>
<code class="lineno">38</code>   
<code class="lineno">39</code>   <code class="kd">function</code> <code class="nx">unformattedDate</code> <code class="p">(</code><code class="nx">time</code><code class="p">)</code> <code class="p">{</code>
<code class="lineno">40</code>     <code class="k">return</code> <code class="k">new</code> <code class="nb">Date</code><code class="p">((</code><code class="nx">time</code> <code class="o">||</code> <code class="s2">""</code><code class="p">).</code><code class="nx">replace</code><code class="p">(</code><code class="c1">/</code><code class="cp">[</code><code class="o">-+</code><code class="cp">]</code><code class="c1">/g,"/").</code>
<code class="lineno">41</code>       <code class="nx">replace</code><code class="p">(</code><code class="c1">/</code><code class="cp">[</code><code class="nx">TZ</code><code class="cp">]</code><code class="c1">/g," ").replace(/\/\d\d:\d\d/, ''));</code>
<code class="lineno">42</code>   <code class="p">}</code>
<code class="lineno">43</code> <code class="p">}</code>
</pre></div>

</div>

<p>Every time we call <code>formatDate</code>, JavaScript will create an entirely new <code>unformattedDate</code> function. That is not necessary, since it’s a pure function. In theory, a sufficiently smart interpreter would notice this and only create one function. In practice, we can rewrite it to use a private closure and only create one helper function:</p>

<div class="code-block">
<div class="highlight"><pre><code class="lineno"> 1</code> <code class="kd">var</code> <code class="nx">formatDate</code> <code class="o">=</code> <code class="p">(</code><code class="kd">function</code> <code class="p">()</code> <code class="p">{</code>
<code class="lineno"> 2</code>   <code class="k">return</code> <code class="kd">function</code> <code class="p">(</code><code class="nx">time</code><code class="p">)</code> <code class="p">{</code>
<code class="lineno"> 3</code>     <code class="kd">var</code> <code class="nx">date</code><code class="p">;</code>
<code class="lineno"> 4</code> 
<code class="lineno"> 5</code>     <code class="k">if</code> <code class="p">(</code><code class="nx">time</code><code class="p">)</code> <code class="p">{</code>
<code class="lineno"> 6</code>       <code class="nx">date</code> <code class="o">=</code> <code class="nx">unformattedDate</code><code class="p">(</code><code class="nx">time</code><code class="p">);</code>
<code class="lineno"> 7</code>       <code class="c1">// Have to massage the date because we can't create a date </code>
<code class="lineno"> 8</code>       <code class="c1">// based on GMT which the server gives us</code>
<code class="lineno"> 9</code> 
<code class="lineno">10</code>       <code class="k">if</code> <code class="p">(</code><code class="o">!</code><code class="p">(</code><code class="sr">/-\d\d:\d\d/</code><code class="p">.</code><code class="nx">test</code><code class="p">(</code><code class="nx">time</code><code class="p">)))</code> <code class="p">{</code>
<code class="lineno">11</code>         <code class="nx">date</code><code class="p">.</code><code class="nx">setHours</code><code class="p">(</code><code class="nx">date</code><code class="p">.</code><code class="nx">getHours</code><code class="p">()</code> <code class="o">-</code> <code class="nx">date</code><code class="p">.</code><code class="nx">getTimezoneOffset</code><code class="p">()</code><code class="o">/</code><code class="mi">60</code><code class="p">);</code>
<code class="lineno">12</code>       <code class="p">}</code>
<code class="lineno">13</code> 
<code class="lineno">14</code>       <code class="kd">var</code> <code class="nx">diff</code> <code class="o">=</code> <code class="p">((</code><code class="k">new</code> <code class="nb">Date</code><code class="p">()).</code><code class="nx">getTime</code><code class="p">()</code> <code class="o">-</code> <code class="nx">date</code><code class="p">.</code><code class="nx">getTime</code><code class="p">())</code> <code class="o">/</code> <code class="mi">1000</code><code class="p">;</code>
<code class="lineno">15</code>       <code class="nx">day_diff</code> <code class="o">=</code> <code class="nb">Math</code><code class="p">.</code><code class="nx">floor</code><code class="p">(</code><code class="nx">diff</code> <code class="o">/</code> <code class="mi">86400</code><code class="p">);</code>
<code class="lineno">16</code> 
<code class="lineno">17</code>       <code class="k">if</code> <code class="p">(</code> <code class="nb">isNaN</code><code class="p">(</code><code class="nx">day_diff</code><code class="p">)</code> <code class="o">||</code> <code class="nx">day_diff</code> <code class="o">&lt;</code> <code class="mi">0</code>  <code class="p">)</code>
<code class="lineno">18</code>         <code class="k">return</code><code class="p">;</code>
<code class="lineno">19</code> 
<code class="lineno">20</code>       <code class="k">return</code> <code class="s1">'&lt;span title="'</code> <code class="o">+</code> <code class="nx">date</code><code class="p">.</code><code class="nx">toUTCString</code><code class="p">()</code> <code class="o">+</code> <code class="s1">'"&gt;'</code> <code class="o">+</code> <code class="p">(</code><code class="nx">day_diff</code> <code class="o">==</code> <code class="mi">0</code> <code class="o">&amp;&amp;</code> <code class="p">(</code>
<code class="lineno">21</code>           <code class="nx">diff</code> <code class="o">&lt;</code> <code class="mi">60</code> <code class="o">&amp;&amp;</code> <code class="s2">"just now"</code> <code class="o">||</code>
<code class="lineno">22</code>           <code class="nx">diff</code> <code class="o">&lt;</code> <code class="mi">120</code> <code class="o">&amp;&amp;</code> <code class="s2">"1 minute ago"</code> <code class="o">||</code>
<code class="lineno">23</code>           <code class="nx">diff</code> <code class="o">&lt;</code> <code class="mi">3600</code> <code class="o">&amp;&amp;</code> <code class="nb">Math</code><code class="p">.</code><code class="nx">floor</code><code class="p">(</code> <code class="nx">diff</code> <code class="o">/</code> <code class="mi">60</code> <code class="p">)</code> <code class="o">+</code> <code class="s2">" minutes ago"</code> <code class="o">||</code>
<code class="lineno">24</code>           <code class="nx">diff</code> <code class="o">&lt;</code> <code class="mi">7200</code> <code class="o">&amp;&amp;</code> <code class="s2">"1 hour ago"</code> <code class="o">||</code>
<code class="lineno">25</code>           <code class="nx">diff</code> <code class="o">&lt;</code> <code class="mi">86400</code> <code class="o">&amp;&amp;</code> <code class="nb">Math</code><code class="p">.</code><code class="nx">floor</code><code class="p">(</code> <code class="nx">diff</code> <code class="o">/</code> <code class="mi">3600</code> <code class="p">)</code> <code class="o">+</code> <code class="s2">" hours ago"</code><code class="p">)</code> <code class="o">||</code>
<code class="lineno">26</code>         <code class="nx">day_diff</code> <code class="o">==</code> <code class="mi">1</code> <code class="o">&amp;&amp;</code> <code class="s2">"Yesterday"</code> <code class="o">||</code>
<code class="lineno">27</code>         <code class="nx">day_diff</code> <code class="o">&lt;</code> <code class="mi">7</code> <code class="o">&amp;&amp;</code> <code class="nx">day_diff</code> <code class="o">+</code> <code class="s2">" days ago"</code> <code class="o">||</code>
<code class="lineno">28</code>         <code class="nx">day_diff</code> <code class="o">&lt;</code> <code class="mi">31</code> <code class="o">&amp;&amp;</code> <code class="nb">Math</code><code class="p">.</code><code class="nx">ceil</code><code class="p">(</code> <code class="nx">day_diff</code> <code class="o">/</code> <code class="mi">7</code> <code class="p">)</code> <code class="o">+</code> <code class="s2">" weeks ago"</code> <code class="o">||</code>
<code class="lineno">29</code>         <code class="p">(</code><code class="nx">day_diff</code> <code class="o">&lt;</code> <code class="mi">360</code> <code class="o">&amp;&amp;</code> <code class="nx">day_diff</code> <code class="o">&gt;=</code> <code class="mi">31</code><code class="p">)</code> <code class="o">&amp;&amp;</code> <code class="nb">Math</code><code class="p">.</code><code class="nx">ceil</code><code class="p">(</code><code class="nx">day_diff</code> <code class="o">/</code> <code class="mi">31</code><code class="p">)</code> <code class="o">+</code>
<code class="lineno">30</code>           <code class="s1">' month'</code> <code class="o">+</code> <code class="p">(</code><code class="nx">day_diff</code> <code class="o">==</code> <code class="mi">31</code> <code class="o">?</code> <code class="s1">''</code> <code class="o">:</code> <code class="s1">'s'</code><code class="p">)</code> <code class="o">+</code> <code class="s1">' ago'</code> <code class="o">||</code>
<code class="lineno">31</code>           <code class="nx">day_diff</code> <code class="o">&gt;</code> <code class="mi">360</code> <code class="o">&amp;&amp;</code> <code class="nb">Math</code><code class="p">.</code><code class="nx">floor</code><code class="p">(</code> <code class="nx">day_diff</code> <code class="o">/</code> <code class="mi">360</code><code class="p">)</code> <code class="o">+</code> 
<code class="lineno">32</code>           <code class="s2">" years "</code> <code class="o">+</code> <code class="nb">Math</code><code class="p">.</code><code class="nx">floor</code><code class="p">(</code><code class="nx">day_diff</code><code class="o">%</code><code class="mi">360</code><code class="o">/</code><code class="mi">32</code><code class="p">)</code> <code class="o">+</code> <code class="s2">" months ago"</code><code class="p">)</code> <code class="o">+</code> <code class="s1">'&lt;/span&gt;'</code><code class="p">;</code>
<code class="lineno">33</code>     <code class="p">}</code>
<code class="lineno">34</code>     <code class="k">else</code> <code class="k">return</code> <code class="s1">'-'</code>
<code class="lineno">35</code>   <code class="p">}</code>
<code class="lineno">36</code>   
<code class="lineno">37</code>   <code class="kd">function</code> <code class="nx">unformattedDate</code> <code class="p">(</code><code class="nx">time</code><code class="p">)</code> <code class="p">{</code>
<code class="lineno">38</code>     <code class="k">return</code> <code class="k">new</code> <code class="nb">Date</code><code class="p">((</code><code class="nx">time</code> <code class="o">||</code> <code class="s2">""</code><code class="p">).</code><code class="nx">replace</code><code class="p">(</code><code class="c1">/</code><code class="cp">[</code><code class="o">-+</code><code class="cp">]</code><code class="c1">/g,"/").replace(/</code><code class="cp">[</code><code class="nx">TZ</code><code class="cp">]</code><code class="c1">/g," ").replac\</code>
<code class="lineno">39</code> <code class="nx">e</code><code class="p">(</code><code class="sr">/\/\d\d:\d\d/</code><code class="p">,</code> <code class="s1">''</code><code class="p">));</code>
<code class="lineno">40</code>   <code class="p">}</code>
<code class="lineno">41</code> <code class="p">})();</code>
</pre></div>

</div>

<p>The function <code>unformattedDate</code> is still private to <code>formatDate</code>, but now we no longer need to construct an entirely new function every time <code>formatDate</code> is called.</p>

<h4 id="leanpub-auto-modules">modules</h4>

<p>Once the power of creating a new environment with a let (or “immediately invoked function expression”) is tasted, it won’t be long before you find yourself building modules with lets. Modules are any collection of functions that have some private and some public-facing elements.</p>

<p>Consider a module designed to draw some bits on a virtual screen. The public API consists of a series of draw functions. The private API includes a series of helper functions. This is exactly like the <strong>private closure</strong>, the only difference being that we want to return multiple public functions instead of just one.</p>

<p>It looks like this:</p>

<div class="code-block">
<div class="highlight"><pre><code class="lineno"> 1</code> <code class="kd">var</code> <code class="nx">DrawModule</code> <code class="o">=</code> <code class="p">(</code><code class="kd">function</code> <code class="p">()</code> <code class="p">{</code>
<code class="lineno"> 2</code>   
<code class="lineno"> 3</code>   <code class="k">return</code> <code class="p">{</code>
<code class="lineno"> 4</code>     <code class="nx">drawLine</code><code class="o">:</code> <code class="nx">drawLine</code><code class="p">,</code>
<code class="lineno"> 5</code>     <code class="nx">drawRect</code><code class="o">:</code> <code class="nx">drawRect</code><code class="p">,</code>
<code class="lineno"> 6</code>     <code class="nx">drawCircle</code><code class="o">:</code> <code class="nx">drawCircle</code>
<code class="lineno"> 7</code>   <code class="p">}</code>
<code class="lineno"> 8</code>   
<code class="lineno"> 9</code>   <code class="c1">// public methods</code>
<code class="lineno">10</code>   <code class="kd">var</code> <code class="nx">drawLine</code> <code class="o">=</code> <code class="kd">function</code> <code class="p">(</code><code class="nx">screen</code><code class="p">,</code> <code class="nx">leftPoint</code><code class="p">,</code> <code class="nx">rightPoint</code><code class="p">)</code> <code class="p">{</code> <code class="p">...</code> <code class="p">}</code>
<code class="lineno">11</code>   <code class="kd">var</code> <code class="nx">drawRect</code> <code class="o">=</code> <code class="kd">function</code> <code class="p">(</code><code class="nx">screen</code><code class="p">,</code> <code class="nx">topLeft</code><code class="p">,</code> <code class="nx">bottomRight</code><code class="p">)</code> <code class="p">{</code> <code class="p">...</code> <code class="p">}</code>
<code class="lineno">12</code>   <code class="kd">var</code> <code class="nx">drawCircle</code> <code class="o">=</code> <code class="kd">function</code> <code class="p">(</code><code class="nx">screen</code><code class="p">,</code> <code class="nx">center</code><code class="p">,</code> <code class="nx">radius</code><code class="p">)</code> <code class="p">{</code> <code class="p">...</code> <code class="p">}</code>
<code class="lineno">13</code>   
<code class="lineno">14</code>   <code class="c1">// private helpers</code>
<code class="lineno">15</code>   <code class="kd">function</code> <code class="nx">bitBlt</code> <code class="p">(</code><code class="nx">screen</code><code class="p">,</code> <code class="p">...)</code> <code class="p">{</code> <code class="p">...</code> <code class="p">}</code>
<code class="lineno">16</code>   <code class="kd">function</code> <code class="nx">resize</code> <code class="p">(</code><code class="nx">screen</code><code class="p">,</code> <code class="p">...)</code> <code class="p">{</code> <code class="p">...</code> <code class="p">}</code>
<code class="lineno">17</code>   
<code class="lineno">18</code> <code class="p">})();</code>
</pre></div>

</div>

<p>You can then call the public functions using <code>DrawModule.drawCircle(...)</code>. The concept scales up to include the concept of state (such as setting default line styles), but when you look at it, it’s really just the private closure let with a little more complexity in the form of returning an object with more than one function.</p>

<h3 id="leanpub-auto-summary-1">Summary</h3>

<table class="tip sidebarish"><tbody><tr>
<td class="sidebar-icon">
      <img class="sidebar-image" src="/site_images/javascript-allonge/leanpub_key.png" alt="tip">
</td>
    <td>
      <h4 id="leanpub-auto-rebinding">Rebinding</h4>

  <ul>
<li>JavaScript permits reassignment/rebinding of variables.</li>
    <li>Arrays and Objects are mutable.</li>
    <li>References permit aliasing of reference types.</li>
    <li>We may need to take special care to prevent ourselves from accidentally breaking recursive functions.</li>
    <li>For loops are convenient, but require care to avoid scoping bugs.</li>
  </ul>
</td>
  </tr></tbody></table>
<h2 id="leanpub-auto-recipes-with-rebinding-and-references">
<span class="section-number">5 </span>Recipes with Rebinding and References</h2>

<div class="image-with-caption center image-with-caption center">
  <img src="/site_images/javascript-allonge/diplomatico.jpg" alt="Café Diplomatico in Toronto's Little Italy"><p class="caption">Café Diplomatico in Toronto’s Little Italy</p>
</div>

<h4 id="leanpub-auto-disclaimer-1">Disclaimer</h4>

<p>The recipes are written for practicality, and their implementation may introduce JavaScript features that haven’t been discussed in the text to this point, such as methods and/or prototypes. The overall <em>use</em> of each recipe will fit within the spirit of the language discussed so far, even if the implementations may not.</p>

<h3 id="leanpub-auto-once">Once</h3>

<p><code>once</code> is an extremely helpful combinator. It ensures that a function can only be called, well, <em>once</em>. Here’s the recipe:</p>

<div class="code-block">
<div class="highlight"><pre><code class="lineno">1</code> <code class="kd">function</code> <code class="nx">once</code> <code class="p">(</code><code class="nx">fn</code><code class="p">)</code> <code class="p">{</code>
<code class="lineno">2</code>   <code class="kd">var</code> <code class="nx">done</code> <code class="o">=</code> <code class="kc">false</code><code class="p">;</code>
<code class="lineno">3</code>   
<code class="lineno">4</code>   <code class="k">return</code> <code class="kd">function</code> <code class="p">()</code> <code class="p">{</code>
<code class="lineno">5</code>     <code class="k">return</code> <code class="nx">done</code> <code class="o">?</code> <code class="k">void</code> <code class="mi">0</code> <code class="o">:</code> <code class="p">((</code><code class="nx">done</code> <code class="o">=</code> <code class="kc">true</code><code class="p">),</code> <code class="nx">fn</code><code class="p">.</code><code class="nx">apply</code><code class="p">(</code><code class="k">this</code><code class="p">,</code> <code class="nx">arguments</code><code class="p">))</code>
<code class="lineno">6</code>   <code class="p">}</code>
<code class="lineno">7</code> <code class="p">}</code>
</pre></div>

</div>

<p>Very simple! You pass it a function, and you get a function back. That function will call your function once, and thereafter will return <code>undefined</code> whenever it is called. Let’s try it:</p>

<div class="code-block">
<div class="highlight"><pre><code class="lineno"> 1</code> <code class="kd">var</code> <code class="nx">askedOnBlindDate</code> <code class="o">=</code> <code class="nx">once</code><code class="p">(</code><code class="kd">function</code> <code class="p">()</code> <code class="p">{</code>
<code class="lineno"> 2</code>   <code class="k">return</code> <code class="s1">'sure, why not?'</code>
<code class="lineno"> 3</code> <code class="p">});</code>
<code class="lineno"> 4</code> 
<code class="lineno"> 5</code> <code class="nx">askedOnBlindDate</code><code class="p">()</code>
<code class="lineno"> 6</code>   <code class="c1">//=&gt; 'sure, why not?'</code>
<code class="lineno"> 7</code>   
<code class="lineno"> 8</code> <code class="nx">askedOnBlindDate</code><code class="p">()</code>
<code class="lineno"> 9</code>   <code class="c1">//=&gt; undefined</code>
<code class="lineno">10</code>   
<code class="lineno">11</code> <code class="nx">askedOnBlindDate</code><code class="p">()</code>
<code class="lineno">12</code>   <code class="c1">//=&gt; undefined</code>
</pre></div>

</div>

<p>It seems some people will only try blind dating once. But you do have to be careful that you are calling the function <code>once</code> returns multiple times. If you keep calling <code>once</code>, you’ll get a new function that executes once, so you’ll keep calling your function:</p>

<div class="code-block">
<div class="highlight"><pre><code class="lineno">1</code> <code class="nx">once</code><code class="p">(</code><code class="kd">function</code> <code class="p">()</code> <code class="p">{</code>
<code class="lineno">2</code>   <code class="k">return</code> <code class="s1">'sure, why not?'</code>
<code class="lineno">3</code> <code class="p">})()</code>
<code class="lineno">4</code>   <code class="c1">//=&gt; 'sure, why not?'</code>
<code class="lineno">5</code> 
<code class="lineno">6</code> <code class="nx">once</code><code class="p">(</code><code class="kd">function</code> <code class="p">()</code> <code class="p">{</code>
<code class="lineno">7</code>   <code class="k">return</code> <code class="s1">'sure, why not?'</code>
<code class="lineno">8</code> <code class="p">})()</code>
<code class="lineno">9</code>   <code class="c1">//=&gt; 'sure, why not?'</code>
</pre></div>

</div>

<p>This is expected, but sometimes not what we want. So we must either be careful with our code, or use a variation, the <a href="#named-once">named once</a> recipe.</p>

<h3 id="mapWith">mapWith</h3>

<p>In recent versions of JavaScript, arrays have a <code>.map</code> method. Map takes a function as an argument, and applies it to each of the elements of the array, then returns the results in another array. For example:</p>

<div class="code-block">
<div class="highlight"><pre><code class="lineno">1</code> <code class="cp">[</code><code class="mi">1</code><code class="p">,</code> <code class="mi">2</code><code class="p">,</code> <code class="mi">3</code><code class="p">,</code> <code class="mi">4</code><code class="p">,</code> <code class="mi">5</code><code class="cp">]</code><code class="p">.</code><code class="nx">map</code><code class="p">(</code><code class="kd">function</code> <code class="p">(</code><code class="nx">n</code><code class="p">)</code> <code class="p">{</code> 
<code class="lineno">2</code>   <code class="k">return</code> <code class="nx">n</code><code class="o">*</code><code class="nx">n</code> 
<code class="lineno">3</code> <code class="p">})</code>
<code class="lineno">4</code>   <code class="c1">//=&gt; </code><code class="cp">[</code><code class="mi">1</code><code class="p">,</code> <code class="mi">4</code><code class="p">,</code> <code class="mi">9</code><code class="p">,</code> <code class="mi">16</code><code class="p">,</code> <code class="mi">25</code><code class="cp">]</code><code class="c1"></code>
</pre></div>

</div>

<p>We say that <code>.map</code> <em>maps</em> its arguments over the receiver array’s elements. Or if you prefer, that it defines a mapping between its receiver and its result. Libraries like <a href="http://underscorejs.org">Underscore</a> provide a map <em>function</em>.<sup id="fnref-why"><a href="#fn-why" rel="footnote">22</a></sup> It usually works like this:</p>

<div class="code-block">
<div class="highlight"><pre><code class="lineno">1</code> <code class="nx">_</code><code class="p">.</code><code class="nx">map</code><code class="p">(</code><code class="cp">[</code><code class="mi">1</code><code class="p">,</code> <code class="mi">2</code><code class="p">,</code> <code class="mi">3</code><code class="p">,</code> <code class="mi">4</code><code class="p">,</code> <code class="mi">5</code><code class="cp">]</code><code class="p">,</code> <code class="kd">function</code> <code class="p">(</code><code class="nx">n</code><code class="p">)</code> <code class="p">{</code> 
<code class="lineno">2</code>   <code class="k">return</code> <code class="nx">n</code><code class="o">*</code><code class="nx">n</code> 
<code class="lineno">3</code> <code class="p">})</code>
<code class="lineno">4</code>   <code class="c1">//=&gt; </code><code class="cp">[</code><code class="mi">1</code><code class="p">,</code> <code class="mi">4</code><code class="p">,</code> <code class="mi">9</code><code class="p">,</code> <code class="mi">16</code><code class="p">,</code> <code class="mi">25</code><code class="cp">]</code><code class="c1"></code>
</pre></div>

</div>

<p>This recipe isn’t for <code>map</code>: It’s for <code>mapWith</code>, a function that wraps around <code>map</code> and turns any other function into a mapping. In concept, <code>mapWith</code> is very simple:<sup id="fnref-mapWith"><a href="#fn-mapWith" rel="footnote">23</a></sup></p>

<div class="code-block">
<div class="highlight"><pre><code class="lineno">1</code> <code class="kd">function</code> <code class="nx">mapWith</code> <code class="p">(</code><code class="nx">fn</code><code class="p">)</code> <code class="p">{</code>
<code class="lineno">2</code>   <code class="k">return</code> <code class="kd">function</code> <code class="p">(</code><code class="nx">list</code><code class="p">)</code> <code class="p">{</code>
<code class="lineno">3</code>     <code class="k">return</code> <code class="nb">Array</code><code class="p">.</code><code class="nx">prototype</code><code class="p">.</code><code class="nx">map</code><code class="p">.</code><code class="nx">call</code><code class="p">(</code><code class="nx">list</code><code class="p">,</code> <code class="kd">function</code> <code class="p">(</code><code class="nx">something</code><code class="p">)</code> <code class="p">{</code>
<code class="lineno">4</code>       <code class="k">return</code> <code class="nx">fn</code><code class="p">.</code><code class="nx">call</code><code class="p">(</code><code class="k">this</code><code class="p">,</code> <code class="nx">something</code><code class="p">);</code>
<code class="lineno">5</code>     <code class="p">});</code>
<code class="lineno">6</code>   <code class="p">};</code>
<code class="lineno">7</code> <code class="p">};</code>
</pre></div>

</div>

<p>Here’s the above code written using <code>mapWith</code>:</p>

<div class="code-block">
<div class="highlight"><pre><code class="lineno">1</code> <code class="kd">var</code> <code class="nx">squareMap</code> <code class="o">=</code> <code class="nx">mapWith</code><code class="p">(</code><code class="kd">function</code> <code class="p">(</code><code class="nx">n</code><code class="p">)</code> <code class="p">{</code> 
<code class="lineno">2</code>   <code class="k">return</code> <code class="nx">n</code><code class="o">*</code><code class="nx">n</code><code class="p">;</code>
<code class="lineno">3</code> <code class="p">});</code>
<code class="lineno">4</code> 
<code class="lineno">5</code> <code class="nx">squareMap</code><code class="p">(</code><code class="cp">[</code><code class="mi">1</code><code class="p">,</code> <code class="mi">2</code><code class="p">,</code> <code class="mi">3</code><code class="p">,</code> <code class="mi">4</code><code class="p">,</code> <code class="mi">5</code><code class="cp">]</code><code class="p">)</code>
<code class="lineno">6</code>   <code class="c1">//=&gt; </code><code class="cp">[</code><code class="mi">1</code><code class="p">,</code> <code class="mi">4</code><code class="p">,</code> <code class="mi">9</code><code class="p">,</code> <code class="mi">16</code><code class="p">,</code> <code class="mi">25</code><code class="cp">]</code><code class="c1"></code>
</pre></div>

</div>

<p>If we didn’t use <code>mapWith</code>, we’d have written something like this:</p>

<div class="code-block">
<div class="highlight"><pre><code class="lineno">1</code> <code class="kd">var</code> <code class="nx">squareMap</code> <code class="o">=</code> <code class="kd">function</code> <code class="p">(</code><code class="nx">array</code><code class="p">)</code> <code class="p">{</code>
<code class="lineno">2</code>   <code class="k">return</code> <code class="nb">Array</code><code class="p">.</code><code class="nx">prototype</code><code class="p">.</code><code class="nx">map</code><code class="p">.</code><code class="nx">call</code><code class="p">(</code><code class="nx">array</code><code class="p">,</code> <code class="kd">function</code> <code class="p">(</code><code class="nx">n</code><code class="p">)</code> <code class="p">{</code> 
<code class="lineno">3</code>     <code class="k">return</code> <code class="nx">n</code><code class="o">*</code><code class="nx">n</code><code class="p">;</code>
<code class="lineno">4</code>   <code class="p">});</code>
<code class="lineno">5</code> <code class="p">};</code>
</pre></div>

</div>

<p>And we’d do that every time we wanted to construct a method that maps an array to some result. <code>mapWith</code> is a very convenient abstraction for a very common pattern.</p>

<p><em><code>mapWith</code> was suggested by <a href="http://github.com/ludicast">ludicast</a></em></p>

<h3 id="flip">Flip</h3>

<p>When we wrote <a href="#mapWith">mapWith</a>, we wrote it like this:</p>

<div class="code-block">
<div class="highlight"><pre><code class="lineno">1</code> <code class="kd">function</code> <code class="nx">mapWith</code> <code class="p">(</code><code class="nx">fn</code><code class="p">)</code> <code class="p">{</code>
<code class="lineno">2</code>   <code class="k">return</code> <code class="kd">function</code> <code class="p">(</code><code class="nx">list</code><code class="p">)</code> <code class="p">{</code>
<code class="lineno">3</code>     <code class="k">return</code> <code class="nb">Array</code><code class="p">.</code><code class="nx">prototype</code><code class="p">.</code><code class="nx">map</code><code class="p">.</code><code class="nx">call</code><code class="p">(</code><code class="nx">list</code><code class="p">,</code> <code class="kd">function</code> <code class="p">(</code><code class="nx">something</code><code class="p">)</code> <code class="p">{</code>
<code class="lineno">4</code>       <code class="k">return</code> <code class="nx">fn</code><code class="p">.</code><code class="nx">call</code><code class="p">(</code><code class="k">this</code><code class="p">,</code> <code class="nx">something</code><code class="p">);</code>
<code class="lineno">5</code>     <code class="p">});</code>
<code class="lineno">6</code>   <code class="p">};</code>
<code class="lineno">7</code> <code class="p">};</code>
</pre></div>

</div>

<p>Let’s consider the case whether we have a <code>map</code> function of our own, perhaps from the <a href="http://allong.es">allong.es</a> library, perhaps from <a href="http://underscorejs.org">Underscore</a>. We could write our function something like this:</p>

<div class="code-block">
<div class="highlight"><pre><code class="lineno">1</code> <code class="kd">function</code> <code class="nx">mapWith</code> <code class="p">(</code><code class="nx">fn</code><code class="p">)</code> <code class="p">{</code>
<code class="lineno">2</code>   <code class="k">return</code> <code class="kd">function</code> <code class="p">(</code><code class="nx">list</code><code class="p">)</code> <code class="p">{</code>
<code class="lineno">3</code>     <code class="k">return</code> <code class="nx">map</code><code class="p">.</code><code class="nx">call</code><code class="p">(</code><code class="nx">list</code><code class="p">,</code> <code class="nx">fn</code><code class="p">);</code>
<code class="lineno">4</code>   <code class="p">};</code>
<code class="lineno">5</code> <code class="p">};</code>
</pre></div>

</div>

<p>Looking at this, we see we’re conflating two separate transformations. First, we’re reversing the order of arguments. You can see that if we simplify it:</p>

<div class="code-block">
<div class="highlight"><pre><code class="lineno">1</code> <code class="kd">function</code> <code class="nx">mapWith</code> <code class="p">(</code><code class="nx">fn</code><code class="p">,</code> <code class="nx">list</code><code class="p">)</code> <code class="p">{</code>
<code class="lineno">2</code>   <code class="k">return</code> <code class="nx">map</code><code class="p">.</code><code class="nx">call</code><code class="p">(</code><code class="nx">list</code><code class="p">,</code> <code class="nx">fn</code><code class="p">);</code>
<code class="lineno">3</code> <code class="p">};</code>
</pre></div>

</div>

<p>Second, we’re “currying” the function so that instead of defining a function that takes two arguments, it returns a function that takes the first argument and returns a function that takes the second argument and applies them both, like this:</p>

<div class="code-block">
<div class="highlight"><pre><code class="lineno">1</code> <code class="kd">function</code> <code class="nx">mapCurried</code> <code class="p">(</code><code class="nx">list</code><code class="p">)</code> <code class="p">{</code>
<code class="lineno">2</code>   <code class="k">return</code> <code class="kd">function</code> <code class="p">(</code><code class="nx">fn</code><code class="p">)</code> <code class="p">{</code>
<code class="lineno">3</code>     <code class="k">return</code> <code class="nx">map</code><code class="p">(</code><code class="nx">list</code><code class="p">,</code> <code class="nx">fn</code><code class="p">);</code>
<code class="lineno">4</code>   <code class="p">};</code>
<code class="lineno">5</code> <code class="p">};</code>
</pre></div>

</div>

<p>Let’s return to the implementation that does both:</p>

<div class="code-block">
<div class="highlight"><pre><code class="lineno">1</code> <code class="kd">function</code> <code class="nx">mapWith</code> <code class="p">(</code><code class="nx">fn</code><code class="p">)</code> <code class="p">{</code>
<code class="lineno">2</code>   <code class="k">return</code> <code class="kd">function</code> <code class="p">(</code><code class="nx">list</code><code class="p">)</code> <code class="p">{</code>
<code class="lineno">3</code>     <code class="k">return</code> <code class="nx">map</code><code class="p">.</code><code class="nx">call</code><code class="p">(</code><code class="nx">list</code><code class="p">,</code> <code class="nx">fn</code><code class="p">);</code>
<code class="lineno">4</code>   <code class="p">};</code>
<code class="lineno">5</code> <code class="p">};</code>
</pre></div>

</div>

<p>Now let’s put a wrapper around it:</p>

<div class="code-block">
<div class="highlight"><pre><code class="lineno">1</code> <code class="kd">function</code> <code class="nx">wrapper</code> <code class="p">()</code> <code class="p">{</code>
<code class="lineno">2</code>   <code class="k">return</code> <code class="kd">function</code> <code class="p">(</code><code class="nx">fn</code><code class="p">)</code> <code class="p">{</code>
<code class="lineno">3</code>     <code class="k">return</code> <code class="kd">function</code> <code class="p">(</code><code class="nx">list</code><code class="p">)</code> <code class="p">{</code>
<code class="lineno">4</code>       <code class="k">return</code> <code class="nx">map</code><code class="p">.</code><code class="nx">call</code><code class="p">(</code><code class="nx">list</code><code class="p">,</code> <code class="nx">fn</code><code class="p">);</code>
<code class="lineno">5</code>     <code class="p">};</code>
<code class="lineno">6</code>   <code class="p">};</code>
<code class="lineno">7</code> <code class="p">};</code>
</pre></div>

</div>

<p>Abstract the parameter names:</p>

<div class="code-block">
<div class="highlight"><pre><code class="lineno">1</code> <code class="kd">function</code> <code class="nx">wrapper</code> <code class="p">()</code> <code class="p">{</code>
<code class="lineno">2</code>   <code class="k">return</code> <code class="kd">function</code> <code class="p">(</code><code class="nx">first</code><code class="p">)</code> <code class="p">{</code>
<code class="lineno">3</code>     <code class="k">return</code> <code class="kd">function</code> <code class="p">(</code><code class="nx">second</code><code class="p">)</code> <code class="p">{</code>
<code class="lineno">4</code>       <code class="k">return</code> <code class="nx">map</code><code class="p">.</code><code class="nx">call</code><code class="p">(</code><code class="nx">second</code><code class="p">,</code> <code class="nx">first</code><code class="p">);</code>
<code class="lineno">5</code>     <code class="p">};</code>
<code class="lineno">6</code>   <code class="p">};</code>
<code class="lineno">7</code> <code class="p">};</code>
</pre></div>

</div>

<p>And finally, extract the function as a parameter:</p>

<div class="code-block">
<div class="highlight"><pre><code class="lineno">1</code> <code class="kd">function</code> <code class="nx">wrapper</code> <code class="p">(</code><code class="nx">fn</code><code class="p">)</code> <code class="p">{</code>
<code class="lineno">2</code>   <code class="k">return</code> <code class="kd">function</code> <code class="p">(</code><code class="nx">first</code><code class="p">)</code> <code class="p">{</code>
<code class="lineno">3</code>     <code class="k">return</code> <code class="kd">function</code> <code class="p">(</code><code class="nx">second</code><code class="p">)</code> <code class="p">{</code>
<code class="lineno">4</code>       <code class="k">return</code> <code class="nx">fn</code><code class="p">.</code><code class="nx">call</code><code class="p">(</code><code class="nx">second</code><code class="p">,</code> <code class="nx">first</code><code class="p">);</code>
<code class="lineno">5</code>     <code class="p">};</code>
<code class="lineno">6</code>   <code class="p">};</code>
<code class="lineno">7</code> <code class="p">};</code>
</pre></div>

</div>

<p>What we have now is a function that takes a function and “flips” the order of arguments around, then curries it:</p>

<div class="code-block">
<div class="highlight"><pre><code class="lineno">1</code> <code class="kd">function</code> <code class="nx">flip</code> <code class="p">(</code><code class="nx">fn</code><code class="p">)</code> <code class="p">{</code>
<code class="lineno">2</code>   <code class="k">return</code> <code class="kd">function</code> <code class="p">(</code><code class="nx">first</code><code class="p">)</code> <code class="p">{</code>
<code class="lineno">3</code>     <code class="k">return</code> <code class="kd">function</code> <code class="p">(</code><code class="nx">second</code><code class="p">)</code> <code class="p">{</code>
<code class="lineno">4</code>       <code class="k">return</code> <code class="nx">fn</code><code class="p">.</code><code class="nx">call</code><code class="p">(</code><code class="k">this</code><code class="p">,</code> <code class="nx">second</code><code class="p">,</code> <code class="nx">first</code><code class="p">);</code>
<code class="lineno">5</code>     <code class="p">};</code>
<code class="lineno">6</code>   <code class="p">};</code>
<code class="lineno">7</code> <code class="p">};</code>
</pre></div>

</div>

<p>This is gold. Consider how we define <a href="#mapWith">mapWith</a> now:</p>

<div class="code-block">
<div class="highlight"><pre><code class="lineno">1</code> <code class="n">var</code> <code class="n">mapWith</code> <code class="o">=</code> <code class="n">flip</code><code class="p">(</code><code class="n">map</code><code class="p">);</code>
</pre></div>

</div>

<p>Much nicer!</p>

<p>There’s one final decoration. Sometimes we’ll want to flip a function but retain the flexibility to call it with both parameters at once. No problem:</p>

<div class="code-block">
<div class="highlight"><pre><code class="lineno"> 1</code> <code class="kd">function</code> <code class="nx">flip</code> <code class="p">(</code><code class="nx">fn</code><code class="p">)</code> <code class="p">{</code>
<code class="lineno"> 2</code>   <code class="k">return</code> <code class="kd">function</code> <code class="p">(</code><code class="nx">first</code><code class="p">,</code> <code class="nx">second</code><code class="p">)</code> <code class="p">{</code>
<code class="lineno"> 3</code>     <code class="k">if</code> <code class="p">(</code><code class="nx">arguments</code><code class="p">.</code><code class="nx">length</code> <code class="o">===</code> <code class="mi">2</code><code class="p">)</code> <code class="p">{</code>
<code class="lineno"> 4</code>       <code class="k">return</code> <code class="nx">fn</code><code class="p">.</code><code class="nx">call</code><code class="p">(</code><code class="k">this</code><code class="p">,</code> <code class="nx">second</code><code class="p">,</code> <code class="nx">first</code><code class="p">);</code>
<code class="lineno"> 5</code>     <code class="p">}</code>
<code class="lineno"> 6</code>     <code class="k">else</code> <code class="p">{</code>
<code class="lineno"> 7</code>       <code class="k">return</code> <code class="kd">function</code> <code class="p">(</code><code class="nx">second</code><code class="p">)</code> <code class="p">{</code>
<code class="lineno"> 8</code>         <code class="k">return</code> <code class="nx">fn</code><code class="p">.</code><code class="nx">call</code><code class="p">(</code><code class="k">this</code><code class="p">,</code> <code class="nx">second</code><code class="p">,</code> <code class="nx">first</code><code class="p">);</code>
<code class="lineno"> 9</code>       <code class="p">};</code>
<code class="lineno">10</code>     <code class="p">};</code>
<code class="lineno">11</code>   <code class="p">};</code>
<code class="lineno">12</code> <code class="p">};</code>
</pre></div>

</div>

<p>Now you can call <code>mapWith(fn, list)</code> or <code>mapWith(fn)(list)</code>, your choice.</p>

<h3 id="extend">Extend</h3>

<p>It’s very common to want to “extend” an object by adding properties to it:</p>

<div class="code-block">
<div class="highlight"><pre><code class="lineno">1</code> <code class="n">var</code> <code class="n">inventory</code> <code class="o">=</code> <code class="p">{</code>
<code class="lineno">2</code>   <code class="nl">apples:</code> <code class="mi">12</code><code class="p">,</code>
<code class="lineno">3</code>   <code class="nl">oranges:</code> <code class="mi">12</code>
<code class="lineno">4</code> <code class="p">};</code>
<code class="lineno">5</code> 
<code class="lineno">6</code> <code class="n">inventory</code><code class="p">.</code><code class="n">bananas</code> <code class="o">=</code> <code class="mi">54</code><code class="p">;</code>
<code class="lineno">7</code> <code class="n">inventory</code><code class="p">.</code><code class="n">pears</code> <code class="o">=</code> <code class="mi">24</code><code class="p">;</code>
</pre></div>

</div>

<p>It’s also common to want to add a <a href="https://en.wikipedia.org/wiki/Object_copy#Shallow_copy">shallow copy</a> of the properties of one object to another:</p>

<div class="code-block">
<div class="highlight"><pre><code class="lineno">1</code>   <code class="k">for</code> <code class="p">(</code><code class="n">var</code> <code class="n">fruit</code> <code class="n">in</code> <code class="n">shipment</code><code class="p">)</code> <code class="p">{</code>
<code class="lineno">2</code>     <code class="n">inventory</code><code class="p">[</code><code class="n">fruit</code><code class="p">]</code> <code class="o">=</code> <code class="n">shipment</code><code class="p">[</code><code class="n">fruit</code><code class="p">]</code>
<code class="lineno">3</code>   <code class="p">}</code>
</pre></div>

</div>

<p>Both needs can be met with this recipe for <code>extend</code>:</p>

<div class="code-block">
<div class="highlight"><pre><code class="lineno"> 1</code> <code class="kd">var</code> <code class="nx">extend</code> <code class="o">=</code> <code class="nx">variadic</code><code class="p">(</code> <code class="kd">function</code> <code class="p">(</code><code class="nx">consumer</code><code class="p">,</code> <code class="nx">providers</code><code class="p">)</code> <code class="p">{</code>
<code class="lineno"> 2</code>   <code class="kd">var</code> <code class="nx">key</code><code class="p">,</code>
<code class="lineno"> 3</code>       <code class="nx">i</code><code class="p">,</code>
<code class="lineno"> 4</code>       <code class="nx">provider</code><code class="p">;</code>
<code class="lineno"> 5</code>   
<code class="lineno"> 6</code>   <code class="k">for</code> <code class="p">(</code><code class="nx">i</code> <code class="o">=</code> <code class="mi">0</code><code class="p">;</code> <code class="nx">i</code> <code class="o">&lt;</code> <code class="nx">providers</code><code class="p">.</code><code class="nx">length</code><code class="p">;</code> <code class="o">++</code><code class="nx">i</code><code class="p">)</code> <code class="p">{</code>
<code class="lineno"> 7</code>     <code class="nx">provider</code> <code class="o">=</code> <code class="nx">providers</code><code class="cp">[</code><code class="nx">i</code><code class="cp">]</code><code class="p">;</code>
<code class="lineno"> 8</code>     <code class="k">for</code> <code class="p">(</code><code class="nx">key</code> <code class="k">in</code> <code class="nx">provider</code><code class="p">)</code> <code class="p">{</code>
<code class="lineno"> 9</code>       <code class="k">if</code> <code class="p">(</code><code class="nx">provider</code><code class="p">.</code><code class="nx">hasOwnProperty</code><code class="p">(</code><code class="nx">key</code><code class="p">))</code> <code class="p">{</code>
<code class="lineno">10</code>         <code class="nx">consumer</code><code class="cp">[</code><code class="nx">key</code><code class="cp">]</code> <code class="o">=</code> <code class="nx">provider</code><code class="cp">[</code><code class="nx">key</code><code class="cp">]</code>
<code class="lineno">11</code>       <code class="p">}</code>
<code class="lineno">12</code>     <code class="p">}</code>
<code class="lineno">13</code>   <code class="p">}</code>
<code class="lineno">14</code>   <code class="k">return</code> <code class="nx">consumer</code>
<code class="lineno">15</code> <code class="p">});</code>
</pre></div>

</div>

<p>You can copy an object by extending an empty object:</p>

<div class="code-block">
<div class="highlight"><pre><code class="lineno">1</code> <code class="n">extend</code><code class="p">({},</code> <code class="p">{</code>
<code class="lineno">2</code>   <code class="nl">apples:</code> <code class="mi">12</code><code class="p">,</code>
<code class="lineno">3</code>   <code class="nl">oranges:</code> <code class="mi">12</code>
<code class="lineno">4</code> <code class="p">})</code>
<code class="lineno">5</code>   <code class="c1">//=&gt; { apples: 12, oranges: 12 }</code>
</pre></div>

</div>

<p>You can extend one object with another:</p>

<div class="code-block">
<div class="highlight"><pre><code class="lineno"> 1</code> <code class="n">var</code> <code class="n">inventory</code> <code class="o">=</code> <code class="p">{</code>
<code class="lineno"> 2</code>   <code class="nl">apples:</code> <code class="mi">12</code><code class="p">,</code>
<code class="lineno"> 3</code>   <code class="nl">oranges:</code> <code class="mi">12</code>
<code class="lineno"> 4</code> <code class="p">};</code>
<code class="lineno"> 5</code> 
<code class="lineno"> 6</code> <code class="n">var</code> <code class="n">shipment</code> <code class="o">=</code> <code class="p">{</code>
<code class="lineno"> 7</code>   <code class="nl">bananas:</code> <code class="mi">54</code><code class="p">,</code>
<code class="lineno"> 8</code>   <code class="nl">pears:</code> <code class="mi">24</code>
<code class="lineno"> 9</code> <code class="p">}</code>
<code class="lineno">10</code> 
<code class="lineno">11</code> <code class="n">extend</code><code class="p">(</code><code class="n">inventory</code><code class="p">,</code> <code class="n">shipment</code><code class="p">)</code>
<code class="lineno">12</code>   <code class="c1">//=&gt; { apples: 12,</code>
<code class="lineno">13</code>   <code class="c1">//     oranges: 12,</code>
<code class="lineno">14</code>   <code class="c1">//     bananas: 54,</code>
<code class="lineno">15</code>   <code class="c1">//     pears: 24 }</code>
</pre></div>

</div>

<p>And when we discuss prototypes, we will use <code>extend</code> to turn this:</p>

<div class="code-block">
<div class="highlight"><pre><code class="lineno"> 1</code> <code class="kd">var</code> <code class="nx">Queue</code> <code class="o">=</code> <code class="kd">function</code> <code class="p">()</code> <code class="p">{</code>
<code class="lineno"> 2</code>   <code class="k">this</code><code class="p">.</code><code class="nx">array</code> <code class="o">=</code> <code class="cp">[]</code><code class="p">;</code>
<code class="lineno"> 3</code>   <code class="k">this</code><code class="p">.</code><code class="nx">head</code> <code class="o">=</code> <code class="mi">0</code><code class="p">;</code>
<code class="lineno"> 4</code>   <code class="k">this</code><code class="p">.</code><code class="nx">tail</code> <code class="o">=</code> <code class="o">-</code><code class="mi">1</code>
<code class="lineno"> 5</code> <code class="p">};</code>
<code class="lineno"> 6</code>   
<code class="lineno"> 7</code> <code class="nx">Queue</code><code class="p">.</code><code class="nx">prototype</code><code class="p">.</code><code class="nx">pushTail</code> <code class="o">=</code> <code class="kd">function</code> <code class="p">(</code><code class="nx">value</code><code class="p">)</code> <code class="p">{</code>
<code class="lineno"> 8</code>   <code class="c1">// ...</code>
<code class="lineno"> 9</code> <code class="p">};</code>
<code class="lineno">10</code> <code class="nx">Queue</code><code class="p">.</code><code class="nx">prototype</code><code class="p">.</code><code class="nx">pullHead</code> <code class="o">=</code> <code class="kd">function</code> <code class="p">()</code> <code class="p">{</code>
<code class="lineno">11</code>   <code class="c1">// ...</code>
<code class="lineno">12</code> <code class="p">};</code>
<code class="lineno">13</code> <code class="nx">Queue</code><code class="p">.</code><code class="nx">prototype</code><code class="p">.</code><code class="nx">isEmpty</code> <code class="o">=</code> <code class="kd">function</code> <code class="p">()</code> <code class="p">{</code>
<code class="lineno">14</code>   <code class="c1">// ...</code>
<code class="lineno">15</code> <code class="p">}</code>
</pre></div>

</div>

<p>Into this:</p>

<div class="code-block">
<div class="highlight"><pre><code class="lineno"> 1</code> <code class="kd">var</code> <code class="nx">Queue</code> <code class="o">=</code> <code class="kd">function</code> <code class="p">()</code> <code class="p">{</code>
<code class="lineno"> 2</code>   <code class="nx">extend</code><code class="p">(</code><code class="k">this</code><code class="p">,</code> <code class="p">{</code>
<code class="lineno"> 3</code>     <code class="nx">array</code><code class="o">:</code> <code class="cp">[]</code><code class="p">,</code>
<code class="lineno"> 4</code>     <code class="nx">head</code><code class="o">:</code> <code class="mi">0</code><code class="p">,</code>
<code class="lineno"> 5</code>     <code class="nx">tail</code><code class="o">:</code> <code class="o">-</code><code class="mi">1</code>
<code class="lineno"> 6</code>   <code class="p">})</code>
<code class="lineno"> 7</code> <code class="p">};</code>
<code class="lineno"> 8</code>   
<code class="lineno"> 9</code> <code class="nx">extend</code><code class="p">(</code><code class="nx">Queue</code><code class="p">.</code><code class="nx">prototype</code><code class="p">,</code> <code class="p">{</code>
<code class="lineno">10</code>   <code class="nx">pushTail</code><code class="o">:</code> <code class="kd">function</code> <code class="p">(</code><code class="nx">value</code><code class="p">)</code> <code class="p">{</code>
<code class="lineno">11</code>     <code class="c1">// ...</code>
<code class="lineno">12</code>   <code class="p">},</code>
<code class="lineno">13</code>   <code class="nx">pullHead</code><code class="o">:</code> <code class="kd">function</code> <code class="p">()</code> <code class="p">{</code>
<code class="lineno">14</code>     <code class="c1">// ...</code>
<code class="lineno">15</code>   <code class="p">},</code>
<code class="lineno">16</code>   <code class="nx">isEmpty</code><code class="o">:</code> <code class="kd">function</code> <code class="p">()</code> <code class="p">{</code>
<code class="lineno">17</code>     <code class="c1">// ...</code>
<code class="lineno">18</code>   <code class="p">}</code>      
<code class="lineno">19</code> <code class="p">});</code>
</pre></div>

</div>

<h3 id="y">Why?</h3>

<p>This is the <a href="https://en.wikipedia.org/wiki/Fixed-point_combinator#Example_in_JavaScript" title="Call-by-value fixed-point combinator in JavaScript">canonical Y Combinator</a>:</p>

<div class="code-block">
<div class="highlight"><pre><code class="lineno"> 1</code> <code class="kd">function</code> <code class="nx">Y</code> <code class="p">(</code><code class="nx">f</code><code class="p">)</code> <code class="p">{</code>
<code class="lineno"> 2</code>   <code class="k">return</code> <code class="p">((</code><code class="kd">function</code> <code class="p">(</code><code class="nx">x</code><code class="p">)</code> <code class="p">{</code>
<code class="lineno"> 3</code>     <code class="k">return</code> <code class="nx">f</code><code class="p">(</code><code class="kd">function</code> <code class="p">(</code><code class="nx">v</code><code class="p">)</code> <code class="p">{</code>
<code class="lineno"> 4</code>       <code class="k">return</code> <code class="nx">x</code><code class="p">(</code><code class="nx">x</code><code class="p">)(</code><code class="nx">v</code><code class="p">);</code>
<code class="lineno"> 5</code>     <code class="p">});</code>
<code class="lineno"> 6</code>   <code class="p">})(</code><code class="kd">function</code> <code class="p">(</code><code class="nx">x</code><code class="p">)</code> <code class="p">{</code>
<code class="lineno"> 7</code>     <code class="k">return</code> <code class="nx">f</code><code class="p">(</code><code class="kd">function</code> <code class="p">(</code><code class="nx">v</code><code class="p">)</code> <code class="p">{</code>
<code class="lineno"> 8</code>       <code class="k">return</code> <code class="nx">x</code><code class="p">(</code><code class="nx">x</code><code class="p">)(</code><code class="nx">v</code><code class="p">);</code>
<code class="lineno"> 9</code>     <code class="p">});</code>
<code class="lineno">10</code>   <code class="p">}));</code>
<code class="lineno">11</code> <code class="p">}</code>
</pre></div>

</div>

<p>You use it like this:</p>

<div class="code-block">
<div class="highlight"><pre><code class="lineno">1</code> <code class="kd">var</code> <code class="nx">factorial</code> <code class="o">=</code> <code class="nx">Y</code><code class="p">(</code><code class="kd">function</code> <code class="p">(</code><code class="nx">fac</code><code class="p">)</code> <code class="p">{</code>
<code class="lineno">2</code>   <code class="k">return</code> <code class="kd">function</code> <code class="p">(</code><code class="nx">n</code><code class="p">)</code> <code class="p">{</code>
<code class="lineno">3</code>     <code class="k">return</code> <code class="p">(</code><code class="nx">n</code> <code class="o">==</code> <code class="mi">0</code> <code class="o">?</code> <code class="mi">1</code> <code class="o">:</code> <code class="nx">n</code> <code class="o">*</code> <code class="nx">fac</code><code class="p">(</code><code class="nx">n</code> <code class="o">-</code> <code class="mi">1</code><code class="p">));</code>
<code class="lineno">4</code>   <code class="p">}</code>
<code class="lineno">5</code> <code class="p">});</code>
<code class="lineno">6</code>  
<code class="lineno">7</code> <code class="nx">factorial</code><code class="p">(</code><code class="mi">5</code><code class="p">)</code>
<code class="lineno">8</code>   <code class="c1">//=&gt; 120</code>
</pre></div>

</div>

<p>Why? It enables you to make recursive functions without needing to bind a function to a name in an environment. This has little practical utility in JavaScript, but in combinatory logic it’s essential: With fixed-point combinators it’s possible to compute everything computable without binding names.</p>

<p>So again, why include the recipe? Well, besides all of the practical applications that combinators provide, there is this little thing called <em>The joy of working things out.</em></p>

<p>There are many explanations of the Y Combinator’s mechanism on the internet, but resist the temptation to read any of them: Work it out for yourself. Use it as an excuse to get familiar with your environment’s debugging facility. A friendly tip: Name some of the anonymous functions inside it to help you decipher stack traces.</p>

<p>Work things out for yourself. And once you’ve grokked that recipe, this recipe is for a Y Combinator that is a little more idiomatic. Work it out too:</p>

<div class="code-block">
<div class="highlight"><pre><code class="lineno"> 1</code> <code class="kd">function</code> <code class="nx">Y</code> <code class="p">(</code><code class="nx">fn</code><code class="p">)</code> <code class="p">{</code>
<code class="lineno"> 2</code>   <code class="kd">var</code> <code class="nx">f</code> <code class="o">=</code> <code class="kd">function</code> <code class="p">(</code><code class="nx">f</code><code class="p">)</code> <code class="p">{</code>
<code class="lineno"> 3</code>     <code class="k">return</code> <code class="kd">function</code> <code class="p">()</code> <code class="p">{</code>
<code class="lineno"> 4</code>       <code class="k">return</code> <code class="nx">fn</code><code class="p">.</code><code class="nx">apply</code><code class="p">(</code><code class="nx">f</code><code class="p">,</code> <code class="nx">arguments</code><code class="p">)</code>
<code class="lineno"> 5</code>     <code class="p">}</code>
<code class="lineno"> 6</code>   <code class="p">};</code>
<code class="lineno"> 7</code>   
<code class="lineno"> 8</code>   <code class="k">return</code> <code class="p">((</code><code class="kd">function</code> <code class="p">(</code><code class="nx">x</code><code class="p">)</code> <code class="p">{</code>
<code class="lineno"> 9</code>     <code class="k">return</code> <code class="nx">f</code><code class="p">(</code><code class="kd">function</code> <code class="p">(</code><code class="nx">v</code><code class="p">)</code> <code class="p">{</code>
<code class="lineno">10</code>       <code class="k">return</code> <code class="nx">x</code><code class="p">(</code><code class="nx">x</code><code class="p">)(</code><code class="nx">v</code><code class="p">);</code>
<code class="lineno">11</code>     <code class="p">});</code>
<code class="lineno">12</code>   <code class="p">})(</code><code class="kd">function</code> <code class="p">(</code><code class="nx">x</code><code class="p">)</code> <code class="p">{</code>
<code class="lineno">13</code>     <code class="k">return</code> <code class="nx">f</code><code class="p">(</code><code class="kd">function</code> <code class="p">(</code><code class="nx">v</code><code class="p">)</code> <code class="p">{</code>
<code class="lineno">14</code>       <code class="k">return</code> <code class="nx">x</code><code class="p">(</code><code class="nx">x</code><code class="p">)(</code><code class="nx">v</code><code class="p">);</code>
<code class="lineno">15</code>     <code class="p">});</code>
<code class="lineno">16</code>   <code class="p">}));</code>
<code class="lineno">17</code> <code class="p">}</code>
</pre></div>

</div>

<p>You use this version like this:</p>

<div class="code-block">
<div class="highlight"><pre><code class="lineno">1</code> <code class="kd">var</code> <code class="nx">factorial</code> <code class="o">=</code> <code class="nx">Y</code><code class="p">(</code><code class="kd">function</code> <code class="p">(</code><code class="nx">n</code><code class="p">)</code> <code class="p">{</code>
<code class="lineno">2</code>   <code class="k">return</code> <code class="p">(</code><code class="nx">n</code> <code class="o">==</code> <code class="mi">0</code> <code class="o">?</code> <code class="mi">1</code> <code class="o">:</code> <code class="nx">n</code> <code class="o">*</code> <code class="k">this</code><code class="p">(</code><code class="nx">n</code> <code class="o">-</code> <code class="mi">1</code><code class="p">));</code>
<code class="lineno">3</code> <code class="p">});</code>
<code class="lineno">4</code>  
<code class="lineno">5</code> <code class="nx">factorial</code><code class="p">(</code><code class="mi">5</code><code class="p">)</code>
</pre></div>

</div>

<p>There are certain cases involving nested recursive functions it cannot handle due to the ambiguity of <code>this</code>, and obviously it is useless as a method combination, but it is an interesting alternative to the <code>let</code> pattern.</p>

<h2 id="mutable">
<span class="section-number">6 </span>Stir the Allongé: Objects, Mutation, and State</h2>

<div class="image-with-caption center image-with-caption center">
  <img src="/site_images/javascript-allonge/coffee-spoons.jpg" alt="Life measured out by coffee spoons"><p class="caption">Life measured out by coffee spoons</p>
</div>

<p>So far, we have discussed what many call “pure functional” programming, where every expression is necessarily <a href="https://en.wikipedia.org/wiki/Idempotence">idempotent</a>, because we have no way of changing state within a program using the tools we have examined.</p>

<p>It’s time to change <em>everything</em>.</p>

<h3 id="encapsulation">Encapsulating State with Closures</h3>

<blockquote>
  <p>OOP to me means only messaging, local retention and protection and hiding of state-process, and extreme late-binding of all things.–<a href="http://userpage.fu-berlin.de/~ram/pub/pub_jf47ht81Ht/doc_kay_oop_en">Alan Kay</a></p>
</blockquote>

<p>We’re going to look at encapsulation using JavaScript’s functions and objects. We’re not going to call it object-oriented programming, mind you, because that would start a long debate. This is just plain encapsulation,<sup id="fnref-encapsulation"><a href="#fn-encapsulation" rel="footnote">24</a></sup> with a dash of information-hiding.</p>

<h4 id="leanpub-auto-what-is-hiding-of-state-process-and-why-does-it-matter">what is hiding of state-process, and why does it matter?</h4>

<blockquote>
  <p>In computer science, information hiding is the principle of segregation of the design decisions in a computer program that are most likely to change, thus protecting other parts of the program from extensive modification if the design decision is changed. The protection involves providing a stable interface which protects the remainder of the program from the implementation (the details that are most likely to change).</p>
</blockquote>

<blockquote>
  <p>Written another way, information hiding is the ability to prevent certain aspects of a class or software component from being accessible to its clients, using either programming language features (like private variables) or an explicit exporting policy.</p>
</blockquote>

<blockquote>
  <p>–<a href="https://en.wikipedia.org/wiki/Information_hiding" title="Information hiding">Wikipedia</a></p>
</blockquote>

<p>Consider a <a href="https://en.wikipedia.org/wiki/Stack_" title="data_structure">stack</a> data structure. There are three basic operations: Pushing a value onto the top (<code>push</code>), popping a value off the top (<code>pop</code>), and testing to see whether the stack is empty or not (<code>isEmpty</code>). These three operations are the stable interface.</p>

<p>Many stacks have an array for holding the contents of the stack. This is relatively stable. You could substitute a linked list, but in JavaScript, the array is highly efficient. You might need an index, you might not. You could grow and shrink the array, or you could allocate a fixed size and use an index to keep track of how much of the array is in use. The design choices for keeping track of the head of the list are often driven by performance considerations.</p>

<p>If you expose the implementation detail such as whether there is an index, sooner or later some programmer is going to find an advantage in using the index directly. For example, she may need to know the size of a stack. The ideal choice would be to add a <code>size</code> function that continues to hide the implementation. But she’s in a hurry, so she reads the <code>index</code> directly. Now her code is coupled to the existence of an index, so if we wish to change the implementation to grow and shrink the array, we will break her code.</p>

<p>The way to avoid this is to hide the array and index from other code and only expose the operations we have deemed stable. If and when someone needs to know the size of the stack, we’ll add a <code>size</code> function and expose it as well.</p>

<p>Hiding information (or “state”) is the design principle that allows us to limit the coupling between components of software.</p>

<h4 id="hiding-state">how do we hide state using javascript?</h4>

<p>We’ve been introduced to JavaScript’s objects, and it’s fairly easy to see that objects can be used to model what other programming languages call (variously) records, structs, frames, or what-have-you. And given that their elements are mutable, they can clearly model state.</p>

<p>Given an object that holds our state (an array and an index<sup id="fnref-length"><a href="#fn-length" rel="footnote">25</a></sup>), we can easily implement our three operations as functions. Bundling the functions with the state does not require any special “magic” features. JavaScript objects can have elements of any type, including functions:</p>

<div class="code-block">
<div class="highlight"><pre><code class="lineno"> 1</code> <code class="kd">var</code> <code class="nx">stack</code> <code class="o">=</code> <code class="p">(</code><code class="kd">function</code> <code class="p">()</code> <code class="p">{</code>
<code class="lineno"> 2</code>   <code class="kd">var</code> <code class="nx">obj</code> <code class="o">=</code> <code class="p">{</code>
<code class="lineno"> 3</code>     <code class="nx">array</code><code class="o">:</code> <code class="cp">[]</code><code class="p">,</code>
<code class="lineno"> 4</code>     <code class="nx">index</code><code class="o">:</code> <code class="o">-</code><code class="mi">1</code><code class="p">,</code>
<code class="lineno"> 5</code>     <code class="nx">push</code><code class="o">:</code> <code class="kd">function</code> <code class="p">(</code><code class="nx">value</code><code class="p">)</code> <code class="p">{</code>
<code class="lineno"> 6</code>       <code class="k">return</code> <code class="nx">obj</code><code class="p">.</code><code class="nx">array</code><code class="cp">[</code><code class="nx">obj.index</code> <code class="o">+=</code> <code class="mi">1</code><code class="cp">]</code> <code class="o">=</code> <code class="nx">value</code>
<code class="lineno"> 7</code>     <code class="p">},</code>
<code class="lineno"> 8</code>     <code class="nx">pop</code><code class="o">:</code> <code class="kd">function</code> <code class="p">()</code> <code class="p">{</code>
<code class="lineno"> 9</code>       <code class="kd">var</code> <code class="nx">value</code> <code class="o">=</code> <code class="nx">obj</code><code class="p">.</code><code class="nx">array</code><code class="cp">[</code><code class="nx">obj.index</code><code class="cp">]</code><code class="p">;</code>
<code class="lineno">10</code>       <code class="nx">obj</code><code class="p">.</code><code class="nx">array</code><code class="cp">[</code><code class="nx">obj.index</code><code class="cp">]</code> <code class="o">=</code> <code class="k">void</code> <code class="mi">0</code><code class="p">;</code>
<code class="lineno">11</code>       <code class="k">if</code> <code class="p">(</code><code class="nx">obj</code><code class="p">.</code><code class="nx">index</code> <code class="o">&gt;=</code> <code class="mi">0</code><code class="p">)</code> <code class="p">{</code> 
<code class="lineno">12</code>         <code class="nx">obj</code><code class="p">.</code><code class="nx">index</code> <code class="o">-=</code> <code class="mi">1</code> 
<code class="lineno">13</code>       <code class="p">}</code>
<code class="lineno">14</code>       <code class="k">return</code> <code class="nx">value</code>
<code class="lineno">15</code>     <code class="p">},</code>
<code class="lineno">16</code>     <code class="nx">isEmpty</code><code class="o">:</code> <code class="kd">function</code> <code class="p">()</code> <code class="p">{</code>
<code class="lineno">17</code>       <code class="k">return</code> <code class="nx">obj</code><code class="p">.</code><code class="nx">index</code> <code class="o">&lt;</code> <code class="mi">0</code>
<code class="lineno">18</code>     <code class="p">}</code>
<code class="lineno">19</code>   <code class="p">};</code>
<code class="lineno">20</code>   
<code class="lineno">21</code>   <code class="k">return</code> <code class="nx">obj</code><code class="p">;</code>
<code class="lineno">22</code> <code class="p">})();</code>
<code class="lineno">23</code> 
<code class="lineno">24</code> <code class="nx">stack</code><code class="p">.</code><code class="nx">isEmpty</code><code class="p">()</code>
<code class="lineno">25</code>   <code class="c1">//=&gt; true</code>
<code class="lineno">26</code> <code class="nx">stack</code><code class="p">.</code><code class="nx">push</code><code class="p">(</code><code class="s1">'hello'</code><code class="p">)</code>
<code class="lineno">27</code>   <code class="c1">//=&gt; 'hello'</code>
<code class="lineno">28</code> <code class="nx">stack</code><code class="p">.</code><code class="nx">push</code><code class="p">(</code><code class="s1">'JavaScript'</code><code class="p">)</code>
<code class="lineno">29</code>  <code class="c1">//=&gt; 'JavaScript'</code>
<code class="lineno">30</code> <code class="nx">stack</code><code class="p">.</code><code class="nx">isEmpty</code><code class="p">()</code>
<code class="lineno">31</code>   <code class="c1">//=&gt; false</code>
<code class="lineno">32</code> <code class="nx">stack</code><code class="p">.</code><code class="nx">pop</code><code class="p">()</code>
<code class="lineno">33</code>  <code class="c1">//=&gt; 'JavaScript'</code>
<code class="lineno">34</code> <code class="nx">stack</code><code class="p">.</code><code class="nx">pop</code><code class="p">()</code>
<code class="lineno">35</code>  <code class="c1">//=&gt; 'hello'</code>
<code class="lineno">36</code> <code class="nx">stack</code><code class="p">.</code><code class="nx">isEmpty</code><code class="p">()</code>
<code class="lineno">37</code>   <code class="c1">//=&gt; true</code>
</pre></div>

</div>

<h4 id="leanpub-auto-method-ology">method-ology</h4>

<p>In this text, we lurch from talking about “functions that belong to an object” to “methods.” Other languages may separate methods from functions very strictly, but in JavaScript every method is a function but not all functions are methods.</p>

<p>The view taken in this book is that a function is a method of an object if it belongs to that object and interacts with that object in some way. So the functions implementing the operations on the stack are all absolutely methods of the stack.</p>

<p>But these two wouldn’t be methods. Although they “belong” to an object, they don’t interact with it:</p>

<div class="code-block">
<div class="highlight"><pre><code class="lineno"> 1</code> <code class="p">{</code>
<code class="lineno"> 2</code>   <code class="nx">min</code><code class="o">:</code> <code class="kd">function</code> <code class="p">(</code><code class="nx">x</code><code class="p">,</code> <code class="nx">y</code><code class="p">)</code> <code class="p">{</code>
<code class="lineno"> 3</code>     <code class="k">if</code> <code class="p">(</code><code class="nx">x</code> <code class="o">&lt;</code> <code class="nx">y</code><code class="p">)</code> <code class="p">{</code>
<code class="lineno"> 4</code>       <code class="k">return</code> <code class="nx">x</code>
<code class="lineno"> 5</code>     <code class="p">}</code>
<code class="lineno"> 6</code>     <code class="k">else</code> <code class="p">{</code>
<code class="lineno"> 7</code>       <code class="k">return</code> <code class="nx">y</code>
<code class="lineno"> 8</code>     <code class="p">}</code>
<code class="lineno"> 9</code>   <code class="p">}</code> 
<code class="lineno">10</code>   <code class="nx">max</code><code class="o">:</code> <code class="kd">function</code> <code class="p">(</code><code class="nx">x</code><code class="p">,</code> <code class="nx">y</code><code class="p">)</code> <code class="p">{</code>
<code class="lineno">11</code>     <code class="k">if</code> <code class="p">(</code><code class="nx">x</code> <code class="o">&gt;</code> <code class="nx">y</code><code class="p">)</code> <code class="p">{</code>
<code class="lineno">12</code>       <code class="k">return</code> <code class="nx">x</code>
<code class="lineno">13</code>     <code class="p">}</code>
<code class="lineno">14</code>     <code class="k">else</code> <code class="p">{</code>
<code class="lineno">15</code>       <code class="k">return</code> <code class="nx">y</code>
<code class="lineno">16</code>     <code class="p">}</code>
<code class="lineno">17</code>   <code class="p">}</code> 
<code class="lineno">18</code> <code class="p">}</code>
</pre></div>

</div>

<h4 id="leanpub-auto-hiding-state">hiding state</h4>

<p>Our stack does bundle functions with data, but it doesn’t hide its state. “Foreign” code could interfere with its array or index. So how do we hide these? We already have a closure, let’s use it:</p>

<div class="code-block">
<div class="highlight"><pre><code class="lineno"> 1</code> <code class="kd">var</code> <code class="nx">stack</code> <code class="o">=</code> <code class="p">(</code><code class="kd">function</code> <code class="p">()</code> <code class="p">{</code>
<code class="lineno"> 2</code>   <code class="kd">var</code> <code class="nx">array</code> <code class="o">=</code> <code class="cp">[]</code><code class="p">,</code>
<code class="lineno"> 3</code>       <code class="nx">index</code> <code class="o">=</code> <code class="o">-</code><code class="mi">1</code><code class="p">;</code>
<code class="lineno"> 4</code>       
<code class="lineno"> 5</code>   <code class="k">return</code> <code class="p">{</code>
<code class="lineno"> 6</code>     <code class="nx">push</code><code class="o">:</code> <code class="kd">function</code> <code class="p">(</code><code class="nx">value</code><code class="p">)</code> <code class="p">{</code>
<code class="lineno"> 7</code>       <code class="nx">array</code><code class="cp">[</code><code class="nx">index</code> <code class="o">+=</code> <code class="mi">1</code><code class="cp">]</code> <code class="o">=</code> <code class="nx">value</code>
<code class="lineno"> 8</code>     <code class="p">},</code>
<code class="lineno"> 9</code>     <code class="nx">pop</code><code class="o">:</code> <code class="kd">function</code> <code class="p">()</code> <code class="p">{</code>
<code class="lineno">10</code>       <code class="kd">var</code> <code class="nx">value</code> <code class="o">=</code> <code class="nx">array</code><code class="cp">[</code><code class="nx">index</code><code class="cp">]</code><code class="p">;</code>
<code class="lineno">11</code>       <code class="k">if</code> <code class="p">(</code><code class="nx">index</code> <code class="o">&gt;=</code> <code class="mi">0</code><code class="p">)</code> <code class="p">{</code>
<code class="lineno">12</code>         <code class="nx">index</code> <code class="o">-=</code> <code class="mi">1</code>
<code class="lineno">13</code>       <code class="p">}</code>
<code class="lineno">14</code>       <code class="k">return</code> <code class="nx">value</code>
<code class="lineno">15</code>     <code class="p">},</code>
<code class="lineno">16</code>     <code class="nx">isEmpty</code><code class="o">:</code> <code class="kd">function</code> <code class="p">()</code> <code class="p">{</code>
<code class="lineno">17</code>       <code class="k">return</code> <code class="nx">index</code> <code class="o">&lt;</code> <code class="mi">0</code>
<code class="lineno">18</code>     <code class="p">}</code>
<code class="lineno">19</code>   <code class="p">}</code>
<code class="lineno">20</code> <code class="p">})();</code>
<code class="lineno">21</code> 
<code class="lineno">22</code> <code class="nx">stack</code><code class="p">.</code><code class="nx">isEmpty</code><code class="p">()</code>
<code class="lineno">23</code>   <code class="c1">//=&gt; true</code>
<code class="lineno">24</code> <code class="nx">stack</code><code class="p">.</code><code class="nx">push</code><code class="p">(</code><code class="s1">'hello'</code><code class="p">)</code>
<code class="lineno">25</code>   <code class="c1">//=&gt; 'hello'</code>
<code class="lineno">26</code> <code class="nx">stack</code><code class="p">.</code><code class="nx">push</code><code class="p">(</code><code class="s1">'JavaScript'</code><code class="p">)</code>
<code class="lineno">27</code>  <code class="c1">//=&gt; 'JavaScript'</code>
<code class="lineno">28</code> <code class="nx">stack</code><code class="p">.</code><code class="nx">isEmpty</code><code class="p">()</code>
<code class="lineno">29</code>   <code class="c1">//=&gt; false</code>
<code class="lineno">30</code> <code class="nx">stack</code><code class="p">.</code><code class="nx">pop</code><code class="p">()</code>
<code class="lineno">31</code>  <code class="c1">//=&gt; 'JavaScript'</code>
<code class="lineno">32</code> <code class="nx">stack</code><code class="p">.</code><code class="nx">pop</code><code class="p">()</code>
<code class="lineno">33</code>  <code class="c1">//=&gt; 'hello'</code>
<code class="lineno">34</code> <code class="nx">stack</code><code class="p">.</code><code class="nx">isEmpty</code><code class="p">()</code>
<code class="lineno">35</code>   <code class="c1">//=&gt; true</code>
</pre></div>

</div>

<div class="image-with-caption center image-with-caption center">
  <img src="/site_images/javascript-allonge/coffee-trees-1200.jpg" alt="Coffee DOES grow on trees"><p class="caption">Coffee DOES grow on trees</p>
</div>

<p>We don’t want to repeat this code every time we want a stack, so let’s make ourselves a “stack maker.” The temptation is to wrap what we have above in a function:</p>

<div class="code-block">
<div class="highlight"><pre><code class="lineno"> 1</code> <code class="kd">var</code> <code class="nx">StackMaker</code> <code class="o">=</code> <code class="kd">function</code> <code class="p">()</code> <code class="p">{</code>
<code class="lineno"> 2</code>   <code class="k">return</code> <code class="p">(</code><code class="kd">function</code> <code class="p">()</code> <code class="p">{</code>
<code class="lineno"> 3</code>     <code class="kd">var</code> <code class="nx">array</code> <code class="o">=</code> <code class="cp">[]</code><code class="p">,</code>
<code class="lineno"> 4</code>         <code class="nx">index</code> <code class="o">=</code> <code class="o">-</code><code class="mi">1</code><code class="p">;</code>
<code class="lineno"> 5</code>       
<code class="lineno"> 6</code>     <code class="k">return</code> <code class="p">{</code>
<code class="lineno"> 7</code>       <code class="nx">push</code><code class="o">:</code> <code class="kd">function</code> <code class="p">(</code><code class="nx">value</code><code class="p">)</code> <code class="p">{</code>
<code class="lineno"> 8</code>         <code class="nx">array</code><code class="cp">[</code><code class="nx">index</code> <code class="o">+=</code> <code class="mi">1</code><code class="cp">]</code> <code class="o">=</code> <code class="nx">value</code>
<code class="lineno"> 9</code>       <code class="p">},</code>
<code class="lineno">10</code>       <code class="nx">pop</code><code class="o">:</code> <code class="kd">function</code> <code class="p">()</code> <code class="p">{</code>
<code class="lineno">11</code>         <code class="kd">var</code> <code class="nx">value</code> <code class="o">=</code> <code class="nx">array</code><code class="cp">[</code><code class="nx">index</code><code class="cp">]</code><code class="p">;</code>
<code class="lineno">12</code>         <code class="k">if</code> <code class="p">(</code><code class="nx">index</code> <code class="o">&gt;=</code> <code class="mi">0</code><code class="p">)</code> <code class="p">{</code>
<code class="lineno">13</code>           <code class="nx">index</code> <code class="o">-=</code> <code class="mi">1</code>
<code class="lineno">14</code>         <code class="p">}</code>
<code class="lineno">15</code>         <code class="k">return</code> <code class="nx">value</code>
<code class="lineno">16</code>       <code class="p">},</code>
<code class="lineno">17</code>       <code class="nx">isEmpty</code><code class="o">:</code> <code class="kd">function</code> <code class="p">()</code> <code class="p">{</code>
<code class="lineno">18</code>         <code class="k">return</code> <code class="nx">index</code> <code class="o">&lt;</code> <code class="mi">0</code>
<code class="lineno">19</code>       <code class="p">}</code>
<code class="lineno">20</code>     <code class="p">}</code>
<code class="lineno">21</code>   <code class="p">})()</code> 
<code class="lineno">22</code> <code class="p">}</code>
</pre></div>

</div>

<p>But there’s an easier way :-)</p>

<div class="code-block">
<div class="highlight"><pre><code class="lineno"> 1</code> <code class="kd">var</code> <code class="nx">StackMaker</code> <code class="o">=</code> <code class="kd">function</code> <code class="p">()</code> <code class="p">{</code>
<code class="lineno"> 2</code>   <code class="kd">var</code> <code class="nx">array</code> <code class="o">=</code> <code class="cp">[]</code><code class="p">,</code>
<code class="lineno"> 3</code>       <code class="nx">index</code> <code class="o">=</code> <code class="o">-</code><code class="mi">1</code><code class="p">;</code>
<code class="lineno"> 4</code>       
<code class="lineno"> 5</code>   <code class="k">return</code> <code class="p">{</code>
<code class="lineno"> 6</code>     <code class="nx">push</code><code class="o">:</code> <code class="kd">function</code> <code class="p">(</code><code class="nx">value</code><code class="p">)</code> <code class="p">{</code>
<code class="lineno"> 7</code>       <code class="nx">array</code><code class="cp">[</code><code class="nx">index</code> <code class="o">+=</code> <code class="mi">1</code><code class="cp">]</code> <code class="o">=</code> <code class="nx">value</code>
<code class="lineno"> 8</code>     <code class="p">},</code>
<code class="lineno"> 9</code>     <code class="nx">pop</code><code class="o">:</code> <code class="kd">function</code> <code class="p">()</code> <code class="p">{</code>
<code class="lineno">10</code>       <code class="kd">var</code> <code class="nx">value</code> <code class="o">=</code> <code class="nx">array</code><code class="cp">[</code><code class="nx">index</code><code class="cp">]</code><code class="p">;</code>
<code class="lineno">11</code>       <code class="k">if</code> <code class="p">(</code><code class="nx">index</code> <code class="o">&gt;=</code> <code class="mi">0</code><code class="p">)</code> <code class="p">{</code>
<code class="lineno">12</code>         <code class="nx">index</code> <code class="o">-=</code> <code class="mi">1</code>
<code class="lineno">13</code>       <code class="p">}</code>
<code class="lineno">14</code>       <code class="k">return</code> <code class="nx">value</code>
<code class="lineno">15</code>     <code class="p">},</code>
<code class="lineno">16</code>     <code class="nx">isEmpty</code><code class="o">:</code> <code class="kd">function</code> <code class="p">()</code> <code class="p">{</code>
<code class="lineno">17</code>       <code class="k">return</code> <code class="nx">index</code> <code class="o">&lt;</code> <code class="mi">0</code>
<code class="lineno">18</code>     <code class="p">}</code>
<code class="lineno">19</code>   <code class="p">}</code>
<code class="lineno">20</code> <code class="p">};</code>
<code class="lineno">21</code> 
<code class="lineno">22</code> <code class="nx">stack</code> <code class="o">=</code> <code class="nx">StackMaker</code><code class="p">()</code>
</pre></div>

</div>

<p>Now we can make stacks freely, and we’ve hidden their internal data elements. We have methods and encapsulation, and we’ve built them out of JavaScript’s fundamental functions and objects. In <a href="#methods">Instances and Classes</a>, we’ll look at JavaScript’s support for class-oriented programming and some of the idioms that functions bring to the party.</p>

<div class="aside sidebarish">
  <h4 id="leanpub-auto-is-encapsulation-object-oriented">is encapsulation “object-oriented?”</h4>

  <p>We’ve built something with hidden internal state and “methods,” all without needing special <code>def</code> or <code>private</code> keywords. Mind you, we haven’t included all sorts of complicated mechanisms to support inheritance, mixins, and other opportunities for debating the nature of the One True Object-Oriented Style on the Internet.</p>

  <p>Then again, the key lesson experienced programmers repeat–although it often falls on deaf ears–is <a href="http://www.c2.com/cgi/wiki?CompositionInsteadOfInheritance">Composition instead of Inheritance</a>. So maybe we aren’t missing much.</p>

</div>

<h3 id="composition">Composition and Extension</h3>

<h4 id="leanpub-auto-composition-1">composition</h4>

<p>A deeply fundamental practice is to build components out of smaller components. The choice of how to divide a component into smaller components is called <em>factoring</em>, after the operation in number theory <sup id="fnref-refactoring"><a href="#fn-refactoring" rel="footnote">26</a></sup>. </p>

<p>The simplest and easiest way to build components out of smaller components in JavaScript is also the most obvious: Each component is a value, and the components can be put together into a single object or encapsulated with a closure.</p>

<p>Here’s an abstract “model” that supports undo and redo composed from a pair of stacks (see <a href="#encapsulation">Encapsulating State</a>) and a Plain Old JavaScript Object:</p>

<div class="code-block">
<div class="highlight"><pre><code class="lineno"> 1</code> <code class="c1">// helper function</code>
<code class="lineno"> 2</code> <code class="c1">//</code>
<code class="lineno"> 3</code> <code class="c1">// For production use, consider what to do about</code>
<code class="lineno"> 4</code> <code class="c1">// deep copies and own keys</code>
<code class="lineno"> 5</code> <code class="k">var</code> <code class="n">shallowCopy</code> <code class="o">=</code> <code class="k">function</code> <code class="p">(</code><code class="n">source</code><code class="p">)</code> <code class="p">{</code>
<code class="lineno"> 6</code>   <code class="k">var</code> <code class="n">dest</code> <code class="o">=</code> <code class="p">{},</code>
<code class="lineno"> 7</code>       <code class="n">key</code><code class="p">;</code>
<code class="lineno"> 8</code>       
<code class="lineno"> 9</code>   <code class="k">for</code> <code class="p">(</code><code class="n">key</code> <code class="n">in</code> <code class="n">source</code><code class="p">)</code> <code class="p">{</code>
<code class="lineno">10</code>     <code class="n">dest</code><code class="p">[</code><code class="n">key</code><code class="p">]</code> <code class="o">=</code> <code class="n">source</code><code class="p">[</code><code class="n">key</code><code class="p">]</code>
<code class="lineno">11</code>   <code class="p">}</code>
<code class="lineno">12</code>   <code class="k">return</code> <code class="n">dest</code>
<code class="lineno">13</code> <code class="p">};</code>
<code class="lineno">14</code> 
<code class="lineno">15</code> <code class="c1">// our model maker</code>
<code class="lineno">16</code> <code class="k">var</code> <code class="n">ModelMaker</code> <code class="o">=</code> <code class="k">function</code> <code class="p">(</code><code class="n">initialAttributes</code><code class="p">)</code> <code class="p">{</code>
<code class="lineno">17</code>   <code class="k">var</code> <code class="n">attributes</code> <code class="o">=</code> <code class="n">shallowCopy</code><code class="p">(</code><code class="n">initialAttributes</code> <code class="o">||</code> <code class="p">{}),</code> 
<code class="lineno">18</code>       <code class="n">undoStack</code> <code class="o">=</code> <code class="n">StackMaker</code><code class="p">(),</code> 
<code class="lineno">19</code>       <code class="n">redoStack</code> <code class="o">=</code> <code class="n">StackMaker</code><code class="p">(),</code>
<code class="lineno">20</code>       <code class="n">obj</code> <code class="o">=</code> <code class="p">{</code>
<code class="lineno">21</code>         <code class="nl">set:</code> <code class="k">function</code> <code class="p">(</code><code class="n">attrsToSet</code><code class="p">)</code> <code class="p">{</code>
<code class="lineno">22</code>           <code class="k">var</code> <code class="n">key</code><code class="p">;</code>
<code class="lineno">23</code>           
<code class="lineno">24</code>           <code class="n">undoStack</code><code class="p">.</code><code class="n">push</code><code class="p">(</code><code class="n">shallowCopy</code><code class="p">(</code><code class="n">attributes</code><code class="p">));</code>
<code class="lineno">25</code>           <code class="k">if</code> <code class="p">(</code><code class="o">!</code><code class="n">redoStack</code><code class="p">.</code><code class="n">isEmpty</code><code class="p">())</code> <code class="p">{</code>
<code class="lineno">26</code>             <code class="n">redoStack</code> <code class="o">=</code> <code class="n">StackMaker</code><code class="p">()</code>
<code class="lineno">27</code>           <code class="p">}</code>
<code class="lineno">28</code>           <code class="k">for</code> <code class="p">(</code><code class="n">key</code> <code class="n">in</code> <code class="p">(</code><code class="n">attrsToSet</code> <code class="o">||</code> <code class="p">{}))</code> <code class="p">{</code>
<code class="lineno">29</code>             <code class="n">attributes</code><code class="p">[</code><code class="n">key</code><code class="p">]</code> <code class="o">=</code> <code class="n">attrsToSet</code><code class="p">[</code><code class="n">key</code><code class="p">]</code>
<code class="lineno">30</code>           <code class="p">}</code>
<code class="lineno">31</code>           <code class="k">return</code> <code class="n">obj</code>
<code class="lineno">32</code>         <code class="p">},</code>
<code class="lineno">33</code>         <code class="nl">undo:</code> <code class="k">function</code> <code class="p">()</code> <code class="p">{</code>
<code class="lineno">34</code>           <code class="k">if</code> <code class="p">(</code><code class="o">!</code><code class="n">undoStack</code><code class="p">.</code><code class="n">isEmpty</code><code class="p">())</code> <code class="p">{</code>
<code class="lineno">35</code>             <code class="n">redoStack</code><code class="p">.</code><code class="n">push</code><code class="p">(</code><code class="n">shallowCopy</code><code class="p">(</code><code class="n">attributes</code><code class="p">));</code>
<code class="lineno">36</code>             <code class="n">attributes</code> <code class="o">=</code> <code class="n">undoStack</code><code class="p">.</code><code class="n">pop</code><code class="p">()</code>
<code class="lineno">37</code>           <code class="p">}</code>
<code class="lineno">38</code>           <code class="k">return</code> <code class="n">obj</code>
<code class="lineno">39</code>         <code class="p">},</code>
<code class="lineno">40</code>         <code class="nl">redo:</code> <code class="k">function</code> <code class="p">()</code> <code class="p">{</code>
<code class="lineno">41</code>           <code class="k">if</code> <code class="p">(</code><code class="o">!</code><code class="n">redoStack</code><code class="p">.</code><code class="n">isEmpty</code><code class="p">())</code> <code class="p">{</code>
<code class="lineno">42</code>             <code class="n">undoStack</code><code class="p">.</code><code class="n">push</code><code class="p">(</code><code class="n">shallowCopy</code><code class="p">(</code><code class="n">attributes</code><code class="p">));</code>
<code class="lineno">43</code>             <code class="n">attributes</code> <code class="o">=</code> <code class="n">redoStack</code><code class="p">.</code><code class="n">pop</code><code class="p">()</code>
<code class="lineno">44</code>           <code class="p">}</code>
<code class="lineno">45</code>           <code class="k">return</code> <code class="n">obj</code>
<code class="lineno">46</code>         <code class="p">},</code>
<code class="lineno">47</code>         <code class="nl">get:</code> <code class="k">function</code> <code class="p">(</code><code class="n">key</code><code class="p">)</code> <code class="p">{</code>
<code class="lineno">48</code>           <code class="k">return</code> <code class="n">attributes</code><code class="p">(</code><code class="n">key</code><code class="p">)</code>
<code class="lineno">49</code>         <code class="p">},</code>
<code class="lineno">50</code>         <code class="nl">has:</code> <code class="k">function</code> <code class="p">(</code><code class="n">key</code><code class="p">)</code> <code class="p">{</code>
<code class="lineno">51</code>           <code class="k">return</code> <code class="n">attributes</code><code class="p">.</code><code class="n">hasOwnProperty</code><code class="p">(</code><code class="n">key</code><code class="p">)</code>
<code class="lineno">52</code>         <code class="p">},</code>
<code class="lineno">53</code>         <code class="nl">attributes:</code> <code class="k">function</code> <code class="p">{</code>
<code class="lineno">54</code>           <code class="n">shallowCopy</code><code class="p">(</code><code class="n">attributes</code><code class="p">)</code>
<code class="lineno">55</code>         <code class="p">}</code>
<code class="lineno">56</code>       <code class="p">};</code>
<code class="lineno">57</code>     <code class="k">return</code> <code class="n">obj</code>
<code class="lineno">58</code>   <code class="p">};</code>
</pre></div>

</div>

<p>The techniques used for encapsulation work well with composition. In this case, we have a “model” that hides its attribute store as well as its implementation that is composed of an undo stack and redo stack.</p>

<h4 id="extensible">extension</h4>

<p>Another practice that many people consider fundamental is to <em>extend</em> an implementation. Meaning, they wish to define a new data structure in terms of adding new operations and semantics to an existing data structure.</p>

<p>Consider a <a href="http://duckduckgo.com/Queue_" title="data_structure">queue</a>:</p>

<div class="code-block">
<div class="highlight"><pre><code class="lineno"> 1</code> <code class="kd">var</code> <code class="nx">QueueMaker</code> <code class="o">=</code> <code class="kd">function</code> <code class="p">()</code> <code class="p">{</code>
<code class="lineno"> 2</code>   <code class="kd">var</code> <code class="nx">array</code> <code class="o">=</code> <code class="cp">[]</code><code class="p">,</code> 
<code class="lineno"> 3</code>       <code class="nx">head</code> <code class="o">=</code> <code class="mi">0</code><code class="p">,</code> 
<code class="lineno"> 4</code>       <code class="nx">tail</code> <code class="o">=</code> <code class="o">-</code><code class="mi">1</code><code class="p">;</code>
<code class="lineno"> 5</code>   <code class="k">return</code> <code class="p">{</code>
<code class="lineno"> 6</code>     <code class="nx">pushTail</code><code class="o">:</code> <code class="kd">function</code> <code class="p">(</code><code class="nx">value</code><code class="p">)</code> <code class="p">{</code>
<code class="lineno"> 7</code>       <code class="k">return</code> <code class="nx">array</code><code class="cp">[</code><code class="nx">tail</code> <code class="o">+=</code> <code class="mi">1</code><code class="cp">]</code> <code class="o">=</code> <code class="nx">value</code>
<code class="lineno"> 8</code>     <code class="p">},</code>
<code class="lineno"> 9</code>     <code class="nx">pullHead</code><code class="o">:</code> <code class="kd">function</code> <code class="p">()</code> <code class="p">{</code>
<code class="lineno">10</code>       <code class="kd">var</code> <code class="nx">value</code><code class="p">;</code>
<code class="lineno">11</code>       
<code class="lineno">12</code>       <code class="k">if</code> <code class="nx">tail</code> <code class="o">&gt;=</code> <code class="nx">head</code> <code class="p">{</code>
<code class="lineno">13</code>         <code class="nx">value</code> <code class="o">=</code> <code class="nx">array</code><code class="cp">[</code><code class="nx">head</code><code class="cp">]</code><code class="p">;</code>
<code class="lineno">14</code>         <code class="nx">array</code><code class="cp">[</code><code class="nx">head</code><code class="cp">]</code> <code class="o">=</code> <code class="k">void</code> <code class="mi">0</code><code class="p">;</code>
<code class="lineno">15</code>         <code class="nx">head</code> <code class="o">+=</code> <code class="mi">1</code><code class="p">;</code>
<code class="lineno">16</code>         <code class="k">return</code> <code class="nx">value</code>
<code class="lineno">17</code>       <code class="p">}</code>
<code class="lineno">18</code>     <code class="p">},</code>
<code class="lineno">19</code>     <code class="nx">isEmpty</code><code class="o">:</code> <code class="kd">function</code> <code class="p">()</code> <code class="p">{</code>
<code class="lineno">20</code>       <code class="k">return</code> <code class="nx">tail</code> <code class="o">&lt;</code> <code class="nx">head</code>
<code class="lineno">21</code>     <code class="p">}</code>
<code class="lineno">22</code>   <code class="p">}</code>
<code class="lineno">23</code> <code class="p">};</code>
</pre></div>

</div>

<p>Now we wish to create a <a href="https://en.wikipedia.org/wiki/Double-ended_queue" title="Double-ended queue">deque</a> by adding <code>pullTail</code> and <code>pushHead</code> operations to our queue.<sup id="fnref-wasa"><a href="#fn-wasa" rel="footnote">27</a></sup> Unfortunately, encapsulation prevents us from adding operations that interact with the hidden data structures.</p>

<p>This isn’t really surprising: The entire point of encapsulation is to create an opaque data structure that can only be manipulated through its public interface. The design goals of encapsulation and extension are always going to exist in tension.</p>

<p>Let’s “de-encapsulate” our queue:</p>

<div class="code-block">
<div class="highlight"><pre><code class="lineno"> 1</code> <code class="kd">var</code> <code class="nx">QueueMaker</code> <code class="o">=</code> <code class="kd">function</code> <code class="p">()</code> <code class="p">{</code>
<code class="lineno"> 2</code>   <code class="kd">var</code> <code class="nx">queue</code> <code class="o">=</code> <code class="p">{</code>
<code class="lineno"> 3</code>     <code class="nx">array</code><code class="o">:</code> <code class="cp">[]</code><code class="p">,</code> 
<code class="lineno"> 4</code>     <code class="nx">head</code><code class="o">:</code> <code class="mi">0</code><code class="p">,</code> 
<code class="lineno"> 5</code>     <code class="nx">tail</code><code class="o">:</code> <code class="o">-</code><code class="mi">1</code><code class="p">,</code>
<code class="lineno"> 6</code>     <code class="nx">pushTail</code><code class="o">:</code> <code class="kd">function</code> <code class="p">(</code><code class="nx">value</code><code class="p">)</code> <code class="p">{</code>
<code class="lineno"> 7</code>       <code class="k">return</code> <code class="nx">queue</code><code class="p">.</code><code class="nx">array</code><code class="cp">[</code><code class="kt">queue</code><code class="bp">.</code><code class="nx-Member">tail</code> <code class="o">+=</code> <code class="mi">1</code><code class="cp">]</code> <code class="o">=</code> <code class="nx">value</code>
<code class="lineno"> 8</code>     <code class="p">},</code>
<code class="lineno"> 9</code>     <code class="nx">pullHead</code><code class="o">:</code> <code class="kd">function</code> <code class="p">()</code> <code class="p">{</code>
<code class="lineno">10</code>       <code class="kd">var</code> <code class="nx">value</code><code class="p">;</code>
<code class="lineno">11</code>       
<code class="lineno">12</code>       <code class="k">if</code> <code class="p">(</code><code class="nx">queue</code><code class="p">.</code><code class="nx">tail</code> <code class="o">&gt;=</code> <code class="nx">queue</code><code class="p">.</code><code class="nx">head</code><code class="p">)</code> <code class="p">{</code>
<code class="lineno">13</code>         <code class="nx">value</code> <code class="o">=</code> <code class="nx">queue</code><code class="p">.</code><code class="nx">array</code><code class="cp">[</code><code class="kt">queue</code><code class="bp">.</code><code class="nb">head</code><code class="cp">]</code><code class="p">;</code>
<code class="lineno">14</code>         <code class="nx">queue</code><code class="p">.</code><code class="nx">array</code><code class="cp">[</code><code class="kt">queue</code><code class="bp">.</code><code class="nb">head</code><code class="cp">]</code> <code class="o">=</code> <code class="k">void</code> <code class="mi">0</code><code class="p">;</code>
<code class="lineno">15</code>         <code class="nx">queue</code><code class="p">.</code><code class="nx">head</code> <code class="o">+=</code> <code class="mi">1</code><code class="p">;</code>
<code class="lineno">16</code>         <code class="k">return</code> <code class="nx">value</code>
<code class="lineno">17</code>       <code class="p">}</code>
<code class="lineno">18</code>     <code class="p">},</code>
<code class="lineno">19</code>     <code class="nx">isEmpty</code><code class="o">:</code> <code class="kd">function</code> <code class="p">()</code> <code class="p">{</code>
<code class="lineno">20</code>       <code class="k">return</code> <code class="nx">queue</code><code class="p">.</code><code class="nx">tail</code> <code class="o">&lt;</code> <code class="nx">queue</code><code class="p">.</code><code class="nx">head</code>
<code class="lineno">21</code>     <code class="p">}</code>
<code class="lineno">22</code>   <code class="p">};</code>
<code class="lineno">23</code>   <code class="k">return</code> <code class="nx">queue</code>
<code class="lineno">24</code> <code class="p">};</code>
</pre></div>

</div>

<p>Now we can extend a queue into a deque:</p>

<div class="code-block">
<div class="highlight"><pre><code class="lineno"> 1</code> <code class="kd">var</code> <code class="nx">DequeMaker</code> <code class="o">=</code> <code class="kd">function</code> <code class="p">()</code> <code class="p">{</code>
<code class="lineno"> 2</code>   <code class="kd">var</code> <code class="nx">deque</code> <code class="o">=</code> <code class="nx">QueueMaker</code><code class="p">(),</code>
<code class="lineno"> 3</code>       <code class="nx">INCREMENT</code> <code class="o">=</code> <code class="mi">4</code><code class="p">;</code>
<code class="lineno"> 4</code>   
<code class="lineno"> 5</code>   <code class="k">return</code> <code class="nx">extend</code><code class="p">(</code><code class="nx">deque</code><code class="p">,</code> <code class="p">{</code>
<code class="lineno"> 6</code>     <code class="nx">size</code><code class="o">:</code> <code class="kd">function</code> <code class="p">()</code> <code class="p">{</code>
<code class="lineno"> 7</code>       <code class="k">return</code> <code class="nx">deque</code><code class="p">.</code><code class="nx">tail</code> <code class="o">-</code> <code class="nx">deque</code><code class="p">.</code><code class="nx">head</code> <code class="o">+</code> <code class="mi">1</code>
<code class="lineno"> 8</code>     <code class="p">},</code>
<code class="lineno"> 9</code>     <code class="nx">pullTail</code><code class="o">:</code> <code class="kd">function</code> <code class="p">()</code> <code class="p">{</code>
<code class="lineno">10</code>       <code class="kd">var</code> <code class="nx">value</code><code class="p">;</code>
<code class="lineno">11</code>       
<code class="lineno">12</code>       <code class="k">if</code> <code class="p">(</code><code class="o">!</code><code class="nx">deque</code><code class="p">.</code><code class="nx">isEmpty</code><code class="p">())</code> <code class="p">{</code>
<code class="lineno">13</code>         <code class="nx">value</code> <code class="o">=</code> <code class="nx">deque</code><code class="p">.</code><code class="nx">array</code><code class="cp">[</code><code class="nx">deque.tail</code><code class="cp">]</code><code class="p">;</code>
<code class="lineno">14</code>         <code class="nx">deque</code><code class="p">.</code><code class="nx">array</code><code class="cp">[</code><code class="nx">deque.tail</code><code class="cp">]</code> <code class="o">=</code> <code class="k">void</code> <code class="mi">0</code><code class="p">;</code>
<code class="lineno">15</code>         <code class="nx">deque</code><code class="p">.</code><code class="nx">tail</code> <code class="o">-=</code> <code class="mi">1</code><code class="p">;</code>
<code class="lineno">16</code>         <code class="k">return</code> <code class="nx">value</code>
<code class="lineno">17</code>       <code class="p">}</code>
<code class="lineno">18</code>     <code class="p">},</code>
<code class="lineno">19</code>     <code class="nx">pushHead</code><code class="o">:</code> <code class="kd">function</code> <code class="p">(</code><code class="nx">value</code><code class="p">)</code> <code class="p">{</code>
<code class="lineno">20</code>       <code class="kd">var</code> <code class="nx">i</code><code class="p">;</code>
<code class="lineno">21</code>       
<code class="lineno">22</code>       <code class="k">if</code> <code class="p">(</code><code class="nx">deque</code><code class="p">.</code><code class="nx">head</code> <code class="o">===</code> <code class="mi">0</code><code class="p">)</code> <code class="p">{</code>
<code class="lineno">23</code>         <code class="k">for</code> <code class="p">(</code><code class="nx">i</code> <code class="o">=</code> <code class="nx">deque</code><code class="p">.</code><code class="nx">tail</code><code class="p">;</code> <code class="nx">i</code> <code class="o">&lt;=</code> <code class="nx">deque</code><code class="p">.</code><code class="nx">head</code><code class="p">;</code> <code class="nx">i</code><code class="o">++</code><code class="p">)</code> <code class="p">{</code>
<code class="lineno">24</code>           <code class="nx">deque</code><code class="p">.</code><code class="nx">array</code><code class="cp">[</code><code class="nx">i</code> <code class="o">+</code> <code class="nx">INCREMENT</code><code class="cp">]</code> <code class="o">=</code> <code class="nx">deque</code><code class="p">.</code><code class="nx">array</code><code class="cp">[</code><code class="nx">i</code><code class="cp">]</code>
<code class="lineno">25</code>         <code class="p">}</code>
<code class="lineno">26</code>         <code class="nx">deque</code><code class="p">.</code><code class="nx">tail</code> <code class="o">+=</code> <code class="nx">INCREMENT</code>
<code class="lineno">27</code>         <code class="nx">deque</code><code class="p">.</code><code class="nx">head</code> <code class="o">+=</code> <code class="nx">INCREMENT</code>
<code class="lineno">28</code>       <code class="p">}</code>
<code class="lineno">29</code>       <code class="k">return</code> <code class="nx">deque</code><code class="p">.</code><code class="nx">array</code><code class="cp">[</code><code class="nx">deque.head</code> <code class="o">-=</code> <code class="mi">1</code><code class="cp">]</code> <code class="o">=</code> <code class="nx">value</code>
<code class="lineno">30</code>     <code class="p">}</code>
<code class="lineno">31</code>   <code class="p">})</code>
<code class="lineno">32</code> <code class="p">};</code>
</pre></div>

</div>

<p>Presto, we have reuse through extension, at the cost of encapsulation.</p>

<table class="tip sidebarish"><tbody><tr>
<td class="sidebar-icon">
      <img class="sidebar-image" src="/site_images/javascript-allonge/leanpub_key.png" alt="tip">
</td>
    <td>
      <p>Encapsulation and Extension exist in a natural state of tension. A program with elaborate encapsulation resists breakage but can also be difficult to refactor in other ways. Be mindful of when it’s best to Compose and when it’s best to Extend.</p>

    </td>
  </tr></tbody></table>
<h3 id="this">This and That</h3>

<p>Let’s take another look at <a href="#extensible">extensible objects</a>. Here’s a Queue:</p>

<div class="code-block">
<div class="highlight"><pre><code class="lineno"> 1</code> <code class="kd">var</code> <code class="nx">QueueMaker</code> <code class="o">=</code> <code class="kd">function</code> <code class="p">()</code> <code class="p">{</code>
<code class="lineno"> 2</code>   <code class="kd">var</code> <code class="nx">queue</code> <code class="o">=</code> <code class="p">{</code>
<code class="lineno"> 3</code>     <code class="nx">array</code><code class="o">:</code> <code class="cp">[]</code><code class="p">,</code> 
<code class="lineno"> 4</code>     <code class="nx">head</code><code class="o">:</code> <code class="mi">0</code><code class="p">,</code> 
<code class="lineno"> 5</code>     <code class="nx">tail</code><code class="o">:</code> <code class="o">-</code><code class="mi">1</code><code class="p">,</code>
<code class="lineno"> 6</code>     <code class="nx">pushTail</code><code class="o">:</code> <code class="kd">function</code> <code class="p">(</code><code class="nx">value</code><code class="p">)</code> <code class="p">{</code>
<code class="lineno"> 7</code>       <code class="k">return</code> <code class="nx">queue</code><code class="p">.</code><code class="nx">array</code><code class="cp">[</code><code class="kt">queue</code><code class="bp">.</code><code class="nx-Member">tail</code> <code class="o">+=</code> <code class="mi">1</code><code class="cp">]</code> <code class="o">=</code> <code class="nx">value</code>
<code class="lineno"> 8</code>     <code class="p">},</code>
<code class="lineno"> 9</code>     <code class="nx">pullHead</code><code class="o">:</code> <code class="kd">function</code> <code class="p">()</code> <code class="p">{</code>
<code class="lineno">10</code>       <code class="kd">var</code> <code class="nx">value</code><code class="p">;</code>
<code class="lineno">11</code>       
<code class="lineno">12</code>       <code class="k">if</code> <code class="p">(</code><code class="nx">queue</code><code class="p">.</code><code class="nx">tail</code> <code class="o">&gt;=</code> <code class="nx">queue</code><code class="p">.</code><code class="nx">head</code><code class="p">)</code> <code class="p">{</code>
<code class="lineno">13</code>         <code class="nx">value</code> <code class="o">=</code> <code class="nx">queue</code><code class="p">.</code><code class="nx">array</code><code class="cp">[</code><code class="kt">queue</code><code class="bp">.</code><code class="nb">head</code><code class="cp">]</code><code class="p">;</code>
<code class="lineno">14</code>         <code class="nx">queue</code><code class="p">.</code><code class="nx">array</code><code class="cp">[</code><code class="kt">queue</code><code class="bp">.</code><code class="nb">head</code><code class="cp">]</code> <code class="o">=</code> <code class="k">void</code> <code class="mi">0</code><code class="p">;</code>
<code class="lineno">15</code>         <code class="nx">queue</code><code class="p">.</code><code class="nx">head</code> <code class="o">+=</code> <code class="mi">1</code><code class="p">;</code>
<code class="lineno">16</code>         <code class="k">return</code> <code class="nx">value</code>
<code class="lineno">17</code>       <code class="p">}</code>
<code class="lineno">18</code>     <code class="p">},</code>
<code class="lineno">19</code>     <code class="nx">isEmpty</code><code class="o">:</code> <code class="kd">function</code> <code class="p">()</code> <code class="p">{</code>
<code class="lineno">20</code>       <code class="k">return</code> <code class="nx">queue</code><code class="p">.</code><code class="nx">tail</code> <code class="o">&lt;</code> <code class="nx">queue</code><code class="p">.</code><code class="nx">head</code>
<code class="lineno">21</code>     <code class="p">}</code>
<code class="lineno">22</code>   <code class="p">};</code>
<code class="lineno">23</code>   <code class="k">return</code> <code class="nx">queue</code>
<code class="lineno">24</code> <code class="p">};</code>
<code class="lineno">25</code> 
<code class="lineno">26</code> <code class="nx">queue</code> <code class="o">=</code> <code class="nx">QueueMaker</code><code class="p">()</code>
<code class="lineno">27</code> <code class="nx">queue</code><code class="p">.</code><code class="nx">pushTail</code><code class="p">(</code><code class="s1">'Hello'</code><code class="p">)</code>
<code class="lineno">28</code> <code class="nx">queue</code><code class="p">.</code><code class="nx">pushTail</code><code class="p">(</code><code class="s1">'JavaScript'</code><code class="p">)</code>
</pre></div>

</div>

<p>Let’s make a copy of our queue using the <code>extend</code> recipe:</p>

<div class="code-block">
<div class="highlight"><pre><code class="lineno">1</code> <code class="n">copyOfQueue</code> <code class="o">=</code> <code class="n">extend</code><code class="p">({},</code> <code class="n">queue</code><code class="p">);</code>
<code class="lineno">2</code> 
<code class="lineno">3</code> <code class="n">queue</code> <code class="o">!==</code> <code class="n">copyOfQueue</code>
<code class="lineno">4</code>   <code class="c1">//=&gt; true</code>
</pre></div>

</div>

<p>Wait a second. We know that array values are references. So it probably copied a reference to the original array. Let’s make a copy of the array as well:</p>

<div class="code-block">
<div class="highlight"><pre><code class="lineno">1</code> <code class="n">copyOfQueue</code><code class="p">.</code><code class="n">array</code> <code class="o">=</code> <code class="p">[];</code>
<code class="lineno">2</code> <code class="k">for</code> <code class="p">(</code><code class="n">var</code> <code class="n">i</code> <code class="o">=</code> <code class="mi">0</code><code class="p">;</code> <code class="n">i</code> <code class="o">&lt;</code> <code class="mi">2</code><code class="p">;</code> <code class="o">++</code><code class="n">i</code><code class="p">)</code> <code class="p">{</code>
<code class="lineno">3</code>   <code class="n">copyOfQueue</code><code class="p">.</code><code class="n">array</code><code class="p">[</code><code class="n">i</code><code class="p">]</code> <code class="o">=</code> <code class="n">queue</code><code class="p">.</code><code class="n">array</code><code class="p">[</code><code class="n">i</code><code class="p">]</code>
<code class="lineno">4</code> <code class="p">}</code>
</pre></div>

</div>

<p>Now let’s pull the head off the original:</p>

<div class="code-block">
<div class="highlight"><pre><code class="lineno">1</code> <code class="n">queue</code><code class="p">.</code><code class="n">pullHead</code><code class="p">()</code>
<code class="lineno">2</code>   <code class="c1">//=&gt; 'Hello'</code>
</pre></div>

</div>

<p>If we’ve copied everything properly, we should get the exact same result when we pull the head off the copy:</p>

<div class="code-block">
<div class="highlight"><pre><code class="lineno">1</code> <code class="n">copyOfQueue</code><code class="p">.</code><code class="n">pullHead</code><code class="p">()</code>
<code class="lineno">2</code>   <code class="c1">//=&gt; 'JavaScript'</code>
</pre></div>

</div>

<p>What!? Even though we carefully made a copy of the array to prevent aliasing, it seems that our two queues behave like aliases of each other. The problem is that while we’ve carefully copied our array and other elements over, <em>the closures all share the same environment</em>, and therefore the functions in <code>copyOfQueue</code> all operate on the first queue’s private data, not on the copies.</p>

<div class="aside sidebarish">
  <p>This is a general issue with closures. Closures couple functions to environments, and that makes them very elegant in the small, and very handy for making opaque data structures. Alas, their strength in the small is their weakness in the large. When you’re trying to make reusable components, this coupling is sometimes a hindrance.</p>

</div>

<p>Let’s take an impossibly optimistic flight of fancy:</p>

<div class="code-block">
<div class="highlight"><pre><code class="lineno"> 1</code> <code class="kd">var</code> <code class="nx">AmnesiacQueueMaker</code> <code class="o">=</code> <code class="kd">function</code> <code class="p">()</code> <code class="p">{</code>
<code class="lineno"> 2</code>   <code class="k">return</code> <code class="p">{</code>
<code class="lineno"> 3</code>     <code class="nx">array</code><code class="o">:</code> <code class="cp">[]</code><code class="p">,</code> 
<code class="lineno"> 4</code>     <code class="nx">head</code><code class="o">:</code> <code class="mi">0</code><code class="p">,</code> 
<code class="lineno"> 5</code>     <code class="nx">tail</code><code class="o">:</code> <code class="o">-</code><code class="mi">1</code><code class="p">,</code>
<code class="lineno"> 6</code>     <code class="nx">pushTail</code><code class="o">:</code> <code class="kd">function</code> <code class="p">(</code><code class="nx">myself</code><code class="p">,</code> <code class="nx">value</code><code class="p">)</code> <code class="p">{</code>
<code class="lineno"> 7</code>       <code class="k">return</code> <code class="nx">myself</code><code class="p">.</code><code class="nx">array</code><code class="cp">[</code><code class="nx">myself.tail</code> <code class="o">+=</code> <code class="mi">1</code><code class="cp">]</code> <code class="o">=</code> <code class="nx">value</code>
<code class="lineno"> 8</code>     <code class="p">},</code>
<code class="lineno"> 9</code>     <code class="nx">pullHead</code><code class="o">:</code> <code class="kd">function</code> <code class="p">(</code><code class="nx">myself</code><code class="p">)</code> <code class="p">{</code>
<code class="lineno">10</code>       <code class="kd">var</code> <code class="nx">value</code><code class="p">;</code>
<code class="lineno">11</code>       
<code class="lineno">12</code>       <code class="k">if</code> <code class="p">(</code><code class="nx">myself</code><code class="p">.</code><code class="nx">tail</code> <code class="o">&gt;=</code> <code class="nx">myself</code><code class="p">.</code><code class="nx">head</code><code class="p">)</code> <code class="p">{</code>
<code class="lineno">13</code>         <code class="nx">value</code> <code class="o">=</code> <code class="nx">myself</code><code class="p">.</code><code class="nx">array</code><code class="cp">[</code><code class="nx">myself.head</code><code class="cp">]</code><code class="p">;</code>
<code class="lineno">14</code>         <code class="nx">myself</code><code class="p">.</code><code class="nx">array</code><code class="cp">[</code><code class="nx">myself.head</code><code class="cp">]</code> <code class="o">=</code> <code class="k">void</code> <code class="mi">0</code><code class="p">;</code>
<code class="lineno">15</code>         <code class="nx">myself</code><code class="p">.</code><code class="nx">head</code> <code class="o">+=</code> <code class="mi">1</code><code class="p">;</code>
<code class="lineno">16</code>         <code class="k">return</code> <code class="nx">value</code>
<code class="lineno">17</code>       <code class="p">}</code>
<code class="lineno">18</code>     <code class="p">},</code>
<code class="lineno">19</code>     <code class="nx">isEmpty</code><code class="o">:</code> <code class="kd">function</code> <code class="p">(</code><code class="nx">myself</code><code class="p">)</code> <code class="p">{</code>
<code class="lineno">20</code>       <code class="k">return</code> <code class="nx">myself</code><code class="p">.</code><code class="nx">tail</code> <code class="o">&lt;</code> <code class="nx">myself</code><code class="p">.</code><code class="nx">head</code>
<code class="lineno">21</code>     <code class="p">}</code>
<code class="lineno">22</code>   <code class="p">}</code>
<code class="lineno">23</code> <code class="p">};</code>
<code class="lineno">24</code> 
<code class="lineno">25</code> <code class="nx">queueWithAmnesia</code> <code class="o">=</code> <code class="nx">AmnesiacQueueMaker</code><code class="p">();</code>
<code class="lineno">26</code> <code class="nx">queueWithAmnesia</code><code class="p">.</code><code class="nx">pushTail</code><code class="p">(</code><code class="nx">queueWithAmnesia</code><code class="p">,</code> <code class="s1">'Hello'</code><code class="p">);</code>
<code class="lineno">27</code> <code class="nx">queueWithAmnesia</code><code class="p">.</code><code class="nx">pushTail</code><code class="p">(</code><code class="nx">queueWithAmnesia</code><code class="p">,</code> <code class="s1">'JavaScript'</code><code class="p">)</code>
</pre></div>

</div>

<p>The <code>AmnesiacQueueMaker</code> makes queues with amnesia: They don’t know who they are, so every time we invoke one of their functions, we have to tell them who they are. You can work out the implications for copying queues as a thought experiment: We don’t have to worry about environments, because every function operates on the queue you pass in.</p>

<p>The killer drawback, of course, is making sure we are always passing the correct queue in every time we invoke a function. What to do?</p>

<h4 id="leanpub-auto-whats-all-this">what’s all <code>this</code>?</h4>

<p>Any time we must do the same repetitive thing over and over and over again, we industrial humans try to build a machine to do it for us. JavaScript is one such machine:</p>

<div class="code-block">
<div class="highlight"><pre><code class="lineno"> 1</code> <code class="nx">BanksQueueMaker</code> <code class="o">=</code> <code class="kd">function</code> <code class="p">()</code> <code class="p">{</code>
<code class="lineno"> 2</code>   <code class="k">return</code> <code class="p">{</code>
<code class="lineno"> 3</code>     <code class="nx">array</code><code class="o">:</code> <code class="cp">[]</code><code class="p">,</code> 
<code class="lineno"> 4</code>     <code class="nx">head</code><code class="o">:</code> <code class="mi">0</code><code class="p">,</code> 
<code class="lineno"> 5</code>     <code class="nx">tail</code><code class="o">:</code> <code class="o">-</code><code class="mi">1</code><code class="p">,</code>
<code class="lineno"> 6</code>     <code class="nx">pushTail</code><code class="o">:</code> <code class="kd">function</code> <code class="p">(</code><code class="nx">value</code><code class="p">)</code> <code class="p">{</code>
<code class="lineno"> 7</code>       <code class="k">return</code> <code class="k">this</code><code class="p">.</code><code class="nx">array</code><code class="cp">[</code><code class="nx">this.tail</code> <code class="o">+=</code> <code class="mi">1</code><code class="cp">]</code> <code class="o">=</code> <code class="nx">value</code>
<code class="lineno"> 8</code>     <code class="p">},</code>
<code class="lineno"> 9</code>     <code class="nx">pullHead</code><code class="o">:</code> <code class="kd">function</code> <code class="p">()</code> <code class="p">{</code>
<code class="lineno">10</code>       <code class="kd">var</code> <code class="nx">value</code><code class="p">;</code>
<code class="lineno">11</code>       
<code class="lineno">12</code>       <code class="k">if</code> <code class="p">(</code><code class="k">this</code><code class="p">.</code><code class="nx">tail</code> <code class="o">&gt;=</code> <code class="k">this</code><code class="p">.</code><code class="nx">head</code><code class="p">)</code> <code class="p">{</code>
<code class="lineno">13</code>         <code class="nx">value</code> <code class="o">=</code> <code class="k">this</code><code class="p">.</code><code class="nx">array</code><code class="cp">[</code><code class="nx">this.head</code><code class="cp">]</code><code class="p">;</code>
<code class="lineno">14</code>         <code class="k">this</code><code class="p">.</code><code class="nx">array</code><code class="cp">[</code><code class="nx">this.head</code><code class="cp">]</code> <code class="o">=</code> <code class="k">void</code> <code class="mi">0</code><code class="p">;</code>
<code class="lineno">15</code>         <code class="k">this</code><code class="p">.</code><code class="nx">head</code> <code class="o">+=</code> <code class="mi">1</code><code class="p">;</code>
<code class="lineno">16</code>         <code class="k">return</code> <code class="nx">value</code>
<code class="lineno">17</code>       <code class="p">}</code>
<code class="lineno">18</code>     <code class="p">},</code>
<code class="lineno">19</code>     <code class="nx">isEmpty</code><code class="o">:</code> <code class="kd">function</code> <code class="p">()</code> <code class="p">{</code>
<code class="lineno">20</code>       <code class="k">return</code> <code class="k">this</code><code class="p">.</code><code class="nx">tail</code> <code class="o">&lt;</code> <code class="k">this</code><code class="p">.</code><code class="nx">head</code>
<code class="lineno">21</code>     <code class="p">}</code>
<code class="lineno">22</code>   <code class="p">}</code>
<code class="lineno">23</code> <code class="p">};</code>
<code class="lineno">24</code> 
<code class="lineno">25</code> <code class="nx">banksQueue</code> <code class="o">=</code> <code class="nx">BanksQueueMaker</code><code class="p">();</code>
<code class="lineno">26</code> <code class="nx">banksQueue</code><code class="p">.</code><code class="nx">pushTail</code><code class="p">(</code><code class="s1">'Hello'</code><code class="p">);</code>
<code class="lineno">27</code> <code class="nx">banksQueue</code><code class="p">.</code><code class="nx">pushTail</code><code class="p">(</code><code class="s1">'JavaScript'</code><code class="p">)</code> 
</pre></div>

</div>

<p>Every time you invoke a function that is a member of an object, JavaScript binds that object to the name <code>this</code> in the environment of the function just as if it was an argument.<sup id="fnref-this"><a href="#fn-this" rel="footnote">28</a></sup> Now we can easily make copies:</p>

<div class="code-block">
<div class="highlight"><pre><code class="lineno"> 1</code> <code class="n">copyOfQueue</code> <code class="o">=</code> <code class="n">extend</code><code class="p">({},</code> <code class="n">banksQueue</code><code class="p">)</code>
<code class="lineno"> 2</code> <code class="n">copyOfQueue</code><code class="p">.</code><code class="n">array</code> <code class="o">=</code> <code class="p">[]</code>
<code class="lineno"> 3</code> <code class="k">for</code> <code class="p">(</code><code class="n">var</code> <code class="n">i</code> <code class="o">=</code> <code class="mi">0</code><code class="p">;</code> <code class="n">i</code> <code class="o">&lt;</code> <code class="mi">2</code><code class="p">;</code> <code class="o">++</code><code class="n">i</code><code class="p">)</code> <code class="p">{</code>
<code class="lineno"> 4</code>   <code class="n">copyOfQueue</code><code class="p">.</code><code class="n">array</code><code class="p">[</code><code class="n">i</code><code class="p">]</code> <code class="o">=</code> <code class="n">banksQueue</code><code class="p">.</code><code class="n">array</code><code class="p">[</code><code class="n">i</code><code class="p">]</code>
<code class="lineno"> 5</code> <code class="p">}</code>
<code class="lineno"> 6</code>   
<code class="lineno"> 7</code> <code class="n">banksQueue</code><code class="p">.</code><code class="n">pullHead</code><code class="p">()</code>
<code class="lineno"> 8</code>   <code class="c1">//=&gt; 'Hello'</code>
<code class="lineno"> 9</code> 
<code class="lineno">10</code> <code class="n">copyOfQueue</code><code class="p">.</code><code class="n">pullHead</code><code class="p">()</code>
<code class="lineno">11</code>   <code class="c1">//=&gt; 'Hello'</code>
</pre></div>

</div>

<p>Presto, we now have a way to copy arrays. By getting rid of the closure and taking advantage of <code>this</code>, we have functions that are more easily portable between objects, and the code is simpler as well.</p>

<p>There is more to <code>this</code> than we’ve discussed here. We’ll explore things in more detail later, in <a href="#context">What Context Applies When We Call a Function?</a>.</p>

<table class="tip sidebarish"><tbody><tr>
<td class="sidebar-icon">
      <img class="sidebar-image" src="/site_images/javascript-allonge/leanpub_key.png" alt="tip">
</td>
    <td>
      <p>Closures tightly couple functions to the environments where they are created limiting their flexibility. Using <code>this</code> alleviates the coupling. Copying objects is but one example of where that flexibility is needed.</p>

    </td>
  </tr></tbody></table>
<h3 id="context">What Context Applies When We Call a Function?</h3>

<p>In <a href="#this">This and That</a>, we learned that when a function is called as an object method, the name <code>this</code> is bound in its environment to the object acting as a “receiver.” For example:</p>

<div class="code-block">
<div class="highlight"><pre><code class="lineno">1</code> <code class="kd">var</code> <code class="nx">someObject</code> <code class="o">=</code> <code class="p">{</code>
<code class="lineno">2</code>   <code class="nx">returnMyThis</code><code class="o">:</code> <code class="kd">function</code> <code class="p">()</code> <code class="p">{</code>
<code class="lineno">3</code>     <code class="k">return</code> <code class="k">this</code><code class="p">;</code>
<code class="lineno">4</code>   <code class="p">}</code>
<code class="lineno">5</code> <code class="p">};</code>
<code class="lineno">6</code> 
<code class="lineno">7</code> <code class="nx">someObject</code><code class="p">.</code><code class="nx">returnMyThis</code><code class="p">()</code> <code class="o">===</code> <code class="nx">someObject</code>
<code class="lineno">8</code>   <code class="c1">//=&gt; true</code>
</pre></div>

</div>

<p>We’ve constructed a method that returns whatever value is bound to <code>this</code> when it is called. It returns the object when called, just as described.</p>

<h4 id="leanpub-auto-its-all-about-the-way-the-function-is-called">it’s all about the way the function is called</h4>

<p>JavaScript programmers talk about functions having a “context” when being called. <code>this</code> is bound to the context.<sup id="fnref-toobad"><a href="#fn-toobad" rel="footnote">29</a></sup> The important thing to understand is that the context for a function being called is set by the way the function is called, not the function itself.</p>

<p>This is an important distinction. Consider closures: As we discussed in <a href="#closures">Closures and Scope</a>, a function’s free variables are resolved by looking them up in their enclosing functions’ environments. You can always determine the functions that define free variables by examining the source code of a JavaScript program, which is why this scheme is known as <a href="https://en.wikipedia.org/wiki/Scope_(computer_science)#Lexical_scoping">Lexical Scope</a>.</p>

<p>A function’s context cannot be determined by examining the source code of a JavaScript program. Let’s look at our example again:</p>

<div class="code-block">
<div class="highlight"><pre><code class="lineno">1</code> <code class="kd">var</code> <code class="nx">someObject</code> <code class="o">=</code> <code class="p">{</code>
<code class="lineno">2</code>   <code class="nx">someFunction</code><code class="o">:</code> <code class="kd">function</code> <code class="p">()</code> <code class="p">{</code>
<code class="lineno">3</code>     <code class="k">return</code> <code class="k">this</code><code class="p">;</code>
<code class="lineno">4</code>   <code class="p">}</code>
<code class="lineno">5</code> <code class="p">};</code>
<code class="lineno">6</code> 
<code class="lineno">7</code> <code class="nx">someObject</code><code class="p">.</code><code class="nx">someFunction</code><code class="p">()</code> <code class="o">===</code> <code class="nx">someObject</code>
<code class="lineno">8</code>   <code class="c1">//=&gt; true</code>
</pre></div>

</div>

<p>What is the context of the function <code>someObject.someFunction</code>? Don’t say <code>someObject</code>! Watch this:</p>

<div class="code-block">
<div class="highlight"><pre><code class="lineno">1</code> <code class="n">var</code> <code class="n">someFunction</code> <code class="o">=</code> <code class="n">someObject</code><code class="p">.</code><code class="n">someFunction</code><code class="p">;</code>
<code class="lineno">2</code> 
<code class="lineno">3</code> <code class="n">someFunction</code> <code class="o">===</code> <code class="n">someObject</code><code class="p">.</code><code class="n">someFunction</code>
<code class="lineno">4</code>   <code class="c1">//=&gt; true</code>
<code class="lineno">5</code> 
<code class="lineno">6</code> <code class="n">someFunction</code><code class="p">()</code> <code class="o">===</code> <code class="n">someObject</code>
<code class="lineno">7</code>   <code class="c1">//=&gt; false</code>
</pre></div>

</div>

<p>It gets weirder:</p>

<div class="code-block">
<div class="highlight"><pre><code class="lineno"> 1</code> <code class="n">var</code> <code class="n">anotherObject</code> <code class="o">=</code> <code class="p">{</code>
<code class="lineno"> 2</code>   <code class="nl">someFunction:</code> <code class="n">someObject</code><code class="p">.</code><code class="n">someFunction</code>
<code class="lineno"> 3</code> <code class="p">}</code>
<code class="lineno"> 4</code> 
<code class="lineno"> 5</code> <code class="n">anotherObject</code><code class="p">.</code><code class="n">someFunction</code> <code class="o">===</code> <code class="n">someObject</code><code class="p">.</code><code class="n">someFunction</code>
<code class="lineno"> 6</code>   <code class="c1">//=&gt; true</code>
<code class="lineno"> 7</code>   
<code class="lineno"> 8</code> <code class="n">anotherObject</code><code class="p">.</code><code class="n">someFunction</code><code class="p">()</code> <code class="o">===</code> <code class="n">anotherObject</code>
<code class="lineno"> 9</code>   <code class="c1">//=&gt; true</code>
<code class="lineno">10</code>   
<code class="lineno">11</code> <code class="n">anotherObject</code><code class="p">.</code><code class="n">someFunction</code><code class="p">()</code> <code class="o">===</code> <code class="n">someObject</code>
<code class="lineno">12</code>   <code class="c1">//=&gt; false</code>
</pre></div>

</div>

<p>So it amounts to this: The exact same function can be called in two different ways, and you end up with two different contexts. If you call it using <code>someObject.someFunction()</code> syntax, the context is set to the receiver. If you call it using any other expression for resolving the function’s value (such as <code>someFunction()</code>), you get something else. Let’s investigate:</p>

<div class="code-block">
<div class="highlight"><pre><code class="lineno"> 1</code> <code class="p">(</code><code class="n">someObject</code><code class="p">.</code><code class="n">someFunction</code><code class="p">)()</code> <code class="o">==</code> <code class="n">someObject</code>
<code class="lineno"> 2</code>   <code class="c1">//=&gt; true</code>
<code class="lineno"> 3</code>   
<code class="lineno"> 4</code> <code class="n">someObject</code><code class="p">[</code><code class="err">'</code><code class="n">someFunction</code><code class="err">'</code><code class="p">]()</code> <code class="o">===</code> <code class="n">someObject</code>
<code class="lineno"> 5</code>   <code class="c1">//=&gt; true</code>
<code class="lineno"> 6</code>   
<code class="lineno"> 7</code> <code class="n">var</code> <code class="n">name</code> <code class="o">=</code> <code class="err">'</code><code class="n">someFunction</code><code class="err">'</code><code class="p">;</code>
<code class="lineno"> 8</code> 
<code class="lineno"> 9</code> <code class="n">someObject</code><code class="p">[</code><code class="n">name</code><code class="p">]()</code> <code class="o">===</code> <code class="n">someObject</code>
<code class="lineno">10</code>   <code class="c1">//=&gt; true</code>
</pre></div>

</div>

<p>Interesting!</p>

<div class="code-block">
<div class="highlight"><pre><code class="lineno">1</code> <code class="n">var</code> <code class="n">baz</code><code class="p">;</code>
<code class="lineno">2</code> 
<code class="lineno">3</code> <code class="p">(</code><code class="n">baz</code> <code class="o">=</code> <code class="n">someObject</code><code class="p">.</code><code class="n">someFunction</code><code class="p">)()</code> <code class="o">===</code> <code class="n">this</code>
<code class="lineno">4</code>   <code class="c1">//=&gt; true</code>
</pre></div>

</div>

<p>How about:</p>

<div class="code-block">
<div class="highlight"><pre><code class="lineno">1</code> <code class="n">var</code> <code class="n">arr</code> <code class="o">=</code> <code class="p">[</code> <code class="n">someObject</code><code class="p">.</code><code class="n">someFunction</code> <code class="p">];</code>
<code class="lineno">2</code> 
<code class="lineno">3</code> <code class="n">arr</code><code class="p">[</code><code class="mi">0</code><code class="p">]()</code> <code class="o">==</code> <code class="n">arr</code>
<code class="lineno">4</code>   <code class="c1">//=&gt; true</code>
</pre></div>

</div>

<p>It seems that whether you use <code>a.b()</code> or <code>a['b']()</code> or <code>a[n]()</code> or <code>(a.b)()</code>, you get context <code>a</code>. </p>

<div class="code-block">
<div class="highlight"><pre><code class="lineno"> 1</code> <code class="kd">var</code> <code class="nx">returnThis</code> <code class="o">=</code> <code class="kd">function</code> <code class="p">()</code> <code class="p">{</code> <code class="k">return</code> <code class="k">this</code> <code class="p">};</code>
<code class="lineno"> 2</code> 
<code class="lineno"> 3</code> <code class="kd">var</code> <code class="nx">aThirdObject</code> <code class="o">=</code> <code class="p">{</code>
<code class="lineno"> 4</code>   <code class="nx">someFunction</code><code class="o">:</code> <code class="kd">function</code> <code class="p">()</code> <code class="p">{</code>
<code class="lineno"> 5</code>     <code class="k">return</code> <code class="nx">returnThis</code><code class="p">()</code>
<code class="lineno"> 6</code>   <code class="p">}</code>
<code class="lineno"> 7</code> <code class="p">}</code>
<code class="lineno"> 8</code> 
<code class="lineno"> 9</code> <code class="nx">returnThis</code><code class="p">()</code> <code class="o">===</code> <code class="k">this</code>
<code class="lineno">10</code>   <code class="c1">//=&gt; true</code>
<code class="lineno">11</code> 
<code class="lineno">12</code> <code class="nx">aThirdObject</code><code class="p">.</code><code class="nx">someFunction</code><code class="p">()</code> <code class="o">===</code> <code class="k">this</code>
<code class="lineno">13</code>   <code class="c1">//=&gt; true</code>
</pre></div>

</div>

<p>And if you don’t use <code>a.b()</code> or <code>a['b']()</code> or <code>a[n]()</code> or <code>(a.b)()</code>, you get the global environment for a context, not the context of whatever function is doing the calling. To simplify things, when you call a function with <code>.</code> or <code>[]</code> access, you get an object as context, otherwise you get the global environment.</p>

<h4 id="leanpub-auto-setting-your-own-context">setting your own context</h4>

<p>There are actually two other ways to set the context of a function. And once again, both are determined by the caller. At the very end of <a href="#objectseverywhere">objects everywhere?</a>, we’ll see that everything in JavaScript behaves like an object, including functions. We’ll learn that functions have methods themselves, and one of them is <code>call</code>.</p>

<p>Here’s <code>call</code> in action:</p>

<div class="code-block">
<div class="highlight"><pre><code class="lineno">1</code> <code class="n">returnThis</code><code class="p">()</code> <code class="o">===</code> <code class="n">aThirdObject</code>
<code class="lineno">2</code>   <code class="c1">//=&gt; false</code>
<code class="lineno">3</code> 
<code class="lineno">4</code> <code class="n">returnThis</code><code class="p">.</code><code class="n">call</code><code class="p">(</code><code class="n">aThirdObject</code><code class="p">)</code> <code class="o">===</code> <code class="n">aThirdObject</code>
<code class="lineno">5</code>   <code class="c1">//=&gt; true</code>
<code class="lineno">6</code>   
<code class="lineno">7</code> <code class="n">anotherObject</code><code class="p">.</code><code class="n">someFunction</code><code class="p">.</code><code class="n">call</code><code class="p">(</code><code class="n">someObject</code><code class="p">)</code> <code class="o">===</code> <code class="n">someObject</code>
<code class="lineno">8</code>   <code class="c1">//=&gt; true</code>
</pre></div>

</div>

<p>When You call a function with <code>call</code>, you set the context by passing it in as the first parameter. Other arguments are passed to the function in the normal manner. Much hilarity can result from <code>call</code> shenanigans like this:</p>

<div class="code-block">
<div class="highlight"><pre><code class="lineno">1</code> <code class="n">var</code> <code class="n">a</code> <code class="o">=</code> <code class="p">[</code><code class="mi">1</code><code class="p">,</code><code class="mi">2</code><code class="p">,</code><code class="mi">3</code><code class="p">],</code>
<code class="lineno">2</code>     <code class="n">b</code> <code class="o">=</code> <code class="p">[</code><code class="mi">4</code><code class="p">,</code><code class="mi">5</code><code class="p">,</code><code class="mi">6</code><code class="p">];</code>
<code class="lineno">3</code>     
<code class="lineno">4</code> <code class="n">a</code><code class="p">.</code><code class="n">concat</code><code class="p">([</code><code class="mi">2</code><code class="p">,</code><code class="mi">1</code><code class="p">])</code>
<code class="lineno">5</code>   <code class="c1">//=&gt; [1,2,3,2,1]</code>
<code class="lineno">6</code>   
<code class="lineno">7</code> <code class="n">a</code><code class="p">.</code><code class="n">concat</code><code class="p">.</code><code class="n">call</code><code class="p">(</code><code class="n">b</code><code class="p">,[</code><code class="mi">2</code><code class="p">,</code><code class="mi">1</code><code class="p">])</code>
<code class="lineno">8</code>   <code class="c1">//=&gt; [4,5,6,2,1]</code>
</pre></div>

</div>

<p>But now we thoroughly understand what <code>a.b()</code> really means: It’s synonymous with <code>a.b.call(a)</code>. Whereas in a browser, <code>c()</code> is synonymous with <code>c.call(window)</code>.</p>

<h4 id="leanpub-auto-apply-arguments-and-contextualization">apply, arguments, and contextualization</h4>

<p>JavaScript has another automagic binding in every function’s environment. <code>arguments</code> is a special object that behaves a little like an array.<sup id="fnref-little"><a href="#fn-little" rel="footnote">30</a></sup></p>

<p>For example:</p>

<div class="code-block">
<div class="highlight"><pre><code class="lineno">1</code> <code class="kd">var</code> <code class="nx">third</code> <code class="o">=</code> <code class="kd">function</code> <code class="p">()</code> <code class="p">{</code>
<code class="lineno">2</code>   <code class="k">return</code> <code class="nx">arguments</code><code class="cp">[</code><code class="mi">2</code><code class="cp">]</code>
<code class="lineno">3</code> <code class="p">}</code>
<code class="lineno">4</code> 
<code class="lineno">5</code> <code class="nx">third</code><code class="p">(</code><code class="mi">77</code><code class="p">,</code> <code class="mi">76</code><code class="p">,</code> <code class="mi">75</code><code class="p">,</code> <code class="mi">74</code><code class="p">,</code> <code class="mi">73</code><code class="p">)</code>
<code class="lineno">6</code>   <code class="c1">//=&gt; 75</code>
</pre></div>

</div>

<p>Hold that thought for a moment. JavaScript also provides a fourth way to set the context for a function. <code>apply</code> is a method implemented by every function that takes a context as its first argument, and it takes an array or array-like thing of arguments as its second argument. That’s a mouthful, let’s look at an example:</p>

<div class="code-block">
<div class="highlight"><pre><code class="lineno">1</code> <code class="n">third</code><code class="p">.</code><code class="n">call</code><code class="p">(</code><code class="n">this</code><code class="p">,</code> <code class="mi">1</code><code class="p">,</code><code class="mi">2</code><code class="p">,</code><code class="mi">3</code><code class="p">,</code><code class="mi">4</code><code class="p">,</code><code class="mi">5</code><code class="p">)</code>
<code class="lineno">2</code>   <code class="c1">//=&gt; 3</code>
<code class="lineno">3</code> 
<code class="lineno">4</code> <code class="n">third</code><code class="p">.</code><code class="n">apply</code><code class="p">(</code><code class="n">this</code><code class="p">,</code> <code class="p">[</code><code class="mi">1</code><code class="p">,</code><code class="mi">2</code><code class="p">,</code><code class="mi">3</code><code class="p">,</code><code class="mi">4</code><code class="p">,</code><code class="mi">5</code><code class="p">])</code>
<code class="lineno">5</code>   <code class="c1">//=&gt; 3</code>
</pre></div>

</div>

<p>Now let’s put the two together. Here’s another travesty:</p>

<div class="code-block">
<div class="highlight"><pre><code class="lineno">1</code> <code class="n">var</code> <code class="n">a</code> <code class="o">=</code> <code class="p">[</code><code class="mi">1</code><code class="p">,</code><code class="mi">2</code><code class="p">,</code><code class="mi">3</code><code class="p">],</code>
<code class="lineno">2</code>     <code class="n">accrete</code> <code class="o">=</code> <code class="n">a</code><code class="p">.</code><code class="n">concat</code><code class="p">;</code>
<code class="lineno">3</code>     
<code class="lineno">4</code> <code class="n">accrete</code><code class="p">([</code><code class="mi">4</code><code class="p">,</code><code class="mi">5</code><code class="p">])</code>
<code class="lineno">5</code>   <code class="c1">//=&gt; Gobbledygook!</code>
</pre></div>

</div>

<p>We get the result of concatenating <code>[4,5]</code> onto an array containing the global environment. Not what we want! Behold:</p>

<div class="code-block">
<div class="highlight"><pre><code class="lineno">1</code> <code class="kd">var</code> <code class="nx">contextualize</code> <code class="o">=</code> <code class="kd">function</code> <code class="p">(</code><code class="nx">fn</code><code class="p">,</code> <code class="nx">context</code><code class="p">)</code> <code class="p">{</code>
<code class="lineno">2</code>   <code class="k">return</code> <code class="kd">function</code> <code class="p">()</code> <code class="p">{</code>
<code class="lineno">3</code>     <code class="k">return</code> <code class="nx">fn</code><code class="p">.</code><code class="nx">apply</code><code class="p">(</code><code class="nx">context</code><code class="p">,</code> <code class="nx">arguments</code><code class="p">);</code>
<code class="lineno">4</code>   <code class="p">}</code>
<code class="lineno">5</code> <code class="p">}</code>
<code class="lineno">6</code> 
<code class="lineno">7</code> <code class="nx">accrete</code> <code class="o">=</code> <code class="nx">contextualize</code><code class="p">(</code><code class="nx">a</code><code class="p">.</code><code class="nx">concat</code><code class="p">,</code> <code class="nx">a</code><code class="p">);</code>
<code class="lineno">8</code> <code class="nx">accrete</code><code class="p">(</code><code class="cp">[</code><code class="mi">4</code><code class="p">,</code><code class="mi">5</code><code class="cp">]</code><code class="p">);</code>
<code class="lineno">9</code>   <code class="c1">//=&gt; </code><code class="cp">[</code> <code class="mi">1</code><code class="p">,</code> <code class="mi">2</code><code class="p">,</code> <code class="mi">3</code><code class="p">,</code> <code class="mi">4</code><code class="p">,</code> <code class="mi">5</code> <code class="cp">]</code><code class="c1"></code>
</pre></div>

</div>

<p>Our <code>contextualize</code> function returns a new function that calls a function with a fixed context. It can be used to fix some of the unexpected results we had above. Consider:</p>

<div class="code-block">
<div class="highlight"><pre><code class="lineno"> 1</code> <code class="kd">var</code> <code class="nx">aFourthObject</code> <code class="o">=</code> <code class="p">{},</code>
<code class="lineno"> 2</code>     <code class="nx">returnThis</code> <code class="o">=</code> <code class="kd">function</code> <code class="p">()</code> <code class="p">{</code> <code class="k">return</code> <code class="k">this</code><code class="p">;</code> <code class="p">};</code>
<code class="lineno"> 3</code>     
<code class="lineno"> 4</code> <code class="nx">aFourthObject</code><code class="p">.</code><code class="nx">uncontextualized</code> <code class="o">=</code> <code class="nx">returnThis</code><code class="p">;</code>
<code class="lineno"> 5</code> <code class="nx">aFourthObject</code><code class="p">.</code><code class="nx">contextualized</code> <code class="o">=</code> <code class="nx">contextualize</code><code class="p">(</code><code class="nx">returnThis</code><code class="p">,</code> <code class="nx">aFourthObject</code><code class="p">);</code>
<code class="lineno"> 6</code> 
<code class="lineno"> 7</code> <code class="nx">aFourthObject</code><code class="p">.</code><code class="nx">uncontextualized</code><code class="p">()</code> <code class="o">===</code> <code class="nx">aFourthObject</code>
<code class="lineno"> 8</code>   <code class="c1">//=&gt; true</code>
<code class="lineno"> 9</code> <code class="nx">aFourthObject</code><code class="p">.</code><code class="nx">contextualized</code><code class="p">()</code> <code class="o">===</code> <code class="nx">aFourthObject</code>
<code class="lineno">10</code>   <code class="c1">//=&gt; true</code>
</pre></div>

</div>

<p>Both are <code>true</code> because we are accessing them with <code>aFourthObject.</code> Now we write:</p>

<div class="code-block">
<div class="highlight"><pre><code class="lineno">1</code> <code class="n">var</code> <code class="n">uncontextualized</code> <code class="o">=</code> <code class="n">aFourthObject</code><code class="p">.</code><code class="n">uncontextualized</code><code class="p">,</code>
<code class="lineno">2</code>     <code class="n">contextualized</code> <code class="o">=</code> <code class="n">aFourthObject</code><code class="p">.</code><code class="n">contextualized</code><code class="p">;</code>
<code class="lineno">3</code>     
<code class="lineno">4</code> <code class="n">uncontextualized</code><code class="p">()</code> <code class="o">===</code> <code class="n">aFourthObject</code><code class="p">;</code>
<code class="lineno">5</code>   <code class="c1">//=&gt; false</code>
<code class="lineno">6</code> <code class="n">contextualized</code><code class="p">()</code> <code class="o">===</code> <code class="n">aFourthObject</code>
<code class="lineno">7</code>   <code class="c1">//=&gt; true</code>
</pre></div>

</div>

<p>When we call these functions without using <code>aFourthObject.</code>, only the contextualized version maintains the context of <code>aFourthObject</code>.</p>

<p>We’ll return to contextualizing methods later, in <a href="#binding">Binding</a>. But before we dive too deeply into special handling for methods, we need to spend a little more time looking at how functions and methods work.</p>

<h3 id="method-decorators">Method Decorators</h3>

<p>In <a href="#decorators">function decorators</a>, we learned that a decorator takes a function as an argument, returns a function, and there’s a semantic relationship between the two. If a function is a verb, a decorator is an adverb.</p>

<p>Decorators can be used to decorate methods provided that they carefully preserve the function’s context. For example, here is a naïve version of <code>maybe</code> for one argument:</p>

<div class="code-block">
<div class="highlight"><pre><code class="lineno">1</code> <code class="kd">function</code> <code class="nx">maybe</code> <code class="p">(</code><code class="nx">fn</code><code class="p">)</code> <code class="p">{</code>
<code class="lineno">2</code>   <code class="k">return</code> <code class="kd">function</code> <code class="p">(</code><code class="nx">argument</code><code class="p">)</code> <code class="p">{</code>
<code class="lineno">3</code>     <code class="k">if</code> <code class="p">(</code><code class="nx">argument</code> <code class="o">!=</code> <code class="kc">null</code><code class="p">)</code> <code class="p">{</code>
<code class="lineno">4</code>       <code class="k">return</code> <code class="nx">fn</code><code class="p">(</code><code class="nx">argument</code><code class="p">)</code>
<code class="lineno">5</code>     <code class="p">}</code>
<code class="lineno">6</code>   <code class="p">}</code>
<code class="lineno">7</code> <code class="p">}</code>
</pre></div>

</div>

<p>This version doesn’t preserve the context, so it can’t be used as a method decorator. Instead, we have to write:</p>

<div class="code-block">
<div class="highlight"><pre><code class="lineno">1</code> <code class="kd">function</code> <code class="nx">maybe</code> <code class="p">(</code><code class="nx">fn</code><code class="p">)</code> <code class="p">{</code>
<code class="lineno">2</code>   <code class="k">return</code> <code class="kd">function</code> <code class="p">(</code><code class="nx">argument</code><code class="p">)</code> <code class="p">{</code>
<code class="lineno">3</code>     <code class="k">if</code> <code class="p">(</code><code class="nx">argument</code> <code class="o">!=</code> <code class="kc">null</code><code class="p">)</code> <code class="p">{</code>
<code class="lineno">4</code>       <code class="k">return</code> <code class="nx">fn</code><code class="p">.</code><code class="nx">call</code><code class="p">(</code><code class="k">this</code><code class="p">,</code> <code class="nx">argument</code><code class="p">)</code>
<code class="lineno">5</code>     <code class="p">}</code>
<code class="lineno">6</code>   <code class="p">}</code>
<code class="lineno">7</code> <code class="p">}</code>
</pre></div>

</div>

<p>Now we can write things like:</p>

<div class="code-block">
<div class="highlight"><pre><code class="lineno">1</code> <code class="nx">someObject</code> <code class="o">=</code> <code class="p">{</code>
<code class="lineno">2</code>   <code class="nx">setSize</code><code class="o">:</code> <code class="nx">maybe</code><code class="p">(</code><code class="kd">function</code> <code class="p">(</code><code class="nx">size</code><code class="p">)</code> <code class="p">{</code>
<code class="lineno">3</code>     <code class="k">this</code><code class="p">.</code><code class="nx">size</code> <code class="o">=</code> <code class="nx">size</code><code class="p">;</code>
<code class="lineno">4</code>     <code class="k">return</code> <code class="k">this</code>
<code class="lineno">5</code>   <code class="p">})</code>
<code class="lineno">6</code> <code class="p">}</code>
</pre></div>

</div>

<p>And <code>this</code> is correctly set:</p>

<div class="code-block">
<div class="highlight"><pre><code class="lineno">1</code> <code class="n">someObject</code><code class="p">.</code><code class="n">setSize</code><code class="p">(</code><code class="mi">5</code><code class="p">)</code>
<code class="lineno">2</code>   <code class="c1">//=&gt; { setSize: [Function], size: 5 }</code>
</pre></div>

</div>

<p>Using <code>.call</code> or <code>.apply</code> and <code>arguments</code> is substantially slower than writing function decorators that don’t set the context, so it might be right to sometimes write function decorators that aren’t usable as method decorators. However, in practice you’re far more likely to introduce a defect by failing to pass the context through a decorator than by introducing a performance pessimization, so the default choice should be to write all function decorators in such a way that they are “context agnostic.”</p>

<p>In some cases, there are other considerations to writing a method decorator. If the decorator introduces state of any kind (such as <code>once</code> and <code>memoize</code> do), this must be carefully managed for the case when several objects share the same method through the mechanism of the <a href="#prototypes">prototype</a> or through sharing references to the same function.</p>

<h3 id="leanpub-auto-summary-2">Summary</h3>

<table class="tip sidebarish"><tbody><tr>
<td class="sidebar-icon">
      <img class="sidebar-image" src="/site_images/javascript-allonge/leanpub_key.png" alt="tip">
</td>
    <td>
      <h4 id="leanpub-auto-objects-mutation-and-state">Objects, Mutation, and State</h4>

  <ul>
<li>State can be encapsulated/hidden with closures.</li>
    <li>Encapsulations can be aggregated with composition.</li>
    <li>Encapsulation resists extension.</li>
    <li>The automagic binding <code>this</code> facilitates sharing of functions.</li>
    <li>Functions can be named and declared with a name.</li>
  </ul>
</td>
  </tr></tbody></table>
<h2 id="leanpub-auto-recipes-with-objects-mutations-and-state">
<span class="section-number">7 </span>Recipes with Objects, Mutations, and State</h2>

<div class="image-with-caption center image-with-caption center">
  <img src="/site_images/javascript-allonge/intestines.jpg" alt="The Intestines of an Espresso Machine"><p class="caption">The Intestines of an Espresso Machine</p>
</div>

<h4 id="leanpub-auto-disclaimer-2">Disclaimer</h4>

<p>The recipes are written for practicality, and their implementation may introduce JavaScript features that haven’t been discussed in the text to this point, such as methods and/or prototypes. The overall <em>use</em> of each recipe will fit within the spirit of the language discussed so far, even if the implementations may not.</p>

<h3 id="memoize">Memoize</h3>

<p>Consider that age-old interview quiz, writing a recursive fibonacci function (there are other ways to derive a fibonacci number, of course). Here’s an implementation that doesn’t use a <a href="#named-function-expressions">named function expression</a>. The reason for that omission will be explained later:</p>

<div class="code-block">
<div class="highlight"><pre><code class="lineno">1</code>   <code class="kd">var</code> <code class="nx">fibonacci</code> <code class="o">=</code> <code class="kd">function</code> <code class="p">(</code><code class="nx">n</code><code class="p">)</code> <code class="p">{</code>
<code class="lineno">2</code>     <code class="k">if</code> <code class="p">(</code><code class="nx">n</code> <code class="o">&lt;</code> <code class="mi">2</code><code class="p">)</code> <code class="p">{</code>
<code class="lineno">3</code>       <code class="k">return</code> <code class="nx">n</code>
<code class="lineno">4</code>     <code class="p">}</code>
<code class="lineno">5</code>     <code class="k">else</code> <code class="p">{</code>
<code class="lineno">6</code>       <code class="k">return</code> <code class="nx">fibonacci</code><code class="p">(</code><code class="nx">n</code><code class="o">-</code><code class="mi">2</code><code class="p">)</code> <code class="o">+</code> <code class="nx">fibonacci</code><code class="p">(</code><code class="nx">n</code><code class="o">-</code><code class="mi">1</code><code class="p">)</code>
<code class="lineno">7</code>     <code class="p">}</code>
<code class="lineno">8</code>   <code class="p">}</code>
</pre></div>

</div>

<p>We’ll time it:</p>

<div class="code-block">
<div class="highlight"><pre><code class="lineno">1</code> <code class="n">s</code> <code class="o">=</code> <code class="p">(</code><code class="n">new</code> <code class="n">Date</code><code class="p">()).</code><code class="n">getTime</code><code class="p">()</code>
<code class="lineno">2</code> <code class="n">new</code> <code class="n">Fibonacci</code><code class="p">(</code><code class="mi">45</code><code class="p">).</code><code class="n">toInt</code><code class="p">()</code>
<code class="lineno">3</code> <code class="p">(</code> <code class="p">(</code><code class="n">new</code> <code class="n">Date</code><code class="p">()).</code><code class="n">getTime</code><code class="p">()</code> <code class="o">-</code> <code class="n">s</code> <code class="p">)</code> <code class="o">/</code> <code class="mi">1000</code>
<code class="lineno">4</code>   <code class="c1">//=&gt; 28.565</code>
</pre></div>

</div>

<p>Why is it so slow? Well, it has a nasty habit of recalculating the same results over and over and over again. We could rearrange the computation to avoid this, but let’s be lazy and trade space for time. What we want to do is use a lookup table. Whenever we want a result, we look it up. If we don’t have it, we calculate it and write the result in the table to use in the future. If we do have it, we return the result without recalculating it.</p>

<p>Here’s our recipe:</p>

<div class="code-block">
<div class="highlight"><pre><code class="lineno"> 1</code> <code class="kd">function</code> <code class="nx">memoized</code> <code class="p">(</code><code class="nx">fn</code><code class="p">,</code> <code class="nx">keymaker</code><code class="p">)</code> <code class="p">{</code>
<code class="lineno"> 2</code>   <code class="kd">var</code> <code class="nx">lookupTable</code> <code class="o">=</code> <code class="p">{},</code> 
<code class="lineno"> 3</code>       <code class="nx">key</code><code class="p">;</code>
<code class="lineno"> 4</code>     
<code class="lineno"> 5</code>   <code class="nx">keymaker</code> <code class="o">||</code> <code class="p">(</code><code class="nx">keymaker</code> <code class="o">=</code> <code class="kd">function</code> <code class="p">(</code><code class="nx">args</code><code class="p">)</code> <code class="p">{</code>
<code class="lineno"> 6</code>     <code class="k">return</code> <code class="nx">JSON</code><code class="p">.</code><code class="nx">stringify</code><code class="p">(</code><code class="nx">args</code><code class="p">)</code> 
<code class="lineno"> 7</code>   <code class="p">});</code>
<code class="lineno"> 8</code>     
<code class="lineno"> 9</code>   <code class="k">return</code> <code class="kd">function</code> <code class="p">()</code> <code class="p">{</code>
<code class="lineno">10</code>     <code class="kd">var</code> <code class="nx">key</code> <code class="o">=</code> <code class="nx">keymaker</code><code class="p">.</code><code class="nx">call</code><code class="p">(</code><code class="k">this</code><code class="p">,</code> <code class="nx">arguments</code><code class="p">);</code>
<code class="lineno">11</code>   
<code class="lineno">12</code>     <code class="k">return</code> <code class="nx">lookupTable</code><code class="cp">[</code><code class="nx">key</code><code class="cp">]</code> <code class="o">||</code> <code class="p">(</code>
<code class="lineno">13</code>       <code class="nx">lookupTable</code><code class="cp">[</code><code class="nx">key</code><code class="cp">]</code> <code class="o">=</code> <code class="nx">fn</code><code class="p">.</code><code class="nx">apply</code><code class="p">(</code><code class="k">this</code><code class="p">,</code> <code class="nx">arguments</code><code class="p">)</code>
<code class="lineno">14</code>     <code class="p">)</code>
<code class="lineno">15</code>   <code class="p">}</code>
<code class="lineno">16</code> <code class="p">}</code>
</pre></div>

</div>

<p>We can apply <code>memoized</code> to a function and we will get back a new function that “memoizes” its results so that it never has to recalculate the same value twice. It only works for functions that are “idempotent,” meaning functions that always return the same result given the same argument(s). Like <code>fibonacci</code>:</p>

<p>Let’s try it:</p>

<div class="code-block">
<div class="highlight"><pre><code class="lineno"> 1</code> <code class="kd">var</code> <code class="nx">fastFibonacci</code> <code class="o">=</code> <code class="nx">memoized</code><code class="p">(</code> <code class="kd">function</code> <code class="p">(</code><code class="nx">n</code><code class="p">)</code> <code class="p">{</code>
<code class="lineno"> 2</code>   <code class="k">if</code> <code class="p">(</code><code class="nx">n</code> <code class="o">&lt;</code> <code class="mi">2</code><code class="p">)</code> <code class="p">{</code>
<code class="lineno"> 3</code>     <code class="k">return</code> <code class="nx">n</code>
<code class="lineno"> 4</code>   <code class="p">}</code>
<code class="lineno"> 5</code>   <code class="k">else</code> <code class="p">{</code>
<code class="lineno"> 6</code>     <code class="k">return</code> <code class="nx">fastFibonacci</code><code class="p">(</code><code class="nx">n</code><code class="o">-</code><code class="mi">2</code><code class="p">)</code> <code class="o">+</code> <code class="nx">fastFibonacci</code><code class="p">(</code><code class="nx">n</code><code class="o">-</code><code class="mi">1</code><code class="p">)</code>
<code class="lineno"> 7</code>   <code class="p">}</code>
<code class="lineno"> 8</code> <code class="p">});</code>
<code class="lineno"> 9</code> 
<code class="lineno">10</code> <code class="nx">fastFibonacci</code><code class="p">(</code><code class="mi">45</code><code class="p">)</code>
<code class="lineno">11</code>   <code class="c1">//=&gt; 1134903170</code>
</pre></div>

</div>

<p>We get the result back instantly. It works! You can use memoize with all sorts of “idempotent” pure functions. by default, it works with any function that takes arguments which can be transformed into JSON using JavaScript’s standard library function for this purpose. If you have another strategy for turning the arguments into a string key, you can supply it as a second parameter.</p>

<h4 id="leanpub-auto-memoizing-recursive-functions">memoizing recursive functions</h4>

<p>We deliberately picked a recursive function to memoize, because it demonstrates a pitfall when combining decorators with named functional expressions. Consider this implementation that uses a named functional expression:</p>

<div class="code-block">
<div class="highlight"><pre><code class="lineno">1</code> <code class="kd">var</code> <code class="nx">fibonacci</code> <code class="o">=</code> <code class="kd">function</code> <code class="nx">fibonacci</code> <code class="p">(</code><code class="nx">n</code><code class="p">)</code> <code class="p">{</code>
<code class="lineno">2</code>   <code class="k">if</code> <code class="p">(</code><code class="nx">n</code> <code class="o">&lt;</code> <code class="mi">2</code><code class="p">)</code> <code class="p">{</code>
<code class="lineno">3</code>     <code class="k">return</code> <code class="nx">n</code>
<code class="lineno">4</code>   <code class="p">}</code>
<code class="lineno">5</code>   <code class="k">else</code> <code class="p">{</code>
<code class="lineno">6</code>     <code class="k">return</code> <code class="nx">fibonacci</code><code class="p">(</code><code class="nx">n</code><code class="o">-</code><code class="mi">2</code><code class="p">)</code> <code class="o">+</code> <code class="nx">fibonacci</code><code class="p">(</code><code class="nx">n</code><code class="o">-</code><code class="mi">1</code><code class="p">)</code>
<code class="lineno">7</code>   <code class="p">}</code>
<code class="lineno">8</code> <code class="p">}</code>
</pre></div>

</div>

<p>If we try to memoize it, we don’t get the expected speedup:</p>

<div class="code-block">
<div class="highlight"><pre><code class="lineno">1</code> <code class="kd">var</code> <code class="nx">fibonacci</code> <code class="o">=</code> <code class="nx">memoized</code><code class="p">(</code> <code class="kd">function</code> <code class="nx">fibonacci</code> <code class="p">(</code><code class="nx">n</code><code class="p">)</code> <code class="p">{</code>
<code class="lineno">2</code>   <code class="k">if</code> <code class="p">(</code><code class="nx">n</code> <code class="o">&lt;</code> <code class="mi">2</code><code class="p">)</code> <code class="p">{</code>
<code class="lineno">3</code>     <code class="k">return</code> <code class="nx">n</code>
<code class="lineno">4</code>   <code class="p">}</code>
<code class="lineno">5</code>   <code class="k">else</code> <code class="p">{</code>
<code class="lineno">6</code>     <code class="k">return</code> <code class="nx">fibonacci</code><code class="p">(</code><code class="nx">n</code><code class="o">-</code><code class="mi">2</code><code class="p">)</code> <code class="o">+</code> <code class="nx">fibonacci</code><code class="p">(</code><code class="nx">n</code><code class="o">-</code><code class="mi">1</code><code class="p">)</code>
<code class="lineno">7</code>   <code class="p">}</code>
<code class="lineno">8</code> <code class="p">});</code>
</pre></div>

</div>

<p>That’s because the function bound to the name <code>fibonacci</code> in the outer environment has been memoized, but the named functional expression binds the name <code>fibonacci</code> inside the unmemoized function, so none of the recursive calls to fibonacci are <em>ever</em> memoized. Therefore we must write:</p>

<div class="code-block">
<div class="highlight"><pre><code class="lineno">1</code> <code class="kd">var</code> <code class="nx">fibonacci</code> <code class="o">=</code> <code class="nx">memoized</code><code class="p">(</code> <code class="kd">function</code> <code class="p">(</code><code class="nx">n</code><code class="p">)</code> <code class="p">{</code>
<code class="lineno">2</code>   <code class="k">if</code> <code class="p">(</code><code class="nx">n</code> <code class="o">&lt;</code> <code class="mi">2</code><code class="p">)</code> <code class="p">{</code>
<code class="lineno">3</code>     <code class="k">return</code> <code class="nx">n</code>
<code class="lineno">4</code>   <code class="p">}</code>
<code class="lineno">5</code>   <code class="k">else</code> <code class="p">{</code>
<code class="lineno">6</code>     <code class="k">return</code> <code class="nx">fibonacci</code><code class="p">(</code><code class="nx">n</code><code class="o">-</code><code class="mi">2</code><code class="p">)</code> <code class="o">+</code> <code class="nx">fibonacci</code><code class="p">(</code><code class="nx">n</code><code class="o">-</code><code class="mi">1</code><code class="p">)</code>
<code class="lineno">7</code>   <code class="p">}</code>
<code class="lineno">8</code> <code class="p">});</code>
</pre></div>

</div>

<p>If we need to prevent a rebinding from breaking the function, we’ll need to use the <a href="#modules">module</a> pattern.</p>

<h3 id="getWith">getWith</h3>

<p><code>getWith</code> is a very simple function. It takes the name of an attribute and returns a function that extracts the value of that attribute from an object:</p>

<div class="code-block">
<div class="highlight"><pre><code class="lineno">1</code> <code class="kd">function</code> <code class="nx">getWith</code> <code class="p">(</code><code class="nx">attr</code><code class="p">)</code> <code class="p">{</code>
<code class="lineno">2</code>   <code class="k">return</code> <code class="kd">function</code> <code class="p">(</code><code class="nx">object</code><code class="p">)</code> <code class="p">{</code> <code class="k">return</code> <code class="nx">object</code><code class="cp">[</code><code class="nx">attr</code><code class="cp">]</code><code class="p">;</code> <code class="p">}</code>
<code class="lineno">3</code> <code class="p">}</code>
</pre></div>

</div>

<p>You can use it like this:</p>

<div class="code-block">
<div class="highlight"><pre><code class="lineno">1</code> <code class="n">var</code> <code class="n">inventory</code> <code class="o">=</code> <code class="p">{</code>
<code class="lineno">2</code>   <code class="nl">apples:</code> <code class="mi">0</code><code class="p">,</code>
<code class="lineno">3</code>   <code class="nl">oranges:</code> <code class="mi">144</code><code class="p">,</code>
<code class="lineno">4</code>   <code class="nl">eggs:</code> <code class="mi">36</code>
<code class="lineno">5</code> <code class="p">};</code>
<code class="lineno">6</code> 
<code class="lineno">7</code> <code class="n">getWith</code><code class="p">(</code><code class="err">'</code><code class="n">oranges</code><code class="err">'</code><code class="p">)(</code><code class="n">inventory</code><code class="p">)</code>
<code class="lineno">8</code>   <code class="c1">//=&gt; 144</code>
</pre></div>

</div>

<p>This isn’t much of a recipe yet. But let’s combine it with <a href="#mapWith">mapWith</a>:</p>

<div class="code-block">
<div class="highlight"><pre><code class="lineno">1</code> <code class="n">var</code> <code class="n">inventories</code> <code class="o">=</code> <code class="p">[</code>
<code class="lineno">2</code>   <code class="p">{</code> <code class="n">apples</code><code class="o">:</code> <code class="mi">0</code><code class="p">,</code> <code class="n">oranges</code><code class="o">:</code> <code class="mi">144</code><code class="p">,</code> <code class="n">eggs</code><code class="o">:</code> <code class="mi">36</code> <code class="p">},</code>
<code class="lineno">3</code>   <code class="p">{</code> <code class="n">apples</code><code class="o">:</code> <code class="mi">240</code><code class="p">,</code> <code class="n">oranges</code><code class="o">:</code> <code class="mi">54</code><code class="p">,</code> <code class="n">eggs</code><code class="o">:</code> <code class="mi">12</code> <code class="p">},</code>
<code class="lineno">4</code>   <code class="p">{</code> <code class="n">apples</code><code class="o">:</code> <code class="mi">24</code><code class="p">,</code> <code class="n">oranges</code><code class="o">:</code> <code class="mi">12</code><code class="p">,</code> <code class="n">eggs</code><code class="o">:</code> <code class="mi">42</code> <code class="p">}</code>
<code class="lineno">5</code> <code class="p">];</code>
<code class="lineno">6</code> 
<code class="lineno">7</code> <code class="n">mapWith</code><code class="p">(</code><code class="n">getWith</code><code class="p">(</code><code class="err">'</code><code class="n">oranges</code><code class="err">'</code><code class="p">))(</code><code class="n">inventories</code><code class="p">)</code>
<code class="lineno">8</code>   <code class="c1">//=&gt; [ 144, 54, 12 ]</code>
</pre></div>

</div>

<p>That’s nicer than writing things out “longhand:”</p>

<div class="code-block">
<div class="highlight"><pre><code class="lineno">1</code> <code class="nx">mapWith</code><code class="p">(</code><code class="kd">function</code> <code class="p">(</code><code class="nx">inventory</code><code class="p">)</code> <code class="p">{</code> <code class="k">return</code> <code class="nx">inventory</code><code class="p">.</code><code class="nx">oranges</code> <code class="p">})(</code><code class="nx">inventories</code><code class="p">)</code>
<code class="lineno">2</code>   <code class="c1">//=&gt; </code><code class="cp">[</code> <code class="mi">144</code><code class="p">,</code> <code class="mi">54</code><code class="p">,</code> <code class="mi">12</code> <code class="cp">]</code><code class="c1"></code>
</pre></div>

</div>

<p><code>getWith</code> plays nicely with <a href="#maybe">maybe</a> as well. Consider a sparse array. You can use:</p>

<div class="code-block">
<div class="highlight"><pre><code class="lineno">1</code> <code class="n">mapWith</code><code class="p">(</code><code class="n">maybe</code><code class="p">(</code><code class="n">getWith</code><code class="p">(</code><code class="err">'</code><code class="n">oranges</code><code class="err">'</code><code class="p">)))</code>
</pre></div>

</div>

<p>To get the orange count from all the non-null inventories in a list.</p>

<h4 id="leanpub-auto-whats-in-a-name">what’s in a name?</h4>

<p>Why is this called <code>getWith</code>? Consider this function that is common in languages that have functions and dictionaries but not methods:</p>

<div class="code-block">
<div class="highlight"><pre><code class="lineno">1</code> <code class="kd">function</code> <code class="nx">get</code> <code class="p">(</code><code class="nx">object</code><code class="p">,</code> <code class="nx">attr</code><code class="p">)</code> <code class="p">{</code>
<code class="lineno">2</code>   <code class="k">return</code> <code class="nx">object</code><code class="cp">[</code><code class="nx">attr</code><code class="cp">]</code><code class="p">;</code>
<code class="lineno">3</code> <code class="p">};</code>
</pre></div>

</div>

<p>You might ask, “Why use a function instead of just using <code>[]</code>?” The answer is, we can manipulate functions in ways that we can’t manipulate syntax. For example, do you remember from <a href="#flip">flip</a> that we can define <code>mapWith</code> from <code>map</code>?</p>

<div class="code-block">
<div class="highlight"><pre><code class="lineno">1</code> <code class="n">var</code> <code class="n">mapWith</code> <code class="o">=</code> <code class="n">flip</code><code class="p">(</code><code class="n">map</code><code class="p">);</code>
</pre></div>

</div>

<p>We can do the same thing with <code>getWith</code>, and that’s why it’s named in this fashion:</p>

<div class="code-block">
<div class="highlight"><pre><code class="lineno">1</code> <code class="n">var</code> <code class="n">getWith</code> <code class="o">=</code> <code class="n">flip</code><code class="p">(</code><code class="n">get</code><code class="p">)</code>
</pre></div>

</div>

<h3 id="pluck">pluckWith</h3>

<p>This pattern of combining <a href="#mapWith">mapWith</a> and <a href="#getWith">getWith</a> is very frequent in JavaScript code. So much so, that we can take it up another level:</p>

<div class="code-block">
<div class="highlight"><pre><code class="lineno">1</code> <code class="kd">function</code> <code class="nx">pluckWith</code> <code class="p">(</code><code class="nx">attr</code><code class="p">)</code> <code class="p">{</code>
<code class="lineno">2</code>   <code class="k">return</code> <code class="nx">mapWith</code><code class="p">(</code><code class="nx">getWith</code><code class="p">(</code><code class="nx">attr</code><code class="p">))</code>
<code class="lineno">3</code> <code class="p">}</code>
</pre></div>

</div>

<p>Or even better:</p>

<div class="code-block">
<div class="highlight"><pre><code class="lineno">1</code> <code class="n">var</code> <code class="n">pluckWith</code> <code class="o">=</code> <code class="n">compose</code><code class="p">(</code><code class="n">mapWith</code><code class="p">,</code> <code class="n">getWith</code><code class="p">);</code>
</pre></div>

</div>

<p>And now we can write:</p>

<div class="code-block">
<div class="highlight"><pre><code class="lineno">1</code> <code class="n">pluckWith</code><code class="p">(</code><code class="err">'</code><code class="n">eggs</code><code class="err">'</code><code class="p">)(</code><code class="n">inventories</code><code class="p">)</code>
<code class="lineno">2</code>   <code class="c1">//=&gt; [ 36, 12, 42 ]</code>
</pre></div>

</div>

<p>Libraries like <a href="http://underscorejs.org">Underscore</a> provide <code>pluck</code>, the flipped version of <code>pluckWith</code>:</p>

<div class="code-block">
<div class="highlight"><pre><code class="lineno">1</code> <code class="n">_</code><code class="p">.</code><code class="n">pluck</code><code class="p">(</code><code class="n">inventories</code><code class="p">,</code> <code class="err">'</code><code class="n">eggs</code><code class="err">'</code><code class="p">)</code>
<code class="lineno">2</code>   <code class="c1">//=&gt; [ 36, 12, 42 ]</code>
</pre></div>

</div>

<p>Our recipe is terser when you want to name a function:</p>

<div class="code-block">
<div class="highlight"><pre><code class="lineno">1</code> <code class="n">var</code> <code class="n">eggsByStore</code> <code class="o">=</code> <code class="n">pluck</code><code class="p">(</code><code class="err">'</code><code class="n">eggs</code><code class="err">'</code><code class="p">);</code>
</pre></div>

</div>

<p>vs.</p>

<div class="code-block">
<div class="highlight"><pre><code class="lineno">1</code> <code class="kd">function</code> <code class="nx">eggsByStore</code> <code class="p">(</code><code class="nx">inventories</code><code class="p">)</code> <code class="p">{</code>
<code class="lineno">2</code>   <code class="k">return</code> <code class="nx">_</code><code class="p">.</code><code class="nx">pluck</code><code class="p">(</code><code class="nx">inventories</code><code class="p">,</code> <code class="s1">'eggs'</code><code class="p">)</code>
<code class="lineno">3</code> <code class="p">}</code>
</pre></div>

</div>

<p>And of course, if we have <code>pluck</code> we can use <a href="#flip">flip</a> to derive <code>pluckWith</code>:</p>

<div class="code-block">
<div class="highlight"><pre><code class="lineno">1</code> <code class="n">var</code> <code class="n">pluckWith</code> <code class="o">=</code> <code class="n">flip</code><code class="p">(</code><code class="n">_</code><code class="p">.</code><code class="n">pluck</code><code class="p">);</code>
</pre></div>

</div>

<h3 id="deepMapWith">Deep Mapping</h3>

<p><a href="#mapWith">mapWith</a> is an excellent tool, but from time to time you will find yourself working with arrays that represent trees rather than lists. For example, here is a partial list of sales extracted from a report of some kind. It’s grouped in some mysterious way, and we need to operate on each item in the report.</p>

<div class="code-block">
<div class="highlight"><pre><code class="lineno"> 1</code> <code class="n">var</code> <code class="n">report</code> <code class="o">=</code> 
<code class="lineno"> 2</code>   <code class="p">[</code> <code class="p">[</code> <code class="p">{</code> <code class="n">price</code><code class="o">:</code> <code class="mf">1.99</code><code class="p">,</code> <code class="n">id</code><code class="o">:</code> <code class="mi">1</code> <code class="p">},</code>
<code class="lineno"> 3</code>     <code class="p">{</code> <code class="n">price</code><code class="o">:</code> <code class="mf">4.99</code><code class="p">,</code> <code class="n">id</code><code class="o">:</code> <code class="mi">2</code> <code class="p">},</code>
<code class="lineno"> 4</code>     <code class="p">{</code> <code class="n">price</code><code class="o">:</code> <code class="mf">7.99</code><code class="p">,</code> <code class="n">id</code><code class="o">:</code> <code class="mi">3</code> <code class="p">},</code>
<code class="lineno"> 5</code>     <code class="p">{</code> <code class="n">price</code><code class="o">:</code> <code class="mf">1.99</code><code class="p">,</code> <code class="n">id</code><code class="o">:</code> <code class="mi">4</code> <code class="p">},</code>
<code class="lineno"> 6</code>     <code class="p">{</code> <code class="n">price</code><code class="o">:</code> <code class="mf">2.99</code><code class="p">,</code> <code class="n">id</code><code class="o">:</code> <code class="mi">5</code> <code class="p">},</code>
<code class="lineno"> 7</code>     <code class="p">{</code> <code class="n">price</code><code class="o">:</code> <code class="mf">6.99</code><code class="p">,</code> <code class="n">id</code><code class="o">:</code> <code class="mi">6</code> <code class="p">}</code> <code class="p">],</code>
<code class="lineno"> 8</code>   <code class="p">[</code> <code class="p">{</code> <code class="n">price</code><code class="o">:</code> <code class="mf">5.99</code><code class="p">,</code> <code class="n">id</code><code class="o">:</code> <code class="mi">21</code> <code class="p">},</code>
<code class="lineno"> 9</code>     <code class="p">{</code> <code class="n">price</code><code class="o">:</code> <code class="mf">1.99</code><code class="p">,</code> <code class="n">id</code><code class="o">:</code> <code class="mi">22</code> <code class="p">},</code>
<code class="lineno">10</code>     <code class="p">{</code> <code class="n">price</code><code class="o">:</code> <code class="mf">1.99</code><code class="p">,</code> <code class="n">id</code><code class="o">:</code> <code class="mi">23</code> <code class="p">},</code>
<code class="lineno">11</code>     <code class="p">{</code> <code class="n">price</code><code class="o">:</code> <code class="mf">1.99</code><code class="p">,</code> <code class="n">id</code><code class="o">:</code> <code class="mi">24</code> <code class="p">},</code>
<code class="lineno">12</code>     <code class="p">{</code> <code class="n">price</code><code class="o">:</code> <code class="mf">5.99</code><code class="p">,</code> <code class="n">id</code><code class="o">:</code> <code class="mi">25</code> <code class="p">}</code> <code class="p">],</code>
<code class="lineno">13</code> 
<code class="lineno">14</code>   <code class="c1">// ...</code>
<code class="lineno">15</code> 
<code class="lineno">16</code>   <code class="p">[</code> <code class="p">{</code> <code class="n">price</code><code class="o">:</code> <code class="mf">7.99</code><code class="p">,</code> <code class="n">id</code><code class="o">:</code> <code class="mi">221</code> <code class="p">},</code>
<code class="lineno">17</code>     <code class="p">{</code> <code class="n">price</code><code class="o">:</code> <code class="mf">4.99</code><code class="p">,</code> <code class="n">id</code><code class="o">:</code> <code class="mi">222</code> <code class="p">},</code>
<code class="lineno">18</code>     <code class="p">{</code> <code class="n">price</code><code class="o">:</code> <code class="mf">7.99</code><code class="p">,</code> <code class="n">id</code><code class="o">:</code> <code class="mi">223</code> <code class="p">},</code>
<code class="lineno">19</code>     <code class="p">{</code> <code class="n">price</code><code class="o">:</code> <code class="mf">10.99</code><code class="p">,</code> <code class="n">id</code><code class="o">:</code> <code class="mi">224</code> <code class="p">},</code>
<code class="lineno">20</code>     <code class="p">{</code> <code class="n">price</code><code class="o">:</code> <code class="mf">9.99</code><code class="p">,</code> <code class="n">id</code><code class="o">:</code> <code class="mi">225</code> <code class="p">},</code>
<code class="lineno">21</code>     <code class="p">{</code> <code class="n">price</code><code class="o">:</code> <code class="mf">9.99</code><code class="p">,</code> <code class="n">id</code><code class="o">:</code> <code class="mi">226</code> <code class="p">}</code> <code class="p">]</code> <code class="p">];</code>
</pre></div>

</div>

<p>We could nest some mapWiths, but we humans are tool users. If we can use a stick to extract tasty ants from a hole to eat, we can automate working with arrays:</p>

<div class="code-block">
<div class="highlight"><pre><code class="lineno"> 1</code> <code class="kd">function</code> <code class="nx">deepMapWith</code> <code class="p">(</code><code class="nx">fn</code><code class="p">)</code> <code class="p">{</code>
<code class="lineno"> 2</code>   <code class="k">return</code> <code class="kd">function</code> <code class="nx">innerdeepMapWith</code> <code class="p">(</code><code class="nx">tree</code><code class="p">)</code> <code class="p">{</code>
<code class="lineno"> 3</code>     <code class="k">return</code> <code class="nb">Array</code><code class="p">.</code><code class="nx">prototype</code><code class="p">.</code><code class="nx">map</code><code class="p">.</code><code class="nx">call</code><code class="p">(</code><code class="nx">tree</code><code class="p">,</code> <code class="kd">function</code> <code class="p">(</code><code class="nx">element</code><code class="p">)</code> <code class="p">{</code>
<code class="lineno"> 4</code>       <code class="k">if</code> <code class="p">(</code><code class="nb">Array</code><code class="p">.</code><code class="nx">isArray</code><code class="p">(</code><code class="nx">element</code><code class="p">))</code> <code class="p">{</code>
<code class="lineno"> 5</code>         <code class="k">return</code> <code class="nx">innerdeepMapWith</code><code class="p">(</code><code class="nx">element</code><code class="p">);</code>
<code class="lineno"> 6</code>       <code class="p">}</code>
<code class="lineno"> 7</code>       <code class="k">else</code> <code class="k">return</code> <code class="nx">fn</code><code class="p">(</code><code class="nx">element</code><code class="p">);</code>
<code class="lineno"> 8</code>     <code class="p">});</code>
<code class="lineno"> 9</code>   <code class="p">};</code>
<code class="lineno">10</code> <code class="p">};</code>
</pre></div>

</div>

<p>And now we can use <code>deepMapWith</code> on a tree the way we use <code>mapWith</code> on a flat array:</p>

<div class="code-block">
<div class="highlight"><pre><code class="lineno"> 1</code> <code class="n">deepMapWith</code><code class="p">(</code><code class="n">getWith</code><code class="p">(</code><code class="err">'</code><code class="n">price</code><code class="err">'</code><code class="p">))(</code><code class="n">report</code><code class="p">)</code>
<code class="lineno"> 2</code>   <code class="c1">//=&gt;  [ [ 1.99,</code>
<code class="lineno"> 3</code>             <code class="mf">4.99</code><code class="p">,</code>
<code class="lineno"> 4</code>             <code class="mf">7.99</code><code class="p">,</code>
<code class="lineno"> 5</code>             <code class="mf">1.99</code><code class="p">,</code>
<code class="lineno"> 6</code>             <code class="mf">2.99</code><code class="p">,</code>
<code class="lineno"> 7</code>             <code class="mf">6.99</code> <code class="p">],</code>
<code class="lineno"> 8</code>           <code class="p">[</code> <code class="mf">5.99</code><code class="p">,</code>
<code class="lineno"> 9</code>             <code class="mf">1.99</code><code class="p">,</code>
<code class="lineno">10</code>             <code class="mf">1.99</code><code class="p">,</code>
<code class="lineno">11</code>             <code class="mf">1.99</code><code class="p">,</code>
<code class="lineno">12</code>             <code class="mf">5.99</code> <code class="p">],</code>
<code class="lineno">13</code>             
<code class="lineno">14</code>           <code class="c1">// ...</code>
<code class="lineno">15</code>           
<code class="lineno">16</code>           <code class="p">[</code> <code class="mf">7.99</code><code class="p">,</code>
<code class="lineno">17</code>             <code class="mf">4.99</code><code class="p">,</code>
<code class="lineno">18</code>             <code class="mf">7.99</code><code class="p">,</code>
<code class="lineno">19</code>             <code class="mf">10.99</code><code class="p">,</code>
<code class="lineno">20</code>             <code class="mf">9.99</code><code class="p">,</code>
<code class="lineno">21</code>             <code class="mf">9.99</code> <code class="p">]</code> <code class="p">]</code>
</pre></div>

</div>

<h2 id="methods">
<span class="section-number">8 </span>Finish the Cup: Instances and Classes</h2>

<div class="image-with-caption center image-with-caption center">
  <img src="/site_images/javascript-allonge/beans1.jpg" alt='Other languages call their objects "beans," but serve extra-weak coffee in an attempt to be all things to all people'><p class="caption">Other languages call their objects “beans,” but serve extra-weak coffee in an attempt to be all things to all people</p>
</div>

<p>As discussed in <a href="#references">Rebinding and References</a> and again in <a href="#encapsulation">Encapsulating State</a>, JavaScript objects are very simple, yet the combination of objects, functions, and closures can create powerful data structures. That being said, there are language features that cannot be implemented with Plain Old JavaScript Objects, functions, and closures<sup id="fnref-turing"><a href="#fn-turing" rel="footnote">31</a></sup>.</p>

<p>One of them is <em>inheritance</em>. In JavaScript, inheritance provides a cleaner, simpler mechanism for extending data structures, domain models, and anything else you represent as a bundle of state and operations.</p>

<h3 id="prototypes">Prototypes are Simple, it’s the Explanations that are Hard To Understand</h3>

<p>As you recall from our code for making objects <a href="#extensible">extensible</a>, we wrote a function that returned a Plain Old JavaScript Object. The colloquial term for this kind of function is a “Factory Function.”</p>

<p>Let’s strip a function down to the very bare essentials:</p>

<div class="code-block">
<div class="highlight"><pre><code class="lineno">1</code> <code class="kd">var</code> <code class="nx">Ur</code> <code class="o">=</code> <code class="kd">function</code> <code class="p">()</code> <code class="p">{};</code>
</pre></div>

</div>

<p>This doesn’t look like a factory function: It doesn’t have an expression that yields a Plain Old JavaScript Object when the function is applied. Yet, there is a way to make an object out of it. Behold the power of the <code>new</code> keyword:</p>

<div class="code-block">
<div class="highlight"><pre><code class="lineno">1</code> <code class="n">new</code> <code class="n">Ur</code><code class="p">()</code>
<code class="lineno">2</code>   <code class="c1">//=&gt; {}</code>
</pre></div>

</div>

<p>We got an object back! What can we find out about this object?</p>

<div class="code-block">
<div class="highlight"><pre><code class="lineno">1</code> <code class="n">new</code> <code class="n">Ur</code><code class="p">()</code> <code class="o">===</code> <code class="n">new</code> <code class="n">Ur</code><code class="p">()</code>
<code class="lineno">2</code>   <code class="c1">//=&gt; false</code>
</pre></div>

</div>

<p>Every time we call <code>new</code> with a function and get an object back, we get a unique object. We could call these “Objects created with the <code>new</code> keyword,” but this would be cumbersome. So we’re going to call them <em>instances</em>. Instances of what? Instances of the function that creates them. So given <code>var i = new Ur()</code>, we say that <code>i</code> is an instance of <code>Ur</code>.</p>

<p>For reasons that will be explained after we’ve discussed prototypes, we also say that <code>Ur</code> is the <em>constructor</em> of <code>i</code>, and that <code>Ur</code> is a <em>constructor function</em>. Therefore, an instance is an object created by using the <code>new</code> keyword on a constructor function, and that function is the instance’s constructor.</p>

<h4 id="leanpub-auto-prototypes">prototypes</h4>

<p>There’s more. Here’s something you may not know about functions:</p>

<div class="code-block">
<div class="highlight"><pre><code class="lineno">1</code> <code class="n">Ur</code><code class="p">.</code><code class="n">prototype</code>
<code class="lineno">2</code>   <code class="c1">//=&gt; {}</code>
</pre></div>

</div>

<p>What’s this prototype? Let’s run our standard test:</p>

<div class="code-block">
<div class="highlight"><pre><code class="lineno">1</code> <code class="p">(</code><code class="kd">function</code> <code class="p">()</code> <code class="p">{}).</code><code class="nx">prototype</code> <code class="o">===</code> <code class="p">(</code><code class="kd">function</code> <code class="p">()</code> <code class="p">{}).</code><code class="nx">prototype</code>
<code class="lineno">2</code>   <code class="c1">//=&gt; false</code>
</pre></div>

</div>

<p>Every function is initialized with its own unique <code>prototype</code>. What does it do? Let’s try something:</p>

<div class="code-block">
<div class="highlight"><pre><code class="lineno">1</code> <code class="n">Ur</code><code class="p">.</code><code class="n">prototype</code><code class="p">.</code><code class="n">language</code> <code class="o">=</code> <code class="err">'</code><code class="n">JavaScript</code><code class="err">'</code><code class="p">;</code>
<code class="lineno">2</code> 
<code class="lineno">3</code> <code class="n">var</code> <code class="n">continent</code> <code class="o">=</code> <code class="n">new</code> <code class="n">Ur</code><code class="p">();</code>
<code class="lineno">4</code>   <code class="c1">//=&gt; {}</code>
<code class="lineno">5</code> <code class="n">continent</code><code class="p">.</code><code class="n">language</code>
<code class="lineno">6</code>   <code class="c1">//=&gt; 'JavaScript'</code>
</pre></div>

</div>

<p>That’s very interesting! Instances seem to behave as if they had the same elements as their constructor’s prototype. Let’s try a few things:</p>

<div class="code-block">
<div class="highlight"><pre><code class="lineno">1</code> <code class="n">continent</code><code class="p">.</code><code class="n">language</code> <code class="o">=</code> <code class="err">'</code><code class="n">CoffeeScript</code><code class="err">'</code><code class="p">;</code>
<code class="lineno">2</code> <code class="n">continent</code>
<code class="lineno">3</code>   <code class="c1">//=&gt; {language: 'CoffeeScript'}</code>
<code class="lineno">4</code> <code class="n">continent</code><code class="p">.</code><code class="n">language</code>
<code class="lineno">5</code>   <code class="c1">//=&gt; 'CoffeeScript'</code>
<code class="lineno">6</code> <code class="n">Ur</code><code class="p">.</code><code class="n">prototype</code><code class="p">.</code><code class="n">language</code>
<code class="lineno">7</code>   <code class="err">'</code><code class="n">JavaScript</code><code class="err">'</code>
</pre></div>

</div>

<p>You can set elements of an instance, and they “override” the constructor’s prototype, but they don’t actually change the constructor’s prototype. Let’s make another instance and try something else.</p>

<div class="code-block">
<div class="highlight"><pre><code class="lineno">1</code> <code class="n">var</code> <code class="n">another</code> <code class="o">=</code> <code class="n">new</code> <code class="n">Ur</code><code class="p">();</code>
<code class="lineno">2</code>   <code class="c1">//=&gt; {}</code>
<code class="lineno">3</code> <code class="n">another</code><code class="p">.</code><code class="n">language</code>
<code class="lineno">4</code>   <code class="c1">//=&gt; 'JavaScript'</code>
</pre></div>

</div>

<p>New instances don’t acquire any changes made to other instances. Makes sense. And:</p>

<div class="code-block">
<div class="highlight"><pre><code class="lineno">1</code> <code class="n">Ur</code><code class="p">.</code><code class="n">prototype</code><code class="p">.</code><code class="n">language</code> <code class="o">=</code> <code class="err">'</code><code class="n">Sumerian</code><code class="err">'</code>
<code class="lineno">2</code> <code class="n">another</code><code class="p">.</code><code class="n">language</code>
<code class="lineno">3</code>   <code class="c1">//=&gt; 'Sumerian'</code>
</pre></div>

</div>

<p>Even more interesting: Changing the constructor’s prototype changes the behaviour of all of its instances. This strongly implies that there is a dynamic relationship between instances and their constructors, rather than some kind of mechanism that makes objects by copying.<sup id="fnref-dynamic"><a href="#fn-dynamic" rel="footnote">32</a></sup></p>

<p>Speaking of prototypes, here’s something else that’s very interesting:</p>

<div class="code-block">
<div class="highlight"><pre><code class="lineno">1</code> <code class="n">continent</code><code class="p">.</code><code class="n">constructor</code>
<code class="lineno">2</code>   <code class="c1">//=&gt; [Function]</code>
<code class="lineno">3</code>   
<code class="lineno">4</code> <code class="n">continent</code><code class="p">.</code><code class="n">constructor</code> <code class="o">===</code> <code class="n">Ur</code>
<code class="lineno">5</code>   <code class="c1">//=&gt; true</code>
</pre></div>

</div>

<p>Every instance acquires a <code>constructor</code> element that is initialized to their constructor. This is true even for objects we don’t create with <code>new</code> in our own code:</p>

<div class="code-block">
<div class="highlight"><pre><code class="lineno">1</code> <code class="p">{}.</code><code class="n">constructor</code>
<code class="lineno">2</code>   <code class="c1">//=&gt; [Function: Object]</code>
</pre></div>

</div>

<p>If that’s true, what about prototypes? Do they have constructors?</p>

<div class="code-block">
<div class="highlight"><pre><code class="lineno">1</code> <code class="n">Ur</code><code class="p">.</code><code class="n">prototype</code><code class="p">.</code><code class="n">constructor</code>
<code class="lineno">2</code>   <code class="c1">//=&gt; [Function]</code>
<code class="lineno">3</code> <code class="n">Ur</code><code class="p">.</code><code class="n">prototype</code><code class="p">.</code><code class="n">constructor</code> <code class="o">===</code> <code class="n">Ur</code>
<code class="lineno">4</code>   <code class="c1">//=&gt; true</code>
</pre></div>

</div>

<p>Very interesting! We will take another look at the <code>constructor</code> element when we discuss <a href="#classextension">class extension</a>.</p>

<h4 id="leanpub-auto-revisiting-this-idea-of-queues">revisiting <code>this</code> idea of queues</h4>

<p>Let’s rewrite our Queue to use <code>new</code> and <code>.prototype</code>, using <code>this</code> and our <code>extends</code> helper from <a href="#composition">Composition and Extension</a>:</p>

<div class="code-block">
<div class="highlight"><pre><code class="lineno"> 1</code> <code class="kd">var</code> <code class="nx">Queue</code> <code class="o">=</code> <code class="kd">function</code> <code class="p">()</code> <code class="p">{</code>
<code class="lineno"> 2</code>   <code class="nx">extend</code><code class="p">(</code><code class="k">this</code><code class="p">,</code> <code class="p">{</code>
<code class="lineno"> 3</code>     <code class="nx">array</code><code class="o">:</code> <code class="cp">[]</code><code class="p">,</code>
<code class="lineno"> 4</code>     <code class="nx">head</code><code class="o">:</code> <code class="mi">0</code><code class="p">,</code>
<code class="lineno"> 5</code>     <code class="nx">tail</code><code class="o">:</code> <code class="o">-</code><code class="mi">1</code>
<code class="lineno"> 6</code>   <code class="p">})</code>
<code class="lineno"> 7</code> <code class="p">};</code>
<code class="lineno"> 8</code>   
<code class="lineno"> 9</code> <code class="nx">extend</code><code class="p">(</code><code class="nx">Queue</code><code class="p">.</code><code class="nx">prototype</code><code class="p">,</code> <code class="p">{</code>
<code class="lineno">10</code>   <code class="nx">pushTail</code><code class="o">:</code> <code class="kd">function</code> <code class="p">(</code><code class="nx">value</code><code class="p">)</code> <code class="p">{</code>
<code class="lineno">11</code>     <code class="k">return</code> <code class="k">this</code><code class="p">.</code><code class="nx">array</code><code class="cp">[</code><code class="nx">this.tail</code> <code class="o">+=</code> <code class="mi">1</code><code class="cp">]</code> <code class="o">=</code> <code class="nx">value</code>
<code class="lineno">12</code>   <code class="p">},</code>
<code class="lineno">13</code>   <code class="nx">pullHead</code><code class="o">:</code> <code class="kd">function</code> <code class="p">()</code> <code class="p">{</code>
<code class="lineno">14</code>     <code class="kd">var</code> <code class="nx">value</code><code class="p">;</code>
<code class="lineno">15</code>     
<code class="lineno">16</code>     <code class="k">if</code> <code class="p">(</code><code class="o">!</code><code class="k">this</code><code class="p">.</code><code class="nx">isEmpty</code><code class="p">())</code> <code class="p">{</code>
<code class="lineno">17</code>       <code class="nx">value</code> <code class="o">=</code> <code class="k">this</code><code class="p">.</code><code class="nx">array</code><code class="cp">[</code><code class="nx">this.head</code><code class="cp">]</code>
<code class="lineno">18</code>       <code class="k">this</code><code class="p">.</code><code class="nx">array</code><code class="cp">[</code><code class="nx">this.head</code><code class="cp">]</code> <code class="o">=</code> <code class="k">void</code> <code class="mi">0</code><code class="p">;</code>
<code class="lineno">19</code>       <code class="k">this</code><code class="p">.</code><code class="nx">head</code> <code class="o">+=</code> <code class="mi">1</code><code class="p">;</code>
<code class="lineno">20</code>       <code class="k">return</code> <code class="nx">value</code>
<code class="lineno">21</code>     <code class="p">}</code>
<code class="lineno">22</code>   <code class="p">},</code>
<code class="lineno">23</code>   <code class="nx">isEmpty</code><code class="o">:</code> <code class="kd">function</code> <code class="p">()</code> <code class="p">{</code>
<code class="lineno">24</code>     <code class="k">return</code> <code class="k">this</code><code class="p">.</code><code class="nx">tail</code> <code class="o">&lt;</code> <code class="k">this</code><code class="p">.</code><code class="nx">head</code>
<code class="lineno">25</code>   <code class="p">}</code>      
<code class="lineno">26</code> <code class="p">})</code>
</pre></div>

</div>

<p>You recall that when we first looked at <code>this</code>, we only covered the case where a function that belongs to an object is invoked. Now we see another case: When a function is invoked by the <code>new</code> operator, <code>this</code> is set to the new object being created. Thus, our code for <code>Queue</code> initializes the queue.</p>

<p>You can see why <code>this</code> is so handy in JavaScript: We wouldn’t be able to define functions in the prototype that worked on the instance if JavaScript didn’t give us an easy way to refer to the instance itself.</p>

<h4 id="objectseverywhere">objects everywhere?</h4>

<p>Now that you know about prototypes, it’s time to acknowledge something that even small children know: Everything in JavaScript behaves like an object, everything in JavaScript behaves like an instance of a function, and therefore everything in JavaScript behaves as if it inherits some methods from its constructor’s prototype and/or has some elements of its own.</p>

<p>For example:</p>

<div class="code-block">
<div class="highlight"><pre><code class="lineno"> 1</code> <code class="mf">3.14159265</code><code class="p">.</code><code class="n">toPrecision</code><code class="p">(</code><code class="mi">5</code><code class="p">)</code>
<code class="lineno"> 2</code>   <code class="c1">//=&gt; '3.1415'</code>
<code class="lineno"> 3</code>   
<code class="lineno"> 4</code> <code class="err">'</code><code class="n">FORTRAN</code><code class="p">,</code> <code class="n">SNOBOL</code><code class="p">,</code> <code class="n">LISP</code><code class="p">,</code> <code class="n">BASIC</code><code class="err">'</code><code class="p">.</code><code class="n">split</code><code class="p">(</code><code class="err">'</code><code class="p">,</code> <code class="err">'</code><code class="p">)</code>
<code class="lineno"> 5</code>   <code class="c1">//=&gt; [ 'FORTRAN',</code>
<code class="lineno"> 6</code>   <code class="err">#</code>     <code class="err">'</code><code class="n">SNOBOL</code><code class="err">'</code><code class="p">,</code>
<code class="lineno"> 7</code>   <code class="err">#</code>     <code class="err">'</code><code class="n">LISP</code><code class="err">'</code><code class="p">,</code>
<code class="lineno"> 8</code>   <code class="err">#</code>     <code class="err">'</code><code class="n">BASIC</code><code class="err">'</code> <code class="p">]</code>
<code class="lineno"> 9</code>   
<code class="lineno">10</code> <code class="p">[</code> <code class="err">'</code><code class="n">FORTRAN</code><code class="err">'</code><code class="p">,</code>
<code class="lineno">11</code>   <code class="err">'</code><code class="n">SNOBOL</code><code class="err">'</code><code class="p">,</code>
<code class="lineno">12</code>   <code class="err">'</code><code class="n">LISP</code><code class="err">'</code><code class="p">,</code>
<code class="lineno">13</code>   <code class="err">'</code><code class="n">BASIC</code><code class="err">'</code> <code class="p">].</code><code class="n">length</code>
<code class="lineno">14</code> <code class="c1">//=&gt; 4</code>
</pre></div>

</div>

<p>Functions themselves are instances, and they have methods. For example, every function has a method <code>call</code>. <code>call</code>’s first argument is a <em>context</em>: When you invoke <code>.call</code> on a function, it invoked the function, setting <code>this</code> to the context. It passes the remainder of the arguments to the function. It seems like objects are everywhere in JavaScript!</p>

<h4 id="leanpub-auto-impostors">impostors</h4>

<p>You may have noticed that we use “weasel words” to describe how everything in JavaScript <em>behaves like</em> an instance. Everything <em>behaves as if</em> it was created by a function with a prototype.</p>

<p>The full explanation is this: As you know, JavaScript has “value types” like <code>String</code>, <code>Number</code>, and <code>Boolean</code>. As noted in the first chapter, value types are also called <em>primitives</em>, and one consequence of the way JavaScript implements primitives is that they aren’t objects. Which means they can be identical to other values of the same type with the same contents, but the consequence of certain design decisions is that value types don’t actually have methods or constructors. They aren’t instances of some constructor.</p>

<p>So. Value types don’t have methods or constructors. And yet:</p>

<div class="code-block">
<div class="highlight"><pre><code class="lineno">1</code> <code class="s">"Spence Olham"</code><code class="p">.</code><code class="n">split</code><code class="p">(</code><code class="sc">' '</code><code class="p">)</code>
<code class="lineno">2</code>   <code class="c1">//=&gt; ["Spence", "Olham"]</code>
</pre></div>

</div>

<p>Somehow, when we write <code>"Spence Olham".split(' ')</code>, the string <code>"Spence Olham"</code> isn’t an instance, it doesn’t have methods, but it does a damn fine job of impersonating an instance of a <code>String</code> constructor. How does <code>"Spence Olham"</code> impersonate an instance?</p>

<p>JavaScript pulls some legerdemain. When you do something that treats a value like an object, JavaScript checks to see whether the value actually is an object. If the value is actually a primitive,<sup id="fnref-reminder"><a href="#fn-reminder" rel="footnote">33</a></sup> JavaScript temporarily makes an object that is a kinda-sorta copy of the primitive and that kinda-sorta copy has methods and you are temporarily fooled into thinking that <code>"Spence Olham"</code> has a <code>.split</code> method.</p>

<p>These kinda-sorta copies are called String <em>instances</em> as opposed to String <em>primitives</em>. And the instances have methods, while the primitives do not. How does JavaScript make an instance out of a primitive? With <code>new</code>, of course. Let’s try it:</p>

<div class="code-block">
<div class="highlight"><pre><code class="lineno">1</code> <code class="n">new</code> <code class="n">String</code><code class="p">(</code><code class="s">"Spence Olham"</code><code class="p">)</code>
<code class="lineno">2</code>   <code class="c1">//=&gt; "Spence Olham"</code>
</pre></div>

</div>

<p>The string instance looks just like our string primitive. But does it behave like a string primitive? Not entirely:</p>

<div class="code-block">
<div class="highlight"><pre><code class="lineno">1</code> <code class="n">new</code> <code class="n">String</code><code class="p">(</code><code class="s">"Spence Olham"</code><code class="p">)</code> <code class="o">===</code> <code class="s">"Spence Olham"</code>
<code class="lineno">2</code>   <code class="c1">//=&gt; false</code>
</pre></div>

</div>

<p>Aha! It’s an object with its own identity, unlike string primitives that behave as if they have a canonical representation. If we didn’t care about their identity, that wouldn’t be a problem. But if we carelessly used a string instance where we thought we had a string primitive, we could run into a subtle bug:</p>

<div class="code-block">
<div class="highlight"><pre><code class="lineno">1</code> <code class="k">if</code> <code class="p">(</code><code class="n">userName</code> <code class="o">===</code> <code class="s">"Spence Olham"</code><code class="p">)</code> <code class="p">{</code>
<code class="lineno">2</code>   <code class="n">getMarried</code><code class="p">();</code>
<code class="lineno">3</code>   <code class="n">goCamping</code><code class="p">()</code>
<code class="lineno">4</code> <code class="p">}</code>
</pre></div>

</div>

<p>That code is not going to work as we expect should we accidentally bind <code>new String("Spence Olham")</code> to <code>userName</code> instead of the primitive <code>"Spence Olham"</code>.</p>

<p>This basic issue that instances have unique identities but primitives with the same contents have the same identities–is true of all primitive types, including numbers and booleans: If you create an instance of anything with <code>new</code>, it gets its own identity.</p>

<p>There are more pitfalls to beware. Consider the truthiness of string, number and boolean primitives:</p>

<div class="code-block">
<div class="highlight"><pre><code class="lineno">1</code> <code class="err">''</code> <code class="o">?</code> <code class="err">'</code><code class="n">truthy</code><code class="err">'</code> <code class="o">:</code> <code class="err">'</code><code class="n">falsy</code><code class="err">'</code>
<code class="lineno">2</code>   <code class="c1">//=&gt; 'falsy'</code>
<code class="lineno">3</code> <code class="mi">0</code> <code class="o">?</code> <code class="err">'</code><code class="n">truthy</code><code class="err">'</code> <code class="o">:</code> <code class="err">'</code><code class="n">falsy</code><code class="err">'</code>
<code class="lineno">4</code>   <code class="c1">//=&gt; 'falsy'</code>
<code class="lineno">5</code> <code class="nb">false</code> <code class="o">?</code> <code class="err">'</code><code class="n">truthy</code><code class="err">'</code> <code class="o">:</code> <code class="err">'</code><code class="n">falsy</code><code class="err">'</code>
<code class="lineno">6</code>   <code class="c1">//=&gt; 'falsy'</code>
</pre></div>

</div>

<p>Compare this to their corresponding instances:</p>

<div class="code-block">
<div class="highlight"><pre><code class="lineno">1</code> <code class="n">new</code> <code class="n">String</code><code class="p">(</code><code class="err">''</code><code class="p">)</code> <code class="o">?</code> <code class="err">'</code><code class="n">truthy</code><code class="err">'</code> <code class="o">:</code> <code class="err">'</code><code class="n">falsy</code><code class="err">'</code>
<code class="lineno">2</code>   <code class="c1">//=&gt; 'truthy'</code>
<code class="lineno">3</code> <code class="n">new</code> <code class="n">Number</code><code class="p">(</code><code class="mi">0</code><code class="p">)</code> <code class="o">?</code> <code class="err">'</code><code class="n">truthy</code><code class="err">'</code> <code class="o">:</code> <code class="err">'</code><code class="n">falsy</code><code class="err">'</code>
<code class="lineno">4</code>   <code class="c1">//=&gt; 'truthy'</code>
<code class="lineno">5</code> <code class="n">new</code> <code class="n">Boolean</code><code class="p">(</code><code class="nb">false</code><code class="p">)</code> <code class="o">?</code> <code class="err">'</code><code class="n">truthy</code><code class="err">'</code> <code class="o">:</code> <code class="err">'</code><code class="n">falsy</code><code class="err">'</code>
<code class="lineno">6</code>   <code class="c1">//=&gt; 'truthy'</code>
</pre></div>

</div>

<p>Our notion of “truthiness” and “falsiness” is that all instances are truthy, even string, number, and boolean instances corresponding to primitives that are falsy.</p>

<p>There is one sure cure for “JavaScript Impostor Syndrome.” Just as <code>new PrimitiveType(...)</code> creates an instance that is an impostor of a primitive, <code>PrimitiveType(...)</code> creates an original, canonicalized primitive from a primitive or an instance of a primitive object.</p>

<p>For example:</p>

<div class="code-block">
<div class="highlight"><pre><code class="lineno">1</code> <code class="n">String</code><code class="p">(</code><code class="n">new</code> <code class="n">String</code><code class="p">(</code><code class="s">"Spence Olham"</code><code class="p">))</code> <code class="o">===</code> <code class="s">"Spence Olham"</code>
<code class="lineno">2</code>   <code class="c1">//=&gt; true</code>
</pre></div>

</div>

<p>Getting clever, we can write this:</p>

<div class="code-block">
<div class="highlight"><pre><code class="lineno">1</code> <code class="kd">var</code> <code class="nx">original</code> <code class="o">=</code> <code class="kd">function</code> <code class="p">(</code><code class="nx">unknown</code><code class="p">)</code> <code class="p">{</code>
<code class="lineno">2</code>   <code class="k">return</code> <code class="nx">unknown</code><code class="p">.</code><code class="nx">constructor</code><code class="p">(</code><code class="nx">unknown</code><code class="p">)</code>
<code class="lineno">3</code> <code class="p">}</code>
<code class="lineno">4</code>     
<code class="lineno">5</code> <code class="nx">original</code><code class="p">(</code><code class="kc">true</code><code class="p">)</code> <code class="o">===</code> <code class="kc">true</code>
<code class="lineno">6</code>   <code class="c1">//=&gt; true</code>
<code class="lineno">7</code> <code class="nx">original</code><code class="p">(</code><code class="k">new</code> <code class="nb">Boolean</code><code class="p">(</code><code class="kc">true</code><code class="p">))</code> <code class="o">===</code> <code class="kc">true</code>
<code class="lineno">8</code>   <code class="c1">//=&gt; true</code>
</pre></div>

</div>

<p>Of course, <code>original</code> will not work for your own creations unless you take great care to emulate the same behaviour. But it does work for strings, numbers, and booleans.</p>

<h3 id="binding">Binding Functions to Contexts</h3>

<p>Recall that in <a href="#context">What Context Applies When We Call a Function?</a>, we adjourned our look at setting the context of a function with a look at a <code>contextualize</code> helper function:</p>

<div class="code-block">
<div class="highlight"><pre><code class="lineno"> 1</code> <code class="kd">var</code> <code class="nx">contextualize</code> <code class="o">=</code> <code class="kd">function</code> <code class="p">(</code><code class="nx">fn</code><code class="p">,</code> <code class="nx">context</code><code class="p">)</code> <code class="p">{</code>
<code class="lineno"> 2</code>   <code class="k">return</code> <code class="kd">function</code> <code class="p">()</code> <code class="p">{</code>
<code class="lineno"> 3</code>     <code class="k">return</code> <code class="nx">fn</code><code class="p">.</code><code class="nx">apply</code><code class="p">(</code><code class="nx">context</code><code class="p">,</code> <code class="nx">arguments</code><code class="p">)</code>
<code class="lineno"> 4</code>   <code class="p">}</code>
<code class="lineno"> 5</code> <code class="p">},</code>
<code class="lineno"> 6</code> <code class="nx">a</code> <code class="o">=</code> <code class="cp">[</code><code class="mi">1</code><code class="p">,</code><code class="mi">2</code><code class="p">,</code><code class="mi">3</code><code class="cp">]</code><code class="p">,</code>
<code class="lineno"> 7</code> <code class="nx">accrete</code> <code class="o">=</code> <code class="nx">contextualize</code><code class="p">(</code><code class="nx">a</code><code class="p">.</code><code class="nx">concat</code><code class="p">,</code> <code class="nx">a</code><code class="p">);</code>
<code class="lineno"> 8</code>     
<code class="lineno"> 9</code> <code class="nx">accrete</code><code class="p">(</code><code class="cp">[</code><code class="mi">4</code><code class="p">,</code><code class="mi">5</code><code class="cp">]</code><code class="p">)</code>
<code class="lineno">10</code>   <code class="c1">//=&gt; </code><code class="cp">[</code> <code class="mi">1</code><code class="p">,</code> <code class="mi">2</code><code class="p">,</code> <code class="mi">3</code><code class="p">,</code> <code class="mi">4</code><code class="p">,</code> <code class="mi">5</code> <code class="cp">]</code><code class="c1"></code>
</pre></div>

</div>

<p>How would this help us in a practical way? Consider building an event-driven application. For example, an MVC application would bind certain views to update events when their models change. The <a href="http://backbonejs.org">Backbone</a> framework uses events just like this:</p>

<div class="code-block">
<div class="highlight"><pre><code class="lineno">1</code> <code class="kd">var</code> <code class="nx">someView</code> <code class="o">=</code> <code class="p">...,</code>
<code class="lineno">2</code>     <code class="nx">someModel</code> <code class="o">=</code> <code class="p">...;</code>
<code class="lineno">3</code> 
<code class="lineno">4</code> <code class="nx">someModel</code><code class="p">.</code><code class="nx">on</code><code class="p">(</code><code class="s1">'change'</code><code class="p">,</code> <code class="kd">function</code> <code class="p">()</code> <code class="p">{</code>
<code class="lineno">5</code>   <code class="nx">someView</code><code class="p">.</code><code class="nx">render</code><code class="p">()</code>
<code class="lineno">6</code> <code class="p">});</code>
</pre></div>

</div>

<p>This tells <code>someModel</code> that when it invoked a <code>change</code> event, it should call the anonymous function that in turn invoked <code>someView</code>’s <code>.render</code> method. Wouldn’t it be simpler to simply write:</p>

<div class="code-block">
<div class="highlight"><pre><code class="lineno">1</code> <code class="n">someModel</code><code class="p">.</code><code class="n">on</code><code class="p">(</code><code class="err">'</code><code class="n">change</code><code class="err">'</code><code class="p">,</code> <code class="n">someView</code><code class="p">.</code><code class="n">render</code><code class="p">);</code>
</pre></div>

</div>

<p>It would, except that the implementation for <code>.on</code> and similar framework methods looks something like this:</p>

<div class="code-block">
<div class="highlight"><pre><code class="lineno">1</code> <code class="nx">Model</code><code class="p">.</code><code class="nx">prototype</code><code class="p">.</code><code class="nx">on</code> <code class="o">=</code> <code class="kd">function</code> <code class="p">(</code><code class="nx">eventName</code><code class="p">,</code> <code class="nx">callback</code><code class="p">)</code> <code class="p">{</code> <code class="p">...</code> <code class="nx">callback</code><code class="p">()</code> <code class="p">...</code> <code class="p">}</code>
</pre></div>

</div>

<p>Although <code>someView.render()</code> correctly sets the method’s context as <code>someView</code>, <code>callback()</code> will not. What can we do without wrapping <code>someView.render()</code> in a function call as we did above?</p>

<h4 id="leanpub-auto-binding-methods">binding methods</h4>

<p>Before enumerating approaches, let’s describe what we’re trying to do. We want to take a method call and treat it as a function. Now, methods are functions in JavaScript, but as we’ve learned from looking at contexts, method calls involve both invoking a function <em>and</em> setting the context of the function call to be the receiver of the method call.</p>

<p>When we write something like:</p>

<div class="code-block">
<div class="highlight"><pre><code class="lineno">1</code> <code class="n">var</code> <code class="n">unbound</code> <code class="o">=</code> <code class="n">someObject</code><code class="p">.</code><code class="n">someMethod</code><code class="p">;</code>
</pre></div>

</div>

<p>We’re binding the name <code>unbound</code> to the method’s function, but we aren’t doing anything with the identity of the receiver. In most programming languages, such methods are called “unbound” methods because they aren’t associated with, or “bound” to the intended receiver.</p>

<p>So what we’re really trying to do is get ahold of a <em>bound</em> method, a method that is associated with a specific receiver. We saw an obvious way to do that above, to wrap the method call in another function. Of course, we’re responsible for replicating the <em>arity</em> of the method being bound. For example:</p>

<div class="code-block">
<div class="highlight"><pre><code class="lineno">1</code> <code class="kd">var</code> <code class="nx">boundSetter</code> <code class="o">=</code> <code class="kd">function</code> <code class="p">(</code><code class="nx">value</code><code class="p">)</code> <code class="p">{</code>
<code class="lineno">2</code>   <code class="k">return</code> <code class="nx">someObject</code><code class="p">.</code><code class="nx">setSomeValue</code><code class="p">(</code><code class="nx">value</code><code class="p">);</code>
<code class="lineno">3</code> <code class="p">};</code>
</pre></div>

</div>

<p>Now our bound method takes one argument, just like the function it calls. We can use a bound method anywhere:</p>

<div class="code-block">
<div class="highlight"><pre><code class="lineno">1</code> <code class="n">someDomField</code><code class="p">.</code><code class="n">on</code><code class="p">(</code><code class="err">'</code><code class="n">update</code><code class="err">'</code><code class="p">,</code> <code class="n">boundSetter</code><code class="p">);</code>
</pre></div>

</div>

<p>This pattern is very handy, but it requires keeping track of these bound methods. One thing we can do is bind the method “in place,” using the <code>let</code> pattern like this:</p>

<div class="code-block">
<div class="highlight"><pre><code class="lineno">1</code> <code class="nx">someObject</code><code class="p">.</code><code class="nx">setSomeValue</code> <code class="o">=</code> <code class="p">(</code><code class="kd">function</code> <code class="p">()</code> <code class="p">{</code>
<code class="lineno">2</code>   <code class="kd">var</code> <code class="nx">unboundMethod</code> <code class="o">=</code> <code class="nx">someObject</code><code class="p">.</code><code class="nx">setSomeValue</code><code class="p">;</code>
<code class="lineno">3</code>   
<code class="lineno">4</code>   <code class="k">return</code> <code class="kd">function</code> <code class="p">(</code><code class="nx">value</code><code class="p">)</code> <code class="p">{</code>
<code class="lineno">5</code>     <code class="k">return</code> <code class="nx">unboundMethod</code><code class="p">.</code><code class="nx">call</code><code class="p">(</code><code class="nx">someObject</code><code class="p">,</code> <code class="nx">value</code><code class="p">);</code>
<code class="lineno">6</code>   <code class="p">}</code>
<code class="lineno">7</code> <code class="p">})();</code>
</pre></div>

</div>

<p>Now we know where to find it:</p>

<div class="code-block">
<div class="highlight"><pre><code class="lineno">1</code> <code class="n">someDomField</code><code class="p">.</code><code class="n">on</code><code class="p">(</code><code class="err">'</code><code class="n">update</code><code class="err">'</code><code class="p">,</code> <code class="n">someObject</code><code class="p">.</code><code class="n">setSomeValue</code><code class="p">);</code>
</pre></div>

</div>

<p>This is a very popular pattern, so much so that many frameworks provide helper functions to make this easy. <a href="http://underscorejs.org">Underscore</a>, for example, provides <code>_.bind</code> to return a bound copy of a function and <code>_.bindAll</code> to bind methods in place:</p>

<div class="code-block">
<div class="highlight"><pre><code class="lineno">1</code> <code class="c1">// bind *all* of someObject's methods in place</code>
<code class="lineno">2</code> <code class="n">_</code><code class="p">.</code><code class="n">bindAll</code><code class="p">(</code><code class="n">someObject</code><code class="p">);</code> 
<code class="lineno">3</code> 
<code class="lineno">4</code> <code class="c1">// bind setSomeValue and someMethod in place</code>
<code class="lineno">5</code> <code class="n">_</code><code class="p">.</code><code class="n">bindAll</code><code class="p">(</code><code class="n">someObject</code><code class="p">,</code> <code class="p">'</code><code class="n">setSomeValue</code><code class="p">',</code> <code class="p">'</code><code class="n">someMethod</code><code class="p">');</code>
</pre></div>

</div>

<p>There are two considerations to ponder. First, we may be converting an instance method into an object method. Specifically, we’re creating an object method that is bound to the object.</p>

<p>Most of the time, the only change this makes is that it uses slightly more memory (we’re creating an extra function for each bound method in each object). But if you are a little more dynamic and actually change methods in the prototype, your changes won’t “override” the object methods that you created. You’d have to roll your own binding method that refers to the prototype’s method dynamically or reorganize your code.</p>

<p>This is one of the realities of “meta-programming.” Each technique looks useful and interesting in isolation, but when multiple techniques are used together, they can have unpredictable results. It’s not surprising, because most popular languages consider classes and methods to be fairly global, and they handle dynamic changes through side-effects. This is roughly equivalent to programming in 1970s-era BASIC by imperatively changing global variables.</p>

<p>If you aren’t working with old JavaScript environments in non-current browsers, you needn’t use a framework or roll your own binding functions: JavaScript has a <a href="https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/Function/bind"><code>.bind</code></a> method defined for functions:</p>

<div class="code-block">
<div class="highlight"><pre><code class="lineno">1</code> <code class="n">someObject</code><code class="p">.</code><code class="n">someMethod</code> <code class="o">=</code> <code class="n">someObject</code><code class="p">.</code><code class="n">someMethod</code><code class="p">.</code><code class="n">bind</code><code class="p">(</code><code class="n">someObject</code><code class="p">);</code>
</pre></div>

</div>

<p><code>.bind</code> also does some currying for you, you can bind one or more arguments in addition to the context. For example:</p>

<div class="code-block">
<div class="highlight"><pre><code class="lineno"> 1</code> <code class="n">AccountModel</code><code class="p">.</code><code class="n">prototype</code><code class="p">.</code><code class="n">getBalancePromise</code><code class="p">(</code><code class="n">forceRemote</code><code class="p">)</code> <code class="o">=</code> <code class="p">{</code>
<code class="lineno"> 2</code>   <code class="c1">// if forceRemote is true, always goes to the remote</code>
<code class="lineno"> 3</code>   <code class="c1">// database for the most real-time value, returns</code>
<code class="lineno"> 4</code>   <code class="c1">// a promise.</code>
<code class="lineno"> 5</code> <code class="p">};</code>
<code class="lineno"> 6</code> 
<code class="lineno"> 7</code> <code class="n">var</code> <code class="n">account</code> <code class="o">=</code> <code class="n">new</code> <code class="n">AccountModel</code><code class="p">(...);</code>
<code class="lineno"> 8</code> 
<code class="lineno"> 9</code> <code class="n">var</code> <code class="n">boundGetRemoteBalancePromise</code> <code class="o">=</code> <code class="n">account</code><code class="p">.</code>
<code class="lineno">10</code>   <code class="n">getBalancePromise</code><code class="p">.</code>
<code class="lineno">11</code>   <code class="n">bind</code><code class="p">(</code><code class="n">account</code><code class="p">,</code> <code class="nb">true</code><code class="p">);</code>
</pre></div>

</div>

<p>Very handy, and not just for binding contexts!</p>

<table class="tip sidebarish"><tbody><tr>
<td class="sidebar-icon">
      <img class="sidebar-image" src="/site_images/javascript-allonge/leanpub_key.png" alt="tip">
</td>
    <td>
      <p>Getting the context right for methods is essential. The commonplace terminology is that we want bound methods rather than unbound methods. Current flavours of JavaScript provide a <code>.bind</code> method to help, and frameworks like Underscore also provide helpers to make binding methods easy.</p>

    </td>
  </tr></tbody></table>
<h3 id="pabc">Partial Application, Binding, and Currying</h3>

<p>Now that we’ve seen how function contexts work, we can revisit the subject of partial application. Recall our recipe for a generalized left partial application:</p>

<div class="code-block">
<div class="highlight"><pre><code class="lineno">1</code> <code class="kd">var</code> <code class="nx">callLeft</code> <code class="o">=</code> <code class="nx">variadic</code><code class="p">(</code> <code class="kd">function</code> <code class="p">(</code><code class="nx">fn</code><code class="p">,</code> <code class="nx">args</code><code class="p">)</code> <code class="p">{</code>
<code class="lineno">2</code>   <code class="k">return</code> <code class="nx">variadic</code><code class="p">(</code> <code class="kd">function</code> <code class="p">(</code><code class="nx">remainingArgs</code><code class="p">)</code> <code class="p">{</code>
<code class="lineno">3</code>     <code class="k">return</code> <code class="nx">fn</code><code class="p">.</code><code class="nx">apply</code><code class="p">(</code><code class="k">this</code><code class="p">,</code> <code class="nx">args</code><code class="p">.</code><code class="nx">concat</code><code class="p">(</code><code class="nx">remainingArgs</code><code class="p">))</code>
<code class="lineno">4</code>   <code class="p">})</code>
<code class="lineno">5</code> <code class="p">})</code>
</pre></div>

</div>

<p><code>Function.prototype.bind</code> can sometimes be used to accomplish the same thing, but will be much faster. For example, instead of:</p>

<div class="code-block">
<div class="highlight"><pre><code class="lineno">1</code> <code class="kd">function</code> <code class="nx">add</code> <code class="p">(</code><code class="nx">verb</code><code class="p">,</code> <code class="nx">a</code><code class="p">,</code> <code class="nx">b</code><code class="p">)</code> <code class="p">{</code> 
<code class="lineno">2</code>   <code class="k">return</code> <code class="s2">"The "</code> <code class="o">+</code> <code class="nx">verb</code> <code class="o">+</code> <code class="s2">" of "</code> <code class="o">+</code> <code class="nx">a</code> <code class="o">+</code> <code class="s1">' and '</code> <code class="o">+</code> <code class="nx">b</code> <code class="o">+</code> <code class="s1">' is '</code> <code class="o">+</code> <code class="p">(</code><code class="nx">a</code> <code class="o">+</code> <code class="nx">b</code><code class="p">)</code> 
<code class="lineno">3</code> <code class="p">}</code>
<code class="lineno">4</code> 
<code class="lineno">5</code> <code class="kd">var</code> <code class="nx">sumFive</code> <code class="o">=</code> <code class="nx">callLeft</code><code class="p">(</code><code class="nx">add</code><code class="p">,</code> <code class="s1">'sum'</code><code class="p">,</code> <code class="mi">5</code><code class="p">);</code>
<code class="lineno">6</code> 
<code class="lineno">7</code> <code class="nx">sumFive</code><code class="p">(</code><code class="mi">6</code><code class="p">)</code>
<code class="lineno">8</code>   <code class="c1">//=&gt; 'The sum of 5 and 6 is 11'</code>
</pre></div>

</div>

<p>You can write:</p>

<div class="code-block">
<div class="highlight"><pre><code class="lineno">1</code> <code class="n">var</code> <code class="n">totalSix</code> <code class="o">=</code> <code class="n">add</code><code class="p">.</code><code class="n">bind</code><code class="p">(</code><code class="n">null</code><code class="p">,</code> <code class="err">'</code><code class="n">total</code><code class="err">'</code><code class="p">,</code> <code class="mi">6</code><code class="p">);</code>
<code class="lineno">2</code> 
<code class="lineno">3</code> <code class="n">totalSix</code><code class="p">(</code><code class="mi">5</code><code class="p">)</code>
<code class="lineno">4</code>   <code class="c1">//=&gt; 'The total of 6 and 5 is 11'</code>
</pre></div>

</div>

<p>The catch is the first parameter to <code>.bind</code>: It sets the context. If you write functions that don’t use the context, like our <code>.add</code>, You can use <code>.bind</code> to do left partial application. But if you want to partially apply a method or other function where the context must be preserved, you can’t use <code>.bind</code>. You can use the recipes given in <em>JavaScript Allongé</em> because they preserve the context properly.</p>

<p>Typically, context matters when you want to perform partial application on methods. So for an extremely simple example, we often use <code>Array.prototype.slice</code> to convert <code>arguments</code> to an array. So instead of:</p>

<div class="code-block">
<div class="highlight"><pre><code class="lineno">1</code> <code class="n">var</code> <code class="n">__slice</code> <code class="o">=</code> <code class="n">Array</code><code class="p">.</code><code class="n">prototype</code><code class="p">.</code><code class="n">slice</code><code class="p">;</code>
<code class="lineno">2</code> 
<code class="lineno">3</code> <code class="n">var</code> <code class="n">array</code> <code class="o">=</code> <code class="n">__slice</code><code class="p">.</code><code class="n">call</code><code class="p">(</code><code class="n">arguments</code><code class="p">,</code> <code class="mi">0</code><code class="p">);</code>
</pre></div>

</div>

<p>We could write:</p>

<div class="code-block">
<div class="highlight"><pre><code class="lineno">1</code> <code class="n">var</code> <code class="n">__copy</code> <code class="o">=</code> <code class="n">callFirst</code><code class="p">(</code><code class="n">Array</code><code class="p">.</code><code class="n">prototype</code><code class="p">.</code><code class="n">slice</code><code class="p">,</code> <code class="mi">0</code><code class="p">);</code>
<code class="lineno">2</code> 
<code class="lineno">3</code> <code class="n">var</code> <code class="n">array</code> <code class="o">=</code> <code class="n">__copy</code><code class="p">.</code><code class="n">call</code><code class="p">(</code><code class="n">arguments</code><code class="p">)</code>
</pre></div>

</div>

<p>The other catch is that <code>.bind</code> only does left partial evaluation. If you want to do right partial application, you’ll need <code>callLast</code> or <code>callRight</code>.</p>

<h4 id="leanpub-auto-currying">currying</h4>

<p>The terms “partial application” and “currying” are closely related but not synonymous. Currying is the act of taking a function that takes more than one argument and converting it to an equivalent function taking one argument. How can such a function be equivalent? It works provided that it returns a partially applied function.</p>

<p>Code is, as usual, much clearer than words. Recall:</p>

<div class="code-block">
<div class="highlight"><pre><code class="lineno">1</code> <code class="kd">function</code> <code class="nx">add</code> <code class="p">(</code><code class="nx">verb</code><code class="p">,</code> <code class="nx">a</code><code class="p">,</code> <code class="nx">b</code><code class="p">)</code> <code class="p">{</code> 
<code class="lineno">2</code>   <code class="k">return</code> <code class="s2">"The "</code> <code class="o">+</code> <code class="nx">verb</code> <code class="o">+</code> <code class="s2">" of "</code> <code class="o">+</code> <code class="nx">a</code> <code class="o">+</code> <code class="s1">' and '</code> <code class="o">+</code> <code class="nx">b</code> <code class="o">+</code> <code class="s1">' is '</code> <code class="o">+</code> <code class="p">(</code><code class="nx">a</code> <code class="o">+</code> <code class="nx">b</code><code class="p">)</code> 
<code class="lineno">3</code> <code class="p">}</code>
<code class="lineno">4</code> 
<code class="lineno">5</code> <code class="nx">add</code><code class="p">(</code><code class="s1">'sum'</code><code class="p">,</code> <code class="mi">5</code><code class="p">,</code> <code class="s1">'6'</code><code class="p">)</code>
<code class="lineno">6</code>   <code class="c1">//=&gt; 'The sum of 5 and 6 is 11'</code>
</pre></div>

</div>

<p>Here is the curried version:</p>

<div class="code-block">
<div class="highlight"><pre><code class="lineno"> 1</code> <code class="kd">function</code> <code class="nx">addCurried</code> <code class="p">(</code><code class="nx">verb</code><code class="p">)</code> <code class="p">{</code>
<code class="lineno"> 2</code>   <code class="k">return</code> <code class="kd">function</code> <code class="p">(</code><code class="nx">a</code><code class="p">)</code> <code class="p">{</code>
<code class="lineno"> 3</code>     <code class="k">return</code> <code class="kd">function</code> <code class="p">(</code><code class="nx">b</code><code class="p">)</code> <code class="p">{</code>
<code class="lineno"> 4</code>       <code class="k">return</code> <code class="s2">"The "</code> <code class="o">+</code> <code class="nx">verb</code> <code class="o">+</code> <code class="s2">" of "</code> <code class="o">+</code> <code class="nx">a</code> <code class="o">+</code> <code class="s1">' and '</code> <code class="o">+</code> <code class="nx">b</code> <code class="o">+</code> <code class="s1">' is '</code> <code class="o">+</code> <code class="p">(</code><code class="nx">a</code> <code class="o">+</code> <code class="nx">b</code><code class="p">)</code> 
<code class="lineno"> 5</code>     <code class="p">}</code>
<code class="lineno"> 6</code>   <code class="p">}</code>
<code class="lineno"> 7</code> <code class="p">}</code>
<code class="lineno"> 8</code> 
<code class="lineno"> 9</code> <code class="nx">addCurried</code><code class="p">(</code><code class="s1">'total'</code><code class="p">)(</code><code class="mi">6</code><code class="p">)(</code><code class="mi">5</code><code class="p">)</code>
<code class="lineno">10</code>   <code class="c1">//=&gt; 'The total of 6 and 5 is 11'</code>
</pre></div>

</div>

<p>Currying by hand would be an incredible effort, but its close relationship with partial application means that if you have left partial application, you can derive currying. Or if you have currying, you can derive left partial application. Let’s derive currying from <code>callFirst</code>. <a href="#simple-partial">Recall</a>:</p>

<div class="code-block">
<div class="highlight"><pre><code class="lineno">1</code> <code class="kd">var</code> <code class="nx">__slice</code> <code class="o">=</code> <code class="nb">Array</code><code class="p">.</code><code class="nx">prototype</code><code class="p">.</code><code class="nx">slice</code><code class="p">;</code>
<code class="lineno">2</code> 
<code class="lineno">3</code> <code class="kd">function</code> <code class="nx">callFirst</code> <code class="p">(</code><code class="nx">fn</code><code class="p">,</code> <code class="nx">larg</code><code class="p">)</code> <code class="p">{</code>
<code class="lineno">4</code>   <code class="k">return</code> <code class="kd">function</code> <code class="p">()</code> <code class="p">{</code>
<code class="lineno">5</code>     <code class="kd">var</code> <code class="nx">args</code> <code class="o">=</code> <code class="nx">__slice</code><code class="p">.</code><code class="nx">call</code><code class="p">(</code><code class="nx">arguments</code><code class="p">,</code> <code class="mi">0</code><code class="p">);</code>
<code class="lineno">6</code>     
<code class="lineno">7</code>     <code class="k">return</code> <code class="nx">fn</code><code class="p">.</code><code class="nx">apply</code><code class="p">(</code><code class="k">this</code><code class="p">,</code> <code class="cp">[</code><code class="nx">larg</code><code class="cp">]</code><code class="p">.</code><code class="nx">concat</code><code class="p">(</code><code class="nx">args</code><code class="p">))</code>
<code class="lineno">8</code>   <code class="p">}</code>
<code class="lineno">9</code> <code class="p">}</code>
</pre></div>

</div>

<p>Here’s a function that curries any function with two arguments:</p>

<div class="code-block">
<div class="highlight"><pre><code class="lineno"> 1</code> <code class="kd">function</code> <code class="nx">curryTwo</code> <code class="p">(</code><code class="nx">fn</code><code class="p">)</code> <code class="p">{</code>
<code class="lineno"> 2</code>   <code class="k">return</code> <code class="kd">function</code> <code class="p">(</code><code class="nx">x</code><code class="p">)</code> <code class="p">{</code>
<code class="lineno"> 3</code>     <code class="k">return</code> <code class="nx">callFirst</code><code class="p">(</code><code class="nx">fn</code><code class="p">,</code> <code class="nx">x</code><code class="p">)</code>
<code class="lineno"> 4</code>   <code class="p">}</code>
<code class="lineno"> 5</code> <code class="p">}</code>
<code class="lineno"> 6</code> 
<code class="lineno"> 7</code> <code class="kd">function</code> <code class="nx">add2</code> <code class="p">(</code><code class="nx">a</code><code class="p">,</code> <code class="nx">b</code><code class="p">)</code> <code class="p">{</code> <code class="k">return</code> <code class="nx">a</code> <code class="o">+</code> <code class="nx">b</code> <code class="p">}</code>
<code class="lineno"> 8</code> 
<code class="lineno"> 9</code> <code class="nx">curryTwo</code><code class="p">(</code><code class="nx">add</code><code class="p">)(</code><code class="mi">5</code><code class="p">)(</code><code class="mi">6</code><code class="p">)</code>
<code class="lineno">10</code>   <code class="c1">//=&gt; 11</code>
</pre></div>

</div>

<p>And from there we can curry a function with three arguments:</p>

<div class="code-block">
<div class="highlight"><pre><code class="lineno"> 1</code> <code class="kd">function</code> <code class="nx">curryThree</code> <code class="p">(</code><code class="nx">fn</code><code class="p">)</code> <code class="p">{</code>
<code class="lineno"> 2</code>   <code class="k">return</code> <code class="kd">function</code> <code class="p">(</code><code class="nx">x</code><code class="p">)</code> <code class="p">{</code>
<code class="lineno"> 3</code>     <code class="k">return</code> <code class="nx">curryTwo</code><code class="p">(</code><code class="nx">callFirst</code><code class="p">(</code><code class="nx">fn</code><code class="p">,</code> <code class="nx">x</code><code class="p">))</code>
<code class="lineno"> 4</code>   <code class="p">}</code>
<code class="lineno"> 5</code> <code class="p">}</code>
<code class="lineno"> 6</code> 
<code class="lineno"> 7</code> <code class="kd">function</code> <code class="nx">add3</code> <code class="p">(</code><code class="nx">verb</code><code class="p">,</code> <code class="nx">a</code><code class="p">,</code> <code class="nx">b</code><code class="p">)</code> <code class="p">{</code> 
<code class="lineno"> 8</code>   <code class="k">return</code> <code class="s2">"The "</code> <code class="o">+</code> <code class="nx">verb</code> <code class="o">+</code> <code class="s2">" of "</code> <code class="o">+</code> <code class="nx">a</code> <code class="o">+</code> <code class="s1">' and '</code> <code class="o">+</code> <code class="nx">b</code> <code class="o">+</code> <code class="s1">' is '</code> <code class="o">+</code> <code class="p">(</code><code class="nx">a</code> <code class="o">+</code> <code class="nx">b</code><code class="p">)</code> 
<code class="lineno"> 9</code> <code class="p">}</code>
<code class="lineno">10</code> 
<code class="lineno">11</code> <code class="nx">curryThree</code><code class="p">(</code><code class="nx">add3</code><code class="p">)(</code><code class="s1">'sum'</code><code class="p">)(</code><code class="mi">5</code><code class="p">)(</code><code class="mi">6</code><code class="p">)</code>
<code class="lineno">12</code>   <code class="c1">//=&gt; 'The sum of 5 and 6 is 11'</code>
</pre></div>

</div>

<p>We’ll develop a generalized curry function in the recipes. But to summarize the difference between currying and partial application, currying is an operation that transforms a function taking two or more arguments into a function that takes a single argument and partially applies it to  the function and then curries the rest of the arguments.</p>

<h3 id="class-other-name">A Class By Any Other Name</h3>

<p>JavaScript has “classes,” for some definition of “class.” You’ve met them already, they’re constructors that are designed to work with the <code>new</code> keyword and have behaviour in their <code>.prototype</code> element. You can create one any time you like by:</p>

<ol class="numeric numeric">
<li>Writing the constructor so that it performs any initialization on <code>this</code>, and:</li>
  <li>Putting all of the method definitions in its prototype.</li>
</ol>
<p>Let’s see it again: Here’s a class of todo items:</p>

<div class="code-block">
<div class="highlight"><pre><code class="lineno"> 1</code> <code class="kd">function</code> <code class="nx">Todo</code> <code class="p">(</code><code class="nx">name</code><code class="p">)</code> <code class="p">{</code>
<code class="lineno"> 2</code>   <code class="k">this</code><code class="p">.</code><code class="nx">name</code> <code class="o">=</code> <code class="nx">name</code> <code class="o">||</code> <code class="s1">'Untitled'</code><code class="p">;</code>
<code class="lineno"> 3</code>   <code class="k">this</code><code class="p">.</code><code class="nx">done</code> <code class="o">=</code> <code class="kc">false</code><code class="p">;</code>
<code class="lineno"> 4</code> <code class="p">};</code>
<code class="lineno"> 5</code> 
<code class="lineno"> 6</code> <code class="nx">Todo</code><code class="p">.</code><code class="nx">prototype</code><code class="p">.</code><code class="k">do</code> <code class="o">=</code> <code class="kd">function</code> <code class="p">()</code> <code class="p">{</code>
<code class="lineno"> 7</code>   <code class="k">this</code><code class="p">.</code><code class="nx">done</code> <code class="o">=</code> <code class="kc">true</code><code class="p">;</code>
<code class="lineno"> 8</code> <code class="p">};</code>
<code class="lineno"> 9</code> 
<code class="lineno">10</code> <code class="nx">Todo</code><code class="p">.</code><code class="nx">prototype</code><code class="p">.</code><code class="nx">undo</code> <code class="o">=</code> <code class="kd">function</code> <code class="p">()</code> <code class="p">{</code>
<code class="lineno">11</code>   <code class="k">this</code><code class="p">.</code><code class="nx">done</code> <code class="o">=</code> <code class="kc">false</code><code class="p">;</code>
<code class="lineno">12</code> <code class="p">};</code>
</pre></div>

</div>

<p>You can mix other functionality into this class by extending the prototype with an object:</p>

<div class="code-block">
<div class="highlight"><pre><code class="lineno">1</code> <code class="nx">extend</code><code class="p">(</code><code class="nx">Todo</code><code class="p">.</code><code class="nx">prototype</code><code class="p">,</code> <code class="p">{</code>
<code class="lineno">2</code>   <code class="nx">prioritize</code><code class="o">:</code> <code class="kd">function</code> <code class="p">(</code><code class="nx">priority</code><code class="p">)</code> <code class="p">{</code>
<code class="lineno">3</code>     <code class="k">this</code><code class="p">.</code><code class="nx">priority</code> <code class="o">=</code> <code class="nx">priority</code><code class="p">;</code>
<code class="lineno">4</code>   <code class="p">};</code>
<code class="lineno">5</code> <code class="p">});</code>
</pre></div>

</div>

<p>Naturally, that allows us to define mixins for other classes:</p>

<div class="code-block">
<div class="highlight"><pre><code class="lineno"> 1</code> <code class="kd">var</code> <code class="nx">ColourCoded</code> <code class="o">=</code> <code class="p">{</code>
<code class="lineno"> 2</code>   <code class="nx">setColourRGB</code><code class="o">:</code> <code class="kd">function</code> <code class="p">(</code><code class="nx">r</code><code class="p">,</code> <code class="nx">g</code><code class="p">,</code> <code class="nx">b</code><code class="p">)</code> <code class="p">{</code>
<code class="lineno"> 3</code>     <code class="c1">// ...</code>
<code class="lineno"> 4</code>   <code class="p">},</code>
<code class="lineno"> 5</code>   <code class="nx">getColourRGB</code><code class="o">:</code> <code class="kd">function</code> <code class="p">()</code> <code class="p">{</code>
<code class="lineno"> 6</code>     <code class="c1">// ...</code>
<code class="lineno"> 7</code>   <code class="p">},</code>
<code class="lineno"> 8</code>   <code class="nx">setColourCSS</code><code class="o">:</code> <code class="kd">function</code> <code class="p">(</code><code class="nx">css</code><code class="p">)</code> <code class="p">{</code>
<code class="lineno"> 9</code>     <code class="c1">// ...</code>
<code class="lineno">10</code>   <code class="p">},</code>
<code class="lineno">11</code>   <code class="nx">getColourCSS</code><code class="o">:</code> <code class="kd">function</code> <code class="p">()</code> <code class="p">{</code>
<code class="lineno">12</code>     <code class="c1">// ...</code>
<code class="lineno">13</code>   <code class="p">}</code>
<code class="lineno">14</code> <code class="p">};</code>
<code class="lineno">15</code> 
<code class="lineno">16</code> <code class="nx">extend</code><code class="p">(</code><code class="nx">Todo</code><code class="p">.</code><code class="nx">prototype</code><code class="p">,</code> <code class="nx">ColourCoded</code><code class="p">);</code>
</pre></div>

</div>

<p>This does exactly the same thing as declaring a “class,” defining a “method,” and adding a “mixin.” How does it differ? It doesn’t use the words <em>class</em>, <em>method</em>, <em>def(ine)</em> or <em>mixin</em>. And it has this <code>prototype</code> property that most other popular languages eschew. It also doesn’t deal with inheritance, a deal-breaker for programmers who are attached to taxonomies.</p>

<p>For these reasons, many programmers choose to write their own library of functions to mimic the semantics of other programming languages. This has happened so often that most of the popular utility-belt frameworks like <a href="http://backbonejs.org">Backbone</a> have some form of support for defining or extending classes baked in.</p>

<p>Nevertheless, JavaScript right out of the box has everything you need for defining classes, methods, mixins, and even inheritance (as we’ll see in <a href="#classextension">Extending Classes with Inheritance</a>). If we choose to adopt a library with more streamlined syntax, it’s vital to understand JavaScript’s semantics well enough to know what is happening “under the hood” so that we can work directly with objects, functions, methods, and prototypes when needed.</p>

<div class="aside sidebarish">
  <p>One note of caution: A few libraries, such as the vile creation <a href="https://github.com/raganwald/YouAreDaChef#you-are-da-chef">YouAreDaChef</a>, manipulate JavaScript such that ordinary programming such as extending a prototype either don’t work at all or break the library’s abstraction. Think long and carefully before adopting such a library. The best libraries “Cut with JavaScript’s grain.”</p>

</div>

<h3 id="object-methods">Object Methods</h3>

<p>An <em>instance method</em> is a function defined in the constructor’s prototype. Every instance acquires this behaviour unless otherwise “overridden.” Instance methods usually have some interaction with the instance, such as references to <code>this</code> or to other methods that interact with the instance. A <em>constructor method</em> is a function belonging to the constructor itself.</p>

<p>There is a third kind of method, one that any object (obviously including all instances) can have. An <em>object method</em> is a function defined in the object itself. Like instance methods, object methods usually have some interaction with the object, such as references to <code>this</code> or to other methods that interact with the object.</p>

<p>Object methods are really easy to create with Plain Old JavaScript Objects, because they’re the only kind of method you can use. Recall from <a href="#this">This and That</a>:</p>

<div class="code-block">
<div class="highlight"><pre><code class="lineno"> 1</code> <code class="nx">QueueMaker</code> <code class="o">=</code> <code class="kd">function</code> <code class="p">()</code> <code class="p">{</code>
<code class="lineno"> 2</code>   <code class="k">return</code> <code class="p">{</code>
<code class="lineno"> 3</code>     <code class="nx">array</code><code class="o">:</code> <code class="cp">[]</code><code class="p">,</code> 
<code class="lineno"> 4</code>     <code class="nx">head</code><code class="o">:</code> <code class="mi">0</code><code class="p">,</code> 
<code class="lineno"> 5</code>     <code class="nx">tail</code><code class="o">:</code> <code class="o">-</code><code class="mi">1</code><code class="p">,</code>
<code class="lineno"> 6</code>     <code class="nx">pushTail</code><code class="o">:</code> <code class="kd">function</code> <code class="p">(</code><code class="nx">value</code><code class="p">)</code> <code class="p">{</code>
<code class="lineno"> 7</code>       <code class="k">return</code> <code class="k">this</code><code class="p">.</code><code class="nx">array</code><code class="cp">[</code><code class="nx">this.tail</code> <code class="o">+=</code> <code class="mi">1</code><code class="cp">]</code> <code class="o">=</code> <code class="nx">value</code>
<code class="lineno"> 8</code>     <code class="p">},</code>
<code class="lineno"> 9</code>     <code class="nx">pullHead</code><code class="o">:</code> <code class="kd">function</code> <code class="p">()</code> <code class="p">{</code>
<code class="lineno">10</code>       <code class="kd">var</code> <code class="nx">value</code><code class="p">;</code>
<code class="lineno">11</code>       
<code class="lineno">12</code>       <code class="k">if</code> <code class="p">(</code><code class="k">this</code><code class="p">.</code><code class="nx">tail</code> <code class="o">&gt;=</code> <code class="k">this</code><code class="p">.</code><code class="nx">head</code><code class="p">)</code> <code class="p">{</code>
<code class="lineno">13</code>         <code class="nx">value</code> <code class="o">=</code> <code class="k">this</code><code class="p">.</code><code class="nx">array</code><code class="cp">[</code><code class="nx">this.head</code><code class="cp">]</code><code class="p">;</code>
<code class="lineno">14</code>         <code class="k">this</code><code class="p">.</code><code class="nx">array</code><code class="cp">[</code><code class="nx">this.head</code><code class="cp">]</code> <code class="o">=</code> <code class="k">void</code> <code class="mi">0</code><code class="p">;</code>
<code class="lineno">15</code>         <code class="k">this</code><code class="p">.</code><code class="nx">head</code> <code class="o">+=</code> <code class="mi">1</code><code class="p">;</code>
<code class="lineno">16</code>         <code class="k">return</code> <code class="nx">value</code>
<code class="lineno">17</code>       <code class="p">}</code>
<code class="lineno">18</code>     <code class="p">},</code>
<code class="lineno">19</code>     <code class="nx">isEmpty</code><code class="o">:</code> <code class="kd">function</code> <code class="p">()</code> <code class="p">{</code>
<code class="lineno">20</code>       <code class="k">return</code> <code class="k">this</code><code class="p">.</code><code class="nx">tail</code> <code class="o">&lt;</code> <code class="k">this</code><code class="p">.</code><code class="nx">head</code>
<code class="lineno">21</code>     <code class="p">}</code>
<code class="lineno">22</code>   <code class="p">}</code>
<code class="lineno">23</code> <code class="p">};</code>
</pre></div>

</div>

<p><code>pushTail</code>, <code>pullHead</code>, and <code>isEmpty</code> are object methods. Also, from <a href="#hiding-state">encapsulation</a>:</p>

<div class="code-block">
<div class="highlight"><pre><code class="lineno"> 1</code> <code class="kd">var</code> <code class="nx">stack</code> <code class="o">=</code> <code class="p">(</code><code class="kd">function</code> <code class="p">()</code> <code class="p">{</code>
<code class="lineno"> 2</code>   <code class="kd">var</code> <code class="nx">obj</code> <code class="o">=</code> <code class="p">{</code>
<code class="lineno"> 3</code>     <code class="nx">array</code><code class="o">:</code> <code class="cp">[]</code><code class="p">,</code>
<code class="lineno"> 4</code>     <code class="nx">index</code><code class="o">:</code> <code class="o">-</code><code class="mi">1</code><code class="p">,</code>
<code class="lineno"> 5</code>     <code class="nx">push</code><code class="o">:</code> <code class="kd">function</code> <code class="p">(</code><code class="nx">value</code><code class="p">)</code> <code class="p">{</code>
<code class="lineno"> 6</code>       <code class="k">return</code> <code class="nx">obj</code><code class="p">.</code><code class="nx">array</code><code class="cp">[</code><code class="nx">obj.index</code> <code class="o">+=</code> <code class="mi">1</code><code class="cp">]</code> <code class="o">=</code> <code class="nx">value</code>
<code class="lineno"> 7</code>     <code class="p">},</code>
<code class="lineno"> 8</code>     <code class="nx">pop</code><code class="o">:</code> <code class="kd">function</code> <code class="p">()</code> <code class="p">{</code>
<code class="lineno"> 9</code>       <code class="kd">var</code> <code class="nx">value</code> <code class="o">=</code> <code class="nx">obj</code><code class="p">.</code><code class="nx">array</code><code class="cp">[</code><code class="nx">obj.index</code><code class="cp">]</code><code class="p">;</code>
<code class="lineno">10</code>       <code class="nx">obj</code><code class="p">.</code><code class="nx">array</code><code class="cp">[</code><code class="nx">obj.index</code><code class="cp">]</code> <code class="o">=</code> <code class="k">void</code> <code class="mi">0</code><code class="p">;</code>
<code class="lineno">11</code>       <code class="k">if</code> <code class="p">(</code><code class="nx">obj</code><code class="p">.</code><code class="nx">index</code> <code class="o">&gt;=</code> <code class="mi">0</code><code class="p">)</code> <code class="p">{</code> 
<code class="lineno">12</code>         <code class="nx">obj</code><code class="p">.</code><code class="nx">index</code> <code class="o">-=</code> <code class="mi">1</code> 
<code class="lineno">13</code>       <code class="p">}</code>
<code class="lineno">14</code>       <code class="k">return</code> <code class="nx">value</code>
<code class="lineno">15</code>     <code class="p">},</code>
<code class="lineno">16</code>     <code class="nx">isEmpty</code><code class="o">:</code> <code class="kd">function</code> <code class="p">()</code> <code class="p">{</code>
<code class="lineno">17</code>       <code class="k">return</code> <code class="nx">obj</code><code class="p">.</code><code class="nx">index</code> <code class="o">&lt;</code> <code class="mi">0</code>
<code class="lineno">18</code>     <code class="p">}</code>
<code class="lineno">19</code>   <code class="p">};</code>
<code class="lineno">20</code>   
<code class="lineno">21</code>   <code class="k">return</code> <code class="nx">obj</code><code class="p">;</code>
<code class="lineno">22</code> <code class="p">})();</code>
</pre></div>

</div>

<p>Although they don’t refer to the object, <code>push</code>, <code>pop</code>, and <code>isEmpty</code> semantically interact with the opaque data structure represented by the object, so they are object methods too.</p>

<h4 id="leanpub-auto-object-methods-within-instances">object methods within instances</h4>

<p>Instances of constructors can have object methods as well. Typically, object methods are added in the constructor. Here’s a gratuitous example, a widget model that has a read-only <code>id</code>:</p>

<div class="code-block">
<div class="highlight"><pre><code class="lineno"> 1</code> <code class="kd">var</code> <code class="nx">WidgetModel</code> <code class="o">=</code> <code class="kd">function</code> <code class="p">(</code><code class="nx">id</code><code class="p">,</code> <code class="nx">attrs</code><code class="p">)</code> <code class="p">{</code>
<code class="lineno"> 2</code>   <code class="nx">extend</code><code class="p">(</code><code class="k">this</code><code class="p">,</code> <code class="nx">attrs</code> <code class="o">||</code> <code class="p">{});</code>
<code class="lineno"> 3</code>   <code class="k">this</code><code class="p">.</code><code class="nx">id</code> <code class="o">=</code> <code class="kd">function</code> <code class="p">()</code> <code class="p">{</code> <code class="k">return</code> <code class="nx">id</code> <code class="p">}</code>
<code class="lineno"> 4</code> <code class="p">}</code>
<code class="lineno"> 5</code> 
<code class="lineno"> 6</code> <code class="nx">extend</code><code class="p">(</code><code class="nx">WidgetModel</code><code class="p">.</code><code class="nx">prototype</code><code class="p">,</code> <code class="p">{</code>
<code class="lineno"> 7</code>   <code class="nx">set</code><code class="o">:</code> <code class="kd">function</code> <code class="p">(</code><code class="nx">attr</code><code class="p">,</code> <code class="nx">value</code><code class="p">)</code> <code class="p">{</code>
<code class="lineno"> 8</code>     <code class="k">this</code><code class="cp">[</code><code class="nx">attr</code><code class="cp">]</code> <code class="o">=</code> <code class="nx">value</code><code class="p">;</code>
<code class="lineno"> 9</code>     <code class="k">return</code> <code class="k">this</code><code class="p">;</code>
<code class="lineno">10</code>   <code class="p">},</code>
<code class="lineno">11</code>   <code class="nx">get</code><code class="o">:</code> <code class="kd">function</code> <code class="p">(</code><code class="nx">attr</code><code class="p">)</code> <code class="p">{</code>
<code class="lineno">12</code>     <code class="k">return</code> <code class="k">this</code><code class="cp">[</code><code class="nx">attr</code><code class="cp">]</code>
<code class="lineno">13</code>   <code class="p">}</code>
<code class="lineno">14</code> <code class="p">});</code>
</pre></div>

</div>

<p><code>set</code> and <code>get</code> are instance methods, but <code>id</code> is an object method: Each object has its own <code>id</code> closure, where <code>id</code> is bound to the id of the widget by the argument <code>id</code> in the constructor. The advantage of this approach is that instances can have different object methods, or object methods with their own closures as in this case. The disadvantage is that every object has its own methods, which uses up much more memory than instance methods, which are shared amongst all instances.</p>

<table class="tip sidebarish"><tbody><tr>
<td class="sidebar-icon">
      <img class="sidebar-image" src="/site_images/javascript-allonge/leanpub_key.png" alt="tip">
</td>
    <td>
      <p>Object methods are defined within the object. So if you have several different “instances” of the same object, there will be an object method for each object. Object methods can be associated with any object, not just those created with the <code>new</code> keyword. Instance methods apply  to instances, objects created with the <code>new</code> keyword. Instance methods are defined in a  prototype and are shared by all instances.</p>

    </td>
  </tr></tbody></table>
<h3 id="classextension">Extending Classes with Inheritance</h3>

<p>You recall from <a href="#extensible">Composition and Extension</a> that we extended a Plain Old JavaScript Queue to create a Plain Old JavaScript Deque. But what if we have decided to use JavaScript’s prototypes and the <code>new</code> keyword instead of Plain Old JavaScript Objects? How do we extend a queue into a deque?</p>

<p>Here’s our <code>Queue</code>:</p>

<div class="code-block">
<div class="highlight"><pre><code class="lineno"> 1</code> <code class="kd">var</code> <code class="nx">Queue</code> <code class="o">=</code> <code class="kd">function</code> <code class="p">()</code> <code class="p">{</code>
<code class="lineno"> 2</code>   <code class="nx">extend</code><code class="p">(</code><code class="k">this</code><code class="p">,</code> <code class="p">{</code>
<code class="lineno"> 3</code>     <code class="nx">array</code><code class="o">:</code> <code class="cp">[]</code><code class="p">,</code>
<code class="lineno"> 4</code>     <code class="nx">head</code><code class="o">:</code> <code class="mi">0</code><code class="p">,</code>
<code class="lineno"> 5</code>     <code class="nx">tail</code><code class="o">:</code> <code class="o">-</code><code class="mi">1</code>
<code class="lineno"> 6</code>   <code class="p">})</code>
<code class="lineno"> 7</code> <code class="p">};</code>
<code class="lineno"> 8</code> 
<code class="lineno"> 9</code> <code class="nx">extend</code><code class="p">(</code><code class="nx">Queue</code><code class="p">.</code><code class="nx">prototype</code><code class="p">,</code> <code class="p">{</code>
<code class="lineno">10</code>   <code class="nx">pushTail</code><code class="o">:</code> <code class="kd">function</code> <code class="p">(</code><code class="nx">value</code><code class="p">)</code> <code class="p">{</code>
<code class="lineno">11</code>     <code class="k">return</code> <code class="k">this</code><code class="p">.</code><code class="nx">array</code><code class="cp">[</code><code class="nx">this.tail</code> <code class="o">+=</code> <code class="mi">1</code><code class="cp">]</code> <code class="o">=</code> <code class="nx">value</code>
<code class="lineno">12</code>   <code class="p">},</code>
<code class="lineno">13</code>   <code class="nx">pullHead</code><code class="o">:</code> <code class="kd">function</code> <code class="p">()</code> <code class="p">{</code>
<code class="lineno">14</code>     <code class="kd">var</code> <code class="nx">value</code><code class="p">;</code>
<code class="lineno">15</code> 
<code class="lineno">16</code>     <code class="k">if</code> <code class="p">(</code><code class="o">!</code><code class="k">this</code><code class="p">.</code><code class="nx">isEmpty</code><code class="p">())</code> <code class="p">{</code>
<code class="lineno">17</code>       <code class="nx">value</code> <code class="o">=</code> <code class="k">this</code><code class="p">.</code><code class="nx">array</code><code class="cp">[</code><code class="nx">this.head</code><code class="cp">]</code>
<code class="lineno">18</code>       <code class="k">this</code><code class="p">.</code><code class="nx">array</code><code class="cp">[</code><code class="nx">this.head</code><code class="cp">]</code> <code class="o">=</code> <code class="k">void</code> <code class="mi">0</code><code class="p">;</code>
<code class="lineno">19</code>       <code class="k">this</code><code class="p">.</code><code class="nx">head</code> <code class="o">+=</code> <code class="mi">1</code><code class="p">;</code>
<code class="lineno">20</code>       <code class="k">return</code> <code class="nx">value</code>
<code class="lineno">21</code>     <code class="p">}</code>
<code class="lineno">22</code>   <code class="p">},</code>
<code class="lineno">23</code>   <code class="nx">isEmpty</code><code class="o">:</code> <code class="kd">function</code> <code class="p">()</code> <code class="p">{</code>
<code class="lineno">24</code>     <code class="k">return</code> <code class="k">this</code><code class="p">.</code><code class="nx">tail</code> <code class="o">&lt;</code> <code class="k">this</code><code class="p">.</code><code class="nx">head</code>
<code class="lineno">25</code>   <code class="p">}</code>
<code class="lineno">26</code> <code class="p">});</code>
</pre></div>

</div>

<p>And here’s what our <code>Deque</code> would look like before we wire things together:</p>

<div class="code-block">
<div class="highlight"><pre><code class="lineno"> 1</code> <code class="kd">var</code> <code class="nx">Dequeue</code> <code class="o">=</code> <code class="kd">function</code> <code class="p">()</code> <code class="p">{</code>
<code class="lineno"> 2</code>   <code class="nx">Queue</code><code class="p">.</code><code class="nx">prototype</code><code class="p">.</code><code class="nx">constructor</code><code class="p">.</code><code class="nx">call</code><code class="p">(</code><code class="k">this</code><code class="p">)</code>
<code class="lineno"> 3</code> <code class="p">};</code>
<code class="lineno"> 4</code> 
<code class="lineno"> 5</code> <code class="nx">Dequeue</code><code class="p">.</code><code class="nx">INCREMENT</code> <code class="o">=</code> <code class="mi">4</code><code class="p">;</code>
<code class="lineno"> 6</code> 
<code class="lineno"> 7</code> <code class="nx">extend</code><code class="p">(</code><code class="nx">Dequeue</code><code class="p">.</code><code class="nx">prototype</code><code class="p">,</code> <code class="p">{</code>
<code class="lineno"> 8</code>   <code class="nx">size</code><code class="o">:</code> <code class="kd">function</code> <code class="p">()</code> <code class="p">{</code>
<code class="lineno"> 9</code>     <code class="k">return</code> <code class="k">this</code><code class="p">.</code><code class="nx">tail</code> <code class="o">-</code> <code class="k">this</code><code class="p">.</code><code class="nx">head</code> <code class="o">+</code> <code class="mi">1</code>
<code class="lineno">10</code>   <code class="p">},</code>
<code class="lineno">11</code>   <code class="nx">pullTail</code><code class="o">:</code> <code class="kd">function</code> <code class="p">()</code> <code class="p">{</code>
<code class="lineno">12</code>     <code class="kd">var</code> <code class="nx">value</code><code class="p">;</code>
<code class="lineno">13</code> 
<code class="lineno">14</code>     <code class="k">if</code> <code class="p">(</code><code class="o">!</code><code class="k">this</code><code class="p">.</code><code class="nx">isEmpty</code><code class="p">())</code> <code class="p">{</code>
<code class="lineno">15</code>       <code class="nx">value</code> <code class="o">=</code> <code class="k">this</code><code class="p">.</code><code class="nx">array</code><code class="cp">[</code><code class="nx">this.tail</code><code class="cp">]</code><code class="p">;</code>
<code class="lineno">16</code>       <code class="k">this</code><code class="p">.</code><code class="nx">array</code><code class="cp">[</code><code class="nx">this.tail</code><code class="cp">]</code> <code class="o">=</code> <code class="k">void</code> <code class="mi">0</code><code class="p">;</code>
<code class="lineno">17</code>       <code class="k">this</code><code class="p">.</code><code class="nx">tail</code> <code class="o">-=</code> <code class="mi">1</code><code class="p">;</code>
<code class="lineno">18</code>       <code class="k">return</code> <code class="nx">value</code>
<code class="lineno">19</code>     <code class="p">}</code>
<code class="lineno">20</code>   <code class="p">},</code>
<code class="lineno">21</code>   <code class="nx">pushHead</code><code class="o">:</code> <code class="kd">function</code> <code class="p">(</code><code class="nx">value</code><code class="p">)</code> <code class="p">{</code>
<code class="lineno">22</code>     <code class="kd">var</code> <code class="nx">i</code><code class="p">;</code>
<code class="lineno">23</code> 
<code class="lineno">24</code>     <code class="k">if</code> <code class="p">(</code><code class="k">this</code><code class="p">.</code><code class="nx">head</code> <code class="o">===</code> <code class="mi">0</code><code class="p">)</code> <code class="p">{</code>
<code class="lineno">25</code>       <code class="k">for</code> <code class="p">(</code><code class="nx">i</code> <code class="o">=</code> <code class="k">this</code><code class="p">.</code><code class="nx">tail</code><code class="p">;</code> <code class="nx">i</code> <code class="o">&gt;=</code> <code class="k">this</code><code class="p">.</code><code class="nx">head</code><code class="p">;</code> <code class="o">--</code><code class="nx">i</code><code class="p">)</code> <code class="p">{</code>
<code class="lineno">26</code>         <code class="k">this</code><code class="p">.</code><code class="nx">array</code><code class="cp">[</code><code class="nx">i</code> <code class="o">+</code> <code class="nx">INCREMENT</code><code class="cp">]</code> <code class="o">=</code> <code class="k">this</code><code class="p">.</code><code class="nx">array</code><code class="cp">[</code><code class="nx">i</code><code class="cp">]</code>
<code class="lineno">27</code>       <code class="p">}</code>
<code class="lineno">28</code>       <code class="k">this</code><code class="p">.</code><code class="nx">tail</code> <code class="o">+=</code> <code class="k">this</code><code class="p">.</code><code class="nx">constructor</code><code class="p">.</code><code class="nx">INCREMENT</code><code class="p">;</code>
<code class="lineno">29</code>       <code class="k">this</code><code class="p">.</code><code class="nx">head</code> <code class="o">+=</code> <code class="k">this</code><code class="p">.</code><code class="nx">constructor</code><code class="p">.</code><code class="nx">INCREMENT</code>
<code class="lineno">30</code>     <code class="p">}</code>
<code class="lineno">31</code>     <code class="k">this</code><code class="p">.</code><code class="nx">array</code><code class="cp">[</code><code class="nx">this.head</code> <code class="o">-=</code> <code class="mi">1</code><code class="cp">]</code> <code class="o">=</code> <code class="nx">value</code>
<code class="lineno">32</code>   <code class="p">}</code>
<code class="lineno">33</code> <code class="p">});</code>
</pre></div>

</div>

<div class="aside sidebarish">
  <p>We obviously want to do all of a <code>Queue</code>’s initialization, thus we called <code>Queue.prototype.constructor.call(this)</code>. But why not just call <code>Queue.call(this)</code>? As we’ll see when we wire everything together, this ensures that we’re calling the correct constructor even when <code>Queue</code> itself is wired to inherit from another constructor function.</p>

</div>

<p>So what do we want from dequeues such that we can call all of a <code>Queue</code>’s methods as well as a <code>Dequeue</code>’s? Should we copy everything from <code>Queue.prototype</code> into <code>Deque.prototype</code>, like <code>extend(Deque.prototype, Queue.prototype)</code>? That would work, except for one thing: If we later modified <code>Queue</code>, say by mixing in some new methods into its prototype, those wouldn’t be picked up by <code>Dequeue</code>.</p>

<p>No, there’s a better idea. Prototypes are objects, right? Why must they be Plain Old JavaScript Objects? Can’t a prototype be an <em>instance</em>?</p>

<p>Yes they can. Imagine that <code>Deque.prototype</code> was a proxy for an instance of <code>Queue</code>. It would, of course, have all of a queue’s behaviour through <code>Queue.prototype</code>. We don’t want it to be an <em>actual</em> instance, mind you. It probably doesn’t matter with a queue, but some of the things we might work with might make things awkward if we make random instances. A database connection comes to mind, we may not want to create one just for the convenience of having access to its behaviour.</p>

<p>Here’s such a proxy:</p>

<div class="code-block">
<div class="highlight"><pre><code class="lineno">1</code> <code class="kd">var</code> <code class="nx">QueueProxy</code> <code class="o">=</code> <code class="kd">function</code> <code class="p">()</code> <code class="p">{}</code>
<code class="lineno">2</code> 
<code class="lineno">3</code> <code class="nx">QueueProxy</code><code class="p">.</code><code class="nx">prototype</code> <code class="o">=</code> <code class="nx">Queue</code><code class="p">.</code><code class="nx">prototype</code>
</pre></div>

</div>

<p>Our <code>QueueProxy</code> isn’t actually a <code>Queue</code>, but its <code>prototype</code> is an alias of <code>Queue.prototype</code>. Thus, it can pick up <code>Queue</code>’s behaviour. We want to use it for our <code>Deque</code>’s prototype. Let’s insert that code in our class definition:</p>

<div class="code-block">
<div class="highlight"><pre><code class="lineno"> 1</code> <code class="kd">var</code> <code class="nx">Dequeue</code> <code class="o">=</code> <code class="kd">function</code> <code class="p">()</code> <code class="p">{</code>
<code class="lineno"> 2</code>   <code class="nx">Queue</code><code class="p">.</code><code class="nx">prototype</code><code class="p">.</code><code class="nx">constructor</code><code class="p">.</code><code class="nx">call</code><code class="p">(</code><code class="k">this</code><code class="p">)</code>
<code class="lineno"> 3</code> <code class="p">};</code>
<code class="lineno"> 4</code> 
<code class="lineno"> 5</code> <code class="nx">Dequeue</code><code class="p">.</code><code class="nx">INCREMENT</code> <code class="o">=</code> <code class="mi">4</code><code class="p">;</code>
<code class="lineno"> 6</code> 
<code class="lineno"> 7</code> <code class="nx">Dequeue</code><code class="p">.</code><code class="nx">prototype</code> <code class="o">=</code> <code class="k">new</code> <code class="nx">QueueProxy</code><code class="p">();</code>
<code class="lineno"> 8</code> 
<code class="lineno"> 9</code> <code class="nx">extend</code><code class="p">(</code><code class="nx">Dequeue</code><code class="p">.</code><code class="nx">prototype</code><code class="p">,</code> <code class="p">{</code>
<code class="lineno">10</code>   <code class="nx">size</code><code class="o">:</code> <code class="kd">function</code> <code class="p">()</code> <code class="p">{</code>
<code class="lineno">11</code>     <code class="k">return</code> <code class="k">this</code><code class="p">.</code><code class="nx">tail</code> <code class="o">-</code> <code class="k">this</code><code class="p">.</code><code class="nx">head</code> <code class="o">+</code> <code class="mi">1</code>
<code class="lineno">12</code>   <code class="p">},</code>
<code class="lineno">13</code>   <code class="nx">pullTail</code><code class="o">:</code> <code class="kd">function</code> <code class="p">()</code> <code class="p">{</code>
<code class="lineno">14</code>     <code class="kd">var</code> <code class="nx">value</code><code class="p">;</code>
<code class="lineno">15</code> 
<code class="lineno">16</code>     <code class="k">if</code> <code class="p">(</code><code class="o">!</code><code class="k">this</code><code class="p">.</code><code class="nx">isEmpty</code><code class="p">())</code> <code class="p">{</code>
<code class="lineno">17</code>       <code class="nx">value</code> <code class="o">=</code> <code class="k">this</code><code class="p">.</code><code class="nx">array</code><code class="cp">[</code><code class="nx">this.tail</code><code class="cp">]</code><code class="p">;</code>
<code class="lineno">18</code>       <code class="k">this</code><code class="p">.</code><code class="nx">array</code><code class="cp">[</code><code class="nx">this.tail</code><code class="cp">]</code> <code class="o">=</code> <code class="k">void</code> <code class="mi">0</code><code class="p">;</code>
<code class="lineno">19</code>       <code class="k">this</code><code class="p">.</code><code class="nx">tail</code> <code class="o">-=</code> <code class="mi">1</code><code class="p">;</code>
<code class="lineno">20</code>       <code class="k">return</code> <code class="nx">value</code>
<code class="lineno">21</code>     <code class="p">}</code>
<code class="lineno">22</code>   <code class="p">},</code>
<code class="lineno">23</code>   <code class="nx">pushHead</code><code class="o">:</code> <code class="kd">function</code> <code class="p">(</code><code class="nx">value</code><code class="p">)</code> <code class="p">{</code>
<code class="lineno">24</code>     <code class="kd">var</code> <code class="nx">i</code><code class="p">;</code>
<code class="lineno">25</code> 
<code class="lineno">26</code>     <code class="k">if</code> <code class="p">(</code><code class="k">this</code><code class="p">.</code><code class="nx">head</code> <code class="o">===</code> <code class="mi">0</code><code class="p">)</code> <code class="p">{</code>
<code class="lineno">27</code>       <code class="k">for</code> <code class="p">(</code><code class="nx">i</code> <code class="o">=</code> <code class="k">this</code><code class="p">.</code><code class="nx">tail</code><code class="p">;</code> <code class="nx">i</code> <code class="o">&gt;=</code> <code class="k">this</code><code class="p">.</code><code class="nx">head</code><code class="p">;</code> <code class="o">--</code><code class="nx">i</code><code class="p">)</code> <code class="p">{</code>
<code class="lineno">28</code>         <code class="k">this</code><code class="p">.</code><code class="nx">array</code><code class="cp">[</code><code class="nx">i</code> <code class="o">+</code> <code class="nx">INCREMENT</code><code class="cp">]</code> <code class="o">=</code> <code class="k">this</code><code class="p">.</code><code class="nx">array</code><code class="cp">[</code><code class="nx">i</code><code class="cp">]</code>
<code class="lineno">29</code>       <code class="p">}</code>
<code class="lineno">30</code>       <code class="k">this</code><code class="p">.</code><code class="nx">tail</code> <code class="o">+=</code> <code class="k">this</code><code class="p">.</code><code class="nx">constructor</code><code class="p">.</code><code class="nx">INCREMENT</code><code class="p">;</code>
<code class="lineno">31</code>       <code class="k">this</code><code class="p">.</code><code class="nx">head</code> <code class="o">+=</code> <code class="k">this</code><code class="p">.</code><code class="nx">constructor</code><code class="p">.</code><code class="nx">INCREMENT</code>
<code class="lineno">32</code>     <code class="p">}</code>
<code class="lineno">33</code>     <code class="k">this</code><code class="p">.</code><code class="nx">array</code><code class="cp">[</code><code class="nx">this.head</code> <code class="o">-=</code> <code class="mi">1</code><code class="cp">]</code> <code class="o">=</code> <code class="nx">value</code>
<code class="lineno">34</code>   <code class="p">}</code>
<code class="lineno">35</code> <code class="p">});</code>
</pre></div>

</div>

<p>And it seems to work:</p>

<div class="code-block">
<div class="highlight"><pre><code class="lineno"> 1</code> <code class="n">d</code> <code class="o">=</code> <code class="n">new</code> <code class="n">Dequeue</code><code class="p">()</code>
<code class="lineno"> 2</code> <code class="n">d</code><code class="p">.</code><code class="n">pushTail</code><code class="p">(</code><code class="err">'</code><code class="n">Hello</code><code class="err">'</code><code class="p">)</code>
<code class="lineno"> 3</code> <code class="n">d</code><code class="p">.</code><code class="n">pushTail</code><code class="p">(</code><code class="err">'</code><code class="n">JavaScript</code><code class="err">'</code><code class="p">)</code>
<code class="lineno"> 4</code> <code class="n">d</code><code class="p">.</code><code class="n">pushTail</code><code class="p">(</code><code class="sc">'!'</code><code class="p">)</code>
<code class="lineno"> 5</code> <code class="n">d</code><code class="p">.</code><code class="n">pullHead</code><code class="p">()</code>
<code class="lineno"> 6</code>   <code class="c1">//=&gt; 'Hello'</code>
<code class="lineno"> 7</code> <code class="n">d</code><code class="p">.</code><code class="n">pullTail</code><code class="p">()</code>
<code class="lineno"> 8</code>   <code class="c1">//=&gt; '!'</code>
<code class="lineno"> 9</code> <code class="n">d</code><code class="p">.</code><code class="n">pullHead</code><code class="p">()</code>
<code class="lineno">10</code>   <code class="c1">//=&gt; 'JavaScript'</code>
</pre></div>

</div>

<p>Wonderful!</p>

<h4 id="leanpub-auto-getting-the-constructor-element-right">getting the constructor element right</h4>

<p>How about some of the other things we’ve come to expect from instances?</p>

<div class="code-block">
<div class="highlight"><pre><code class="lineno">1</code> <code class="n">d</code><code class="p">.</code><code class="n">constructor</code> <code class="o">==</code> <code class="n">Dequeue</code>
<code class="lineno">2</code>   <code class="c1">//=&gt; false</code>
</pre></div>

</div>

<p>Oops! Messing around with Dequeue’s prototype broke this important equivalence. Luckily for us, the <code>constructor</code> property is mutable for objects we create. So, let’s make a small change to <code>QueueProxy</code>:</p>

<div class="code-block">
<div class="highlight"><pre><code class="lineno">1</code> <code class="kd">var</code> <code class="nx">QueueProxy</code> <code class="o">=</code> <code class="kd">function</code> <code class="p">()</code> <code class="p">{</code>
<code class="lineno">2</code>   <code class="k">this</code><code class="p">.</code><code class="nx">constructor</code> <code class="o">=</code> <code class="nx">Dequeue</code><code class="p">;</code>
<code class="lineno">3</code> <code class="p">}</code>
<code class="lineno">4</code> <code class="nx">QueueProxy</code><code class="p">.</code><code class="nx">prototype</code> <code class="o">=</code> <code class="nx">Queue</code><code class="p">.</code><code class="nx">prototype</code>
</pre></div>

</div>

<p>Repeat. Now it works:</p>

<div class="code-block">
<div class="highlight"><pre><code class="lineno">1</code> <code class="n">d</code><code class="p">.</code><code class="n">constructor</code> <code class="o">===</code> <code class="n">Dequeue</code>
<code class="lineno">2</code>   <code class="c1">//=&gt; true</code>
</pre></div>

</div>

<p>The <code>QueueProxy</code> function now sets the <code>constructor</code> for every instance of a <code>QueueProxy</code> (hopefully just the one we need for the <code>Dequeue</code> class). It returns the object being created (it could also return <code>undefined</code> and work. But if it carelessly returned something else, that would be assigned to <code>Dequeue</code>’s prototype, which would break our code).</p>

<h4 id="leanpub-auto-extracting-the-boilerplate">extracting the boilerplate</h4>

<p>Let’s turn our mechanism into a function:</p>

<div class="code-block">
<div class="highlight"><pre><code class="lineno">1</code> <code class="kd">var</code> <code class="nx">child</code> <code class="o">=</code> <code class="kd">function</code> <code class="p">(</code><code class="nx">parent</code><code class="p">,</code> <code class="nx">child</code><code class="p">)</code> <code class="p">{</code>
<code class="lineno">2</code>   <code class="kd">var</code> <code class="nx">proxy</code> <code class="o">=</code> <code class="kd">function</code> <code class="p">()</code> <code class="p">{</code>
<code class="lineno">3</code>     <code class="k">this</code><code class="p">.</code><code class="nx">constructor</code> <code class="o">=</code> <code class="nx">child</code>
<code class="lineno">4</code>   <code class="p">}</code>
<code class="lineno">5</code>   <code class="nx">proxy</code><code class="p">.</code><code class="nx">prototype</code> <code class="o">=</code> <code class="nx">parent</code><code class="p">.</code><code class="nx">prototype</code><code class="p">;</code>
<code class="lineno">6</code>   <code class="nx">child</code><code class="p">.</code><code class="nx">prototype</code> <code class="o">=</code> <code class="k">new</code> <code class="nx">proxy</code><code class="p">();</code>
<code class="lineno">7</code>   <code class="k">return</code> <code class="nx">child</code><code class="p">;</code>
<code class="lineno">8</code> <code class="p">}</code>
</pre></div>

</div>

<p>And use it in <code>Dequeue</code>:</p>

<div class="code-block">
<div class="highlight"><pre><code class="lineno"> 1</code> <code class="kd">var</code> <code class="nx">Dequeue</code> <code class="o">=</code> <code class="nx">child</code><code class="p">(</code><code class="nx">Queue</code><code class="p">,</code> <code class="kd">function</code> <code class="p">()</code> <code class="p">{</code>
<code class="lineno"> 2</code>   <code class="nx">Queue</code><code class="p">.</code><code class="nx">prototype</code><code class="p">.</code><code class="nx">constructor</code><code class="p">.</code><code class="nx">call</code><code class="p">(</code><code class="k">this</code><code class="p">)</code>
<code class="lineno"> 3</code> <code class="p">});</code>
<code class="lineno"> 4</code> 
<code class="lineno"> 5</code> <code class="nx">Dequeue</code><code class="p">.</code><code class="nx">INCREMENT</code> <code class="o">=</code> <code class="mi">4</code><code class="p">;</code>
<code class="lineno"> 6</code> 
<code class="lineno"> 7</code> <code class="nx">extend</code><code class="p">(</code><code class="nx">Dequeue</code><code class="p">.</code><code class="nx">prototype</code><code class="p">,</code> <code class="p">{</code>
<code class="lineno"> 8</code>   <code class="nx">size</code><code class="o">:</code> <code class="kd">function</code> <code class="p">()</code> <code class="p">{</code>
<code class="lineno"> 9</code>     <code class="k">return</code> <code class="k">this</code><code class="p">.</code><code class="nx">tail</code> <code class="o">-</code> <code class="k">this</code><code class="p">.</code><code class="nx">head</code> <code class="o">+</code> <code class="mi">1</code>
<code class="lineno">10</code>   <code class="p">},</code>
<code class="lineno">11</code>   <code class="nx">pullTail</code><code class="o">:</code> <code class="kd">function</code> <code class="p">()</code> <code class="p">{</code>
<code class="lineno">12</code>     <code class="kd">var</code> <code class="nx">value</code><code class="p">;</code>
<code class="lineno">13</code> 
<code class="lineno">14</code>     <code class="k">if</code> <code class="p">(</code><code class="o">!</code><code class="k">this</code><code class="p">.</code><code class="nx">isEmpty</code><code class="p">())</code> <code class="p">{</code>
<code class="lineno">15</code>       <code class="nx">value</code> <code class="o">=</code> <code class="k">this</code><code class="p">.</code><code class="nx">array</code><code class="cp">[</code><code class="nx">this.tail</code><code class="cp">]</code><code class="p">;</code>
<code class="lineno">16</code>       <code class="k">this</code><code class="p">.</code><code class="nx">array</code><code class="cp">[</code><code class="nx">this.tail</code><code class="cp">]</code> <code class="o">=</code> <code class="k">void</code> <code class="mi">0</code><code class="p">;</code>
<code class="lineno">17</code>       <code class="k">this</code><code class="p">.</code><code class="nx">tail</code> <code class="o">-=</code> <code class="mi">1</code><code class="p">;</code>
<code class="lineno">18</code>       <code class="k">return</code> <code class="nx">value</code>
<code class="lineno">19</code>     <code class="p">}</code>
<code class="lineno">20</code>   <code class="p">},</code>
<code class="lineno">21</code>   <code class="nx">pushHead</code><code class="o">:</code> <code class="kd">function</code> <code class="p">(</code><code class="nx">value</code><code class="p">)</code> <code class="p">{</code>
<code class="lineno">22</code>     <code class="kd">var</code> <code class="nx">i</code><code class="p">;</code>
<code class="lineno">23</code> 
<code class="lineno">24</code>     <code class="k">if</code> <code class="p">(</code><code class="k">this</code><code class="p">.</code><code class="nx">head</code> <code class="o">===</code> <code class="mi">0</code><code class="p">)</code> <code class="p">{</code>
<code class="lineno">25</code>       <code class="k">for</code> <code class="p">(</code><code class="nx">i</code> <code class="o">=</code> <code class="k">this</code><code class="p">.</code><code class="nx">tail</code><code class="p">;</code> <code class="nx">i</code> <code class="o">&gt;=</code> <code class="k">this</code><code class="p">.</code><code class="nx">head</code><code class="p">;</code> <code class="o">--</code><code class="nx">i</code><code class="p">)</code> <code class="p">{</code>
<code class="lineno">26</code>         <code class="k">this</code><code class="p">.</code><code class="nx">array</code><code class="cp">[</code><code class="nx">i</code> <code class="o">+</code> <code class="nx">INCREMENT</code><code class="cp">]</code> <code class="o">=</code> <code class="k">this</code><code class="p">.</code><code class="nx">array</code><code class="cp">[</code><code class="nx">i</code><code class="cp">]</code>
<code class="lineno">27</code>       <code class="p">}</code>
<code class="lineno">28</code>       <code class="k">this</code><code class="p">.</code><code class="nx">tail</code> <code class="o">+=</code> <code class="k">this</code><code class="p">.</code><code class="nx">constructor</code><code class="p">.</code><code class="nx">INCREMENT</code><code class="p">;</code>
<code class="lineno">29</code>       <code class="k">this</code><code class="p">.</code><code class="nx">head</code> <code class="o">+=</code> <code class="k">this</code><code class="p">.</code><code class="nx">constructor</code><code class="p">.</code><code class="nx">INCREMENT</code>
<code class="lineno">30</code>     <code class="p">}</code>
<code class="lineno">31</code>     <code class="k">this</code><code class="p">.</code><code class="nx">array</code><code class="cp">[</code><code class="nx">this.head</code> <code class="o">-=</code> <code class="mi">1</code><code class="cp">]</code> <code class="o">=</code> <code class="nx">value</code>
<code class="lineno">32</code>   <code class="p">}</code>
<code class="lineno">33</code> <code class="p">});</code>
</pre></div>

</div>

<h4 id="leanpub-auto-future-directions">future directions</h4>

<p>Some folks just <strong>love</strong> to build their own mechanisms. When all goes well, they become famous as framework creators and open source thought leaders. When all goes badly they create in-house proprietary one-offs that blur the line between application and framework with abstractions everywhere.</p>

<p>If you’re keen on learning, you can work on improving the above code to handle extending constructor properties, automatically calling the parent constructor function, and so forth. Or you can decide that doing it by hand isn’t that hard so why bother putting a thin wrapper around it?</p>

<p>It’s up to you, while JavaScript isn’t the tersest language, it isn’t so baroque that building inheritance ontologies requires hundreds of lines of inscrutable code.</p>

<h3 id="leanpub-auto-summary-3">Summary</h3>

<table class="tip sidebarish"><tbody><tr>
<td class="sidebar-icon">
      <img class="sidebar-image" src="/site_images/javascript-allonge/leanpub_key.png" alt="tip">
</td>
    <td>
      <h4 id="leanpub-auto-instances-and-classes">Instances and Classes</h4>

  <ul>
<li>The <code>new</code> keyword turns any function into a <em>constructor</em> for creating <em>instances</em>.</li>
    <li>All functions have a <code>prototype</code> element.</li>
    <li>Instances behave as if the elements of their constructor’s prototype are their elements.</li>
    <li>Instances can override their constructor’s prototype without altering it.</li>
    <li>The relationship between instances and their constructor’s prototype is dynamic.</li>
    <li>
<code>this</code> works seamlessly with methods defined in prototypes.</li>
    <li>Everything behaves like an object.</li>
    <li>JavaScript can convert primitives into instances and back into primitives.</li>
    <li>Object methods are typically created in the constructor and are private to each object.</li>
    <li>Prototypes can be chained to allow extension of instances.</li>
  </ul>
<p>And most importantly:</p>

  <ul>
<li>JavaScript has classes and methods, they just aren’t formally called classes and methods in the language’s syntax.</li>
  </ul>
</td>
  </tr></tbody></table>
<h2 id="leanpub-auto-recipes-with-instances-and-classes">
<span class="section-number">9 </span>Recipes with Instances and Classes</h2>

<div class="image-with-caption center image-with-caption center">
  <img src="/site_images/javascript-allonge/diedrich-roaster.jpg" alt="These recipes are being roasted to perfection."><p class="caption">These recipes are being roasted to perfection.</p>
</div>

<h4 id="leanpub-auto-disclaimer-3">Disclaimer</h4>

<p>The recipes are written for practicality, and their implementation may introduce JavaScript features that haven’t been discussed in the text to this point, such as methods and/or prototypes. The overall <em>use</em> of each recipe will fit within the spirit of the language discussed so far, even if the implementations may not.</p>

<h3 id="leanpub-auto-currying-1">Currying</h3>

<p>We discussed currying in <a href="#closures">Closures</a> and <a href="#pabc">Partial Application, Binding, and Currying</a>. Here is the recipe for a higher-order function that curries its argument function. It works with any function that has a fixed length, and it lets you provide as many arguments as you like.</p>

<div class="code-block">
<div class="highlight"><pre><code class="lineno"> 1</code> <code class="kd">var</code> <code class="nx">__slice</code> <code class="o">=</code> <code class="nb">Array</code><code class="p">.</code><code class="nx">prototype</code><code class="p">.</code><code class="nx">slice</code><code class="p">;</code>
<code class="lineno"> 2</code> 
<code class="lineno"> 3</code> <code class="kd">function</code> <code class="nx">curry</code> <code class="p">(</code><code class="nx">fn</code><code class="p">)</code> <code class="p">{</code>
<code class="lineno"> 4</code>   <code class="kd">var</code> <code class="nx">arity</code> <code class="o">=</code> <code class="nx">fn</code><code class="p">.</code><code class="nx">length</code><code class="p">;</code>
<code class="lineno"> 5</code>   
<code class="lineno"> 6</code>   <code class="k">return</code> <code class="nx">given</code><code class="p">(</code><code class="cp">[]</code><code class="p">);</code>
<code class="lineno"> 7</code>   
<code class="lineno"> 8</code>   <code class="kd">function</code> <code class="nx">given</code> <code class="p">(</code><code class="nx">argsSoFar</code><code class="p">)</code> <code class="p">{</code>
<code class="lineno"> 9</code>     <code class="k">return</code> <code class="kd">function</code> <code class="nx">helper</code> <code class="p">()</code> <code class="p">{</code>
<code class="lineno">10</code>       <code class="kd">var</code> <code class="nx">updatedArgsSoFar</code> <code class="o">=</code> <code class="nx">argsSoFar</code><code class="p">.</code><code class="nx">concat</code><code class="p">(</code><code class="nx">__slice</code><code class="p">.</code><code class="nx">call</code><code class="p">(</code><code class="nx">arguments</code><code class="p">,</code> <code class="mi">0</code><code class="p">));</code>
<code class="lineno">11</code>       
<code class="lineno">12</code>       <code class="k">if</code> <code class="p">(</code><code class="nx">updatedArgsSoFar</code><code class="p">.</code><code class="nx">length</code> <code class="o">&gt;=</code> <code class="nx">arity</code><code class="p">)</code> <code class="p">{</code>
<code class="lineno">13</code>         <code class="k">return</code> <code class="nx">fn</code><code class="p">.</code><code class="nx">apply</code><code class="p">(</code><code class="k">this</code><code class="p">,</code> <code class="nx">updatedArgsSoFar</code><code class="p">)</code>
<code class="lineno">14</code>       <code class="p">}</code>
<code class="lineno">15</code>       <code class="k">else</code> <code class="k">return</code> <code class="nx">given</code><code class="p">(</code><code class="nx">updatedArgsSoFar</code><code class="p">)</code>
<code class="lineno">16</code>     <code class="p">}</code>
<code class="lineno">17</code>   <code class="p">}</code>
<code class="lineno">18</code>   
<code class="lineno">19</code> <code class="p">}</code>
<code class="lineno">20</code> 
<code class="lineno">21</code> <code class="kd">function</code> <code class="nx">sumOfFour</code> <code class="p">(</code><code class="nx">a</code><code class="p">,</code> <code class="nx">b</code><code class="p">,</code> <code class="nx">c</code><code class="p">,</code> <code class="nx">d</code><code class="p">)</code> <code class="p">{</code> <code class="k">return</code> <code class="nx">a</code> <code class="o">+</code> <code class="nx">b</code> <code class="o">+</code> <code class="nx">c</code> <code class="o">+</code> <code class="nx">d</code> <code class="p">}</code>
<code class="lineno">22</code> 
<code class="lineno">23</code> <code class="kd">var</code> <code class="nx">curried</code> <code class="o">=</code> <code class="nx">curry</code><code class="p">(</code><code class="nx">sumOfFour</code><code class="p">);</code>
<code class="lineno">24</code> 
<code class="lineno">25</code> <code class="nx">curried</code><code class="p">(</code><code class="mi">1</code><code class="p">)(</code><code class="mi">2</code><code class="p">)(</code><code class="mi">3</code><code class="p">)(</code><code class="mi">4</code><code class="p">)</code>
<code class="lineno">26</code>   <code class="c1">//=&gt; 10</code>
<code class="lineno">27</code> 
<code class="lineno">28</code> <code class="nx">curried</code><code class="p">(</code><code class="mi">1</code><code class="p">,</code><code class="mi">2</code><code class="p">)(</code><code class="mi">3</code><code class="p">,</code><code class="mi">4</code><code class="p">)</code>
<code class="lineno">29</code>   <code class="c1">//=&gt; 10</code>
<code class="lineno">30</code> 
<code class="lineno">31</code> <code class="nx">curried</code><code class="p">(</code><code class="mi">1</code><code class="p">,</code><code class="mi">2</code><code class="p">,</code><code class="mi">3</code><code class="p">,</code><code class="mi">4</code><code class="p">)</code>
<code class="lineno">32</code>   <code class="c1">//=&gt; 10</code>
</pre></div>

</div>

<p>We saw earlier that you can derive a curry function from a partial application function. The reverse is also true:</p>

<div class="code-block">
<div class="highlight"><pre><code class="lineno">1</code> <code class="kd">function</code> <code class="nx">callLeft</code> <code class="p">(</code><code class="nx">fn</code><code class="p">)</code> <code class="p">{</code>
<code class="lineno">2</code>   <code class="k">return</code> <code class="nx">curry</code><code class="p">(</code><code class="nx">fn</code><code class="p">).</code><code class="nx">apply</code><code class="p">(</code><code class="kc">null</code><code class="p">,</code> <code class="nx">__slice</code><code class="p">.</code><code class="nx">call</code><code class="p">(</code><code class="nx">arguments</code><code class="p">,</code> <code class="mi">1</code><code class="p">))</code>
<code class="lineno">3</code> <code class="p">}</code>
<code class="lineno">4</code> 
<code class="lineno">5</code> <code class="nx">callLeft</code><code class="p">(</code><code class="nx">sumOfFour</code><code class="p">,</code> <code class="mi">1</code><code class="p">)(</code><code class="mi">2</code><code class="p">,</code> <code class="mi">3</code><code class="p">,</code> <code class="mi">4</code><code class="p">)</code>
<code class="lineno">6</code>   <code class="c1">//=&gt; 10</code>
<code class="lineno">7</code> 
<code class="lineno">8</code> <code class="nx">callLeft</code><code class="p">(</code><code class="nx">sumOfFour</code><code class="p">,</code> <code class="mi">1</code><code class="p">,</code> <code class="mi">2</code><code class="p">)(</code><code class="mi">3</code><code class="p">,</code> <code class="mi">4</code><code class="p">)</code>
<code class="lineno">9</code>   <code class="c1">//=&gt; 10</code>
</pre></div>

</div>

<p>(This is a little different from the previous left partial functions in that it returns a <em>curried</em> function).</p>

<h3 id="bound">Bound</h3>

<p>Earlier, we saw a recipe for <a href="#getWith">getWith</a> that plays nicely with properties:</p>

<div class="code-block">
<div class="highlight"><pre><code class="lineno">1</code> <code class="kd">function</code> <code class="nx">get</code> <code class="p">(</code><code class="nx">attr</code><code class="p">)</code> <code class="p">{</code>
<code class="lineno">2</code>   <code class="k">return</code> <code class="kd">function</code> <code class="p">(</code><code class="nx">obj</code><code class="p">)</code> <code class="p">{</code>
<code class="lineno">3</code>     <code class="k">return</code> <code class="nx">obj</code><code class="cp">[</code><code class="nx">attr</code><code class="cp">]</code>
<code class="lineno">4</code>   <code class="p">}</code>
<code class="lineno">5</code> <code class="p">}</code>
</pre></div>

</div>

<p>Simple and useful. But now that we’ve spent some time looking at objects with methods we can see that <code>get</code> (and <code>pluck</code>) has a failure mode. Specifically, it’s not very useful if we ever want to get a <em>method</em>, since we’ll lose the context. Consider some hypothetical class:</p>

<div class="code-block">
<div class="highlight"><pre><code class="lineno"> 1</code> <code class="kd">function</code> <code class="nx">InventoryRecord</code> <code class="p">(</code><code class="nx">apples</code><code class="p">,</code> <code class="nx">oranges</code><code class="p">,</code> <code class="nx">eggs</code><code class="p">)</code> <code class="p">{</code>
<code class="lineno"> 2</code>   <code class="k">this</code><code class="p">.</code><code class="nx">record</code> <code class="o">=</code> <code class="p">{</code>
<code class="lineno"> 3</code>     <code class="nx">apples</code><code class="o">:</code> <code class="nx">apples</code><code class="p">,</code>
<code class="lineno"> 4</code>     <code class="nx">oranges</code><code class="o">:</code> <code class="nx">oranges</code><code class="p">,</code>
<code class="lineno"> 5</code>     <code class="nx">eggs</code><code class="o">:</code> <code class="nx">eggs</code>
<code class="lineno"> 6</code>   <code class="p">}</code>
<code class="lineno"> 7</code> <code class="p">}</code>
<code class="lineno"> 8</code> 
<code class="lineno"> 9</code> <code class="nx">InventoryRecord</code><code class="p">.</code><code class="nx">prototype</code><code class="p">.</code><code class="nx">apples</code> <code class="o">=</code> <code class="kd">function</code> <code class="nx">apples</code> <code class="p">()</code> <code class="p">{</code>
<code class="lineno">10</code>   <code class="k">return</code> <code class="k">this</code><code class="p">.</code><code class="nx">record</code><code class="p">.</code><code class="nx">apples</code>
<code class="lineno">11</code> <code class="p">}</code>
<code class="lineno">12</code> 
<code class="lineno">13</code> <code class="nx">InventoryRecord</code><code class="p">.</code><code class="nx">prototype</code><code class="p">.</code><code class="nx">oranges</code> <code class="o">=</code> <code class="kd">function</code> <code class="nx">oranges</code> <code class="p">()</code> <code class="p">{</code>
<code class="lineno">14</code>   <code class="k">return</code> <code class="k">this</code><code class="p">.</code><code class="nx">record</code><code class="p">.</code><code class="nx">oranges</code>
<code class="lineno">15</code> <code class="p">}</code>
<code class="lineno">16</code> 
<code class="lineno">17</code> <code class="nx">InventoryRecord</code><code class="p">.</code><code class="nx">prototype</code><code class="p">.</code><code class="nx">eggs</code> <code class="o">=</code> <code class="kd">function</code> <code class="nx">eggs</code> <code class="p">()</code> <code class="p">{</code>
<code class="lineno">18</code>   <code class="k">return</code> <code class="k">this</code><code class="p">.</code><code class="nx">record</code><code class="p">.</code><code class="nx">eggs</code>
<code class="lineno">19</code> <code class="p">}</code>
<code class="lineno">20</code> 
<code class="lineno">21</code> <code class="kd">var</code> <code class="nx">inventories</code> <code class="o">=</code> <code class="cp">[</code>
<code class="lineno">22</code>   <code class="nx">new</code> <code class="nx">InventoryRecord</code><code class="p">(</code> <code class="mi">0</code><code class="p">,</code> <code class="mi">144</code><code class="p">,</code> <code class="mi">36</code> <code class="p">),</code>
<code class="lineno">23</code>   <code class="nx">new</code> <code class="nx">InventoryRecord</code><code class="p">(</code> <code class="mi">240</code><code class="p">,</code> <code class="mi">54</code><code class="p">,</code> <code class="mi">12</code> <code class="p">),</code>
<code class="lineno">24</code>   <code class="nx">new</code> <code class="nx">InventoryRecord</code><code class="p">(</code> <code class="mi">24</code><code class="p">,</code> <code class="mi">12</code><code class="p">,</code> <code class="mi">42</code> <code class="p">)</code>
<code class="lineno">25</code> <code class="cp">]</code><code class="p">;</code>
</pre></div>

</div>

<p>Now how do we get all the egg counts?</p>

<div class="code-block">
<div class="highlight"><pre><code class="lineno">1</code> <code class="n">mapWith</code><code class="p">(</code><code class="n">getWith</code><code class="p">(</code><code class="err">'</code><code class="n">eggs</code><code class="err">'</code><code class="p">))(</code><code class="n">inventories</code><code class="p">)</code>
<code class="lineno">2</code>   <code class="c1">//=&gt; [ [Function: eggs],</code>
<code class="lineno">3</code>   <code class="c1">//     [Function: eggs],</code>
<code class="lineno">4</code>   <code class="c1">//     [Function: eggs] ]</code>
</pre></div>

</div>

<p>And if we try applying those functions…</p>

<div class="code-block">
<div class="highlight"><pre><code class="lineno">1</code> <code class="nx">mapWith</code><code class="p">(</code><code class="nx">getWith</code><code class="p">(</code><code class="s1">'eggs'</code><code class="p">))(</code><code class="nx">inventories</code><code class="p">).</code><code class="nx">map</code><code class="p">(</code>
<code class="lineno">2</code>   <code class="kd">function</code> <code class="p">(</code><code class="nx">unboundmethod</code><code class="p">)</code> <code class="p">{</code> 
<code class="lineno">3</code>     <code class="k">return</code> <code class="nx">unboundmethod</code><code class="p">()</code> 
<code class="lineno">4</code>   <code class="p">}</code>
<code class="lineno">5</code> <code class="p">)</code>
<code class="lineno">6</code>   <code class="c1">//=&gt; TypeError: Cannot read property 'eggs' of undefined</code>
</pre></div>

</div>

<p>Of course, these are unbound methods we’re “getting” from each object. Here’s a new version of <code>get</code> that plays nicely with methods. It uses <a href="#ellipses">variadic</a>:</p>

<div class="code-block">
<div class="highlight"><pre><code class="lineno"> 1</code> <code class="kd">var</code> <code class="nx">bound</code> <code class="o">=</code> <code class="nx">variadic</code><code class="p">(</code> <code class="kd">function</code> <code class="p">(</code><code class="nx">messageName</code><code class="p">,</code> <code class="nx">args</code><code class="p">)</code> <code class="p">{</code>
<code class="lineno"> 2</code>   
<code class="lineno"> 3</code>   <code class="k">if</code> <code class="p">(</code><code class="nx">args</code> <code class="o">===</code> <code class="cp">[]</code><code class="p">)</code> <code class="p">{</code>
<code class="lineno"> 4</code>     <code class="k">return</code> <code class="kd">function</code> <code class="p">(</code><code class="nx">instance</code><code class="p">)</code> <code class="p">{</code>
<code class="lineno"> 5</code>       <code class="k">return</code> <code class="nx">instance</code><code class="cp">[</code><code class="nx">messageName</code><code class="cp">]</code><code class="p">.</code><code class="nx">bind</code><code class="p">(</code><code class="nx">instance</code><code class="p">)</code>
<code class="lineno"> 6</code>     <code class="p">}</code>
<code class="lineno"> 7</code>   <code class="p">}</code>
<code class="lineno"> 8</code>   <code class="k">else</code> <code class="p">{</code>
<code class="lineno"> 9</code>     <code class="k">return</code> <code class="kd">function</code> <code class="p">(</code><code class="nx">instance</code><code class="p">)</code> <code class="p">{</code>
<code class="lineno">10</code>       <code class="k">return</code> <code class="nb">Function</code><code class="p">.</code><code class="nx">prototype</code><code class="p">.</code><code class="nx">bind</code><code class="p">.</code><code class="nx">apply</code><code class="p">(</code>
<code class="lineno">11</code>         <code class="nx">instance</code><code class="cp">[</code><code class="nx">messageName</code><code class="cp">]</code><code class="p">,</code> <code class="cp">[</code><code class="nx">instance</code><code class="cp">]</code><code class="p">.</code><code class="nx">concat</code><code class="p">(</code><code class="nx">args</code><code class="p">)</code>
<code class="lineno">12</code>       <code class="p">)</code>
<code class="lineno">13</code>     <code class="p">}</code>
<code class="lineno">14</code>   <code class="p">}</code>
<code class="lineno">15</code> <code class="p">});</code>
<code class="lineno">16</code> 
<code class="lineno">17</code> <code class="nx">mapWith</code><code class="p">(</code><code class="nx">bound</code><code class="p">(</code><code class="s1">'eggs'</code><code class="p">))(</code><code class="nx">inventories</code><code class="p">).</code><code class="nx">map</code><code class="p">(</code>
<code class="lineno">18</code>   <code class="kd">function</code> <code class="p">(</code><code class="nx">boundmethod</code><code class="p">)</code> <code class="p">{</code> 
<code class="lineno">19</code>     <code class="k">return</code> <code class="nx">boundmethod</code><code class="p">()</code> 
<code class="lineno">20</code>   <code class="p">}</code>
<code class="lineno">21</code> <code class="p">)</code>
<code class="lineno">22</code>   <code class="c1">//=&gt; </code><code class="cp">[</code> <code class="mi">36</code><code class="p">,</code> <code class="mi">12</code><code class="p">,</code> <code class="mi">42</code> <code class="cp">]</code><code class="c1"></code>
</pre></div>

</div>

<p><code>bound</code> is the recipe for getting a bound method from an object by name. It has other uses, such as callbacks. <code>bound('render')(aView)</code> is equivalent to <code>aView.render.bind(aView)</code>. There’s an option to add a variable number of additional arguments, handled by:</p>

<div class="code-block">
<div class="highlight"><pre><code class="lineno">1</code> <code class="k">return</code> <code class="kd">function</code> <code class="p">(</code><code class="nx">instance</code><code class="p">)</code> <code class="p">{</code>
<code class="lineno">2</code>   <code class="k">return</code> <code class="nb">Function</code><code class="p">.</code><code class="nx">prototype</code><code class="p">.</code><code class="nx">bind</code><code class="p">.</code><code class="nx">apply</code><code class="p">(</code>
<code class="lineno">3</code>     <code class="nx">instance</code><code class="cp">[</code><code class="nx">messageName</code><code class="cp">]</code><code class="p">,</code> <code class="cp">[</code><code class="nx">instance</code><code class="cp">]</code><code class="p">.</code><code class="nx">concat</code><code class="p">(</code><code class="nx">args</code><code class="p">)</code>
<code class="lineno">4</code>   <code class="p">)</code>
<code class="lineno">5</code> <code class="p">}</code>
</pre></div>

</div>

<p>The exact behaviour will be covered in <a href="#binding">Binding Functions to Contexts</a>. You can use it like this to add arguments to the bound function to be evaluated:</p>

<div class="code-block">
<div class="highlight"><pre><code class="lineno"> 1</code> <code class="nx">InventoryRecord</code><code class="p">.</code><code class="nx">prototype</code><code class="p">.</code><code class="nx">add</code> <code class="o">=</code> <code class="kd">function</code> <code class="p">(</code><code class="nx">item</code><code class="p">,</code> <code class="nx">amount</code><code class="p">)</code> <code class="p">{</code>
<code class="lineno"> 2</code>   <code class="k">this</code><code class="p">.</code><code class="nx">record</code><code class="cp">[</code><code class="nx">item</code><code class="cp">]</code> <code class="o">||</code> <code class="p">(</code><code class="k">this</code><code class="p">.</code><code class="nx">record</code><code class="cp">[</code><code class="nx">item</code><code class="cp">]</code> <code class="o">=</code> <code class="mi">0</code><code class="p">);</code>
<code class="lineno"> 3</code>   <code class="k">this</code><code class="p">.</code><code class="nx">record</code><code class="cp">[</code><code class="nx">item</code><code class="cp">]</code> <code class="o">+=</code> <code class="nx">amount</code><code class="p">;</code>
<code class="lineno"> 4</code>   <code class="k">return</code> <code class="k">this</code><code class="p">;</code>
<code class="lineno"> 5</code> <code class="p">}</code>
<code class="lineno"> 6</code> 
<code class="lineno"> 7</code> <code class="nx">mapWith</code><code class="p">(</code><code class="nx">bound</code><code class="p">(</code><code class="s1">'add'</code><code class="p">,</code> <code class="s1">'eggs'</code><code class="p">,</code> <code class="mi">12</code><code class="p">))(</code><code class="nx">inventories</code><code class="p">).</code><code class="nx">map</code><code class="p">(</code>
<code class="lineno"> 8</code>   <code class="kd">function</code> <code class="p">(</code><code class="nx">boundmethod</code><code class="p">)</code> <code class="p">{</code> 
<code class="lineno"> 9</code>     <code class="k">return</code> <code class="nx">boundmethod</code><code class="p">()</code> 
<code class="lineno">10</code>   <code class="p">}</code>
<code class="lineno">11</code> <code class="p">)</code>
<code class="lineno">12</code>   <code class="o">/</code><code class="err">/=&gt; </code><code class="cp">[</code> <code class="p">{</code> <code class="nx">record</code><code class="p">:</code> 
<code class="lineno">13</code>   <code class="c1">//       { apples: 0,</code>
<code class="lineno">14</code>   <code class="c1">//         oranges: 144,</code>
<code class="lineno">15</code>   <code class="c1">//         eggs: 48 } },</code>
<code class="lineno">16</code>   <code class="c1">//     { record: </code>
<code class="lineno">17</code>   <code class="c1">//       { apples: 240,</code>
<code class="lineno">18</code>   <code class="c1">//         oranges: 54,</code>
<code class="lineno">19</code>   <code class="c1">//         eggs: 24 } },</code>
<code class="lineno">20</code>   <code class="c1">//     { record: </code>
<code class="lineno">21</code>   <code class="c1">//       { apples: 24,</code>
<code class="lineno">22</code>   <code class="c1">//         oranges: 12,</code>
<code class="lineno">23</code>   <code class="c1">//         eggs: 54 } } ]</code>
</pre></div>

</div>

<h3 id="leanpub-auto-unbinding">Unbinding</h3>

<p>One of the specifications for <code>Function.prototype.bind</code> is that it creates a binding that cannot be overridden. In other words:</p>

<div class="code-block">
<div class="highlight"><pre><code class="lineno"> 1</code> <code class="kd">function</code> <code class="nx">myName</code> <code class="p">()</code> <code class="p">{</code> <code class="k">return</code> <code class="k">this</code><code class="p">.</code><code class="nx">name</code> <code class="p">}</code>
<code class="lineno"> 2</code> 
<code class="lineno"> 3</code> <code class="kd">var</code> <code class="nx">harpo</code>   <code class="o">=</code> <code class="p">{</code> <code class="nx">name</code><code class="o">:</code> <code class="s1">'Harpo'</code> <code class="p">},</code>
<code class="lineno"> 4</code>     <code class="nx">chico</code>   <code class="o">=</code> <code class="p">{</code> <code class="nx">name</code><code class="o">:</code> <code class="s1">'Chico'</code> <code class="p">},</code>
<code class="lineno"> 5</code>     <code class="nx">groucho</code> <code class="o">=</code> <code class="p">{</code> <code class="nx">name</code><code class="o">:</code> <code class="s1">'Groucho'</code> <code class="p">};</code>
<code class="lineno"> 6</code>     
<code class="lineno"> 7</code> <code class="kd">var</code> <code class="nx">fh</code> <code class="o">=</code> <code class="nx">myName</code><code class="p">.</code><code class="nx">bind</code><code class="p">(</code><code class="nx">harpo</code><code class="p">);</code>
<code class="lineno"> 8</code> <code class="nx">fh</code><code class="p">()</code>
<code class="lineno"> 9</code>   <code class="c1">//=&gt; 'Harpo'</code>
<code class="lineno">10</code> 
<code class="lineno">11</code> <code class="kd">var</code> <code class="nx">fc</code> <code class="o">=</code> <code class="nx">myName</code><code class="p">.</code><code class="nx">bind</code><code class="p">(</code><code class="nx">chico</code><code class="p">);</code>
<code class="lineno">12</code> <code class="nx">fc</code><code class="p">()</code>
<code class="lineno">13</code>   <code class="c1">//=&gt; 'Chico'</code>
</pre></div>

</div>

<p>This looks great. But what happens if we attempt to <strong>re</strong>-bind a bound function, either with <code>bind</code> or <code>.call</code>?</p>

<div class="code-block">
<div class="highlight"><pre><code class="lineno">1</code> <code class="n">var</code> <code class="n">fhg</code> <code class="o">=</code> <code class="n">fh</code><code class="p">.</code><code class="n">bind</code><code class="p">(</code><code class="n">groucho</code><code class="p">);</code>
<code class="lineno">2</code> <code class="n">fhg</code><code class="p">()</code>
<code class="lineno">3</code>   <code class="c1">//=&gt; 'Harpo'</code>
<code class="lineno">4</code>   
<code class="lineno">5</code> <code class="n">fc</code><code class="p">.</code><code class="n">call</code><code class="p">(</code><code class="n">groucho</code><code class="p">)</code>
<code class="lineno">6</code>   <code class="c1">//=&gt; 'Chico'</code>
<code class="lineno">7</code>   
<code class="lineno">8</code> <code class="n">fh</code><code class="p">.</code><code class="n">apply</code><code class="p">(</code><code class="n">groucho</code><code class="p">,</code> <code class="p">[])</code>
<code class="lineno">9</code>   <code class="c1">//=&gt; 'Harpo'</code>
</pre></div>

</div>

<p>Bzzt! You cannot override the context of a function that has already been bound, even if you’re creating a new function with <code>.bind</code>. You also don’t want to roll your own <code>bind</code> function that allows rebinding, lest you be bitten by someone else’s code that expects that a bound function cannot be rebound. (One such case is where bound functions–such as callbacks–are stored in an array. Evaluating <code>callbacks[index]()</code> will override the bound context with the array unless the context cannot be overridden.)<sup id="fnref-reddit"><a href="#fn-reddit" rel="footnote">34</a></sup></p>

<h4 id="leanpub-auto-the-recipe">the recipe</h4>

<p>Our version of <code>bind</code> memoizes the original function so that you can later call <code>unbind</code> to restore it for rebinding.</p>

<div class="code-block">
<div class="highlight"><pre><code class="lineno"> 1</code> <code class="kd">var</code> <code class="nx">unbind</code> <code class="o">=</code> <code class="kd">function</code> <code class="nx">unbind</code> <code class="p">(</code><code class="nx">fn</code><code class="p">)</code> <code class="p">{</code>
<code class="lineno"> 2</code>   <code class="k">return</code> <code class="nx">fn</code><code class="p">.</code><code class="nx">unbound</code> <code class="o">?</code> <code class="nx">unbind</code><code class="p">(</code><code class="nx">fn</code><code class="p">.</code><code class="nx">unbound</code><code class="p">())</code> <code class="o">:</code> <code class="nx">fn</code>
<code class="lineno"> 3</code> <code class="p">};</code>
<code class="lineno"> 4</code>    
<code class="lineno"> 5</code> <code class="kd">function</code> <code class="nx">bind</code> <code class="p">(</code><code class="nx">fn</code><code class="p">,</code> <code class="nx">context</code><code class="p">,</code> <code class="nx">force</code><code class="p">)</code> <code class="p">{</code>
<code class="lineno"> 6</code>   <code class="kd">var</code> <code class="nx">unbound</code><code class="p">,</code> <code class="nx">bound</code><code class="p">;</code>
<code class="lineno"> 7</code>   
<code class="lineno"> 8</code>   <code class="k">if</code> <code class="p">(</code><code class="nx">force</code><code class="p">)</code> <code class="p">{</code>
<code class="lineno"> 9</code>     <code class="nx">fn</code> <code class="o">=</code> <code class="nx">unbind</code><code class="p">(</code><code class="nx">fn</code><code class="p">)</code>
<code class="lineno">10</code>   <code class="p">}</code>
<code class="lineno">11</code>   <code class="nx">bound</code> <code class="o">=</code> <code class="kd">function</code> <code class="p">()</code> <code class="p">{</code>
<code class="lineno">12</code>     <code class="k">return</code> <code class="nx">fn</code><code class="p">.</code><code class="nx">apply</code><code class="p">(</code><code class="nx">context</code><code class="p">,</code> <code class="nx">arguments</code><code class="p">)</code>
<code class="lineno">13</code>   <code class="p">};</code>
<code class="lineno">14</code>   <code class="nx">bound</code><code class="p">.</code><code class="nx">unbound</code> <code class="o">=</code> <code class="kd">function</code> <code class="p">()</code> <code class="p">{</code>
<code class="lineno">15</code>     <code class="k">return</code> <code class="nx">fn</code><code class="p">;</code>
<code class="lineno">16</code>   <code class="p">};</code>
<code class="lineno">17</code>   
<code class="lineno">18</code>   <code class="k">return</code> <code class="nx">bound</code><code class="p">;</code>
<code class="lineno">19</code> <code class="p">}</code>
<code class="lineno">20</code> 
<code class="lineno">21</code> <code class="kd">function</code> <code class="nx">myName</code> <code class="p">()</code> <code class="p">{</code> <code class="k">return</code> <code class="k">this</code><code class="p">.</code><code class="nx">name</code> <code class="p">}</code>
<code class="lineno">22</code> 
<code class="lineno">23</code> <code class="kd">var</code> <code class="nx">harpo</code>   <code class="o">=</code> <code class="p">{</code> <code class="nx">name</code><code class="o">:</code> <code class="s1">'Harpo'</code> <code class="p">},</code>
<code class="lineno">24</code>     <code class="nx">chico</code>   <code class="o">=</code> <code class="p">{</code> <code class="nx">name</code><code class="o">:</code> <code class="s1">'Chico'</code> <code class="p">},</code>
<code class="lineno">25</code>     <code class="nx">groucho</code> <code class="o">=</code> <code class="p">{</code> <code class="nx">name</code><code class="o">:</code> <code class="s1">'Groucho'</code> <code class="p">};</code>
<code class="lineno">26</code>     
<code class="lineno">27</code> <code class="kd">var</code> <code class="nx">fh</code> <code class="o">=</code> <code class="nx">bind</code><code class="p">(</code><code class="nx">myName</code><code class="p">,</code> <code class="nx">harpo</code><code class="p">);</code>
<code class="lineno">28</code> <code class="nx">fh</code><code class="p">()</code>
<code class="lineno">29</code>   <code class="c1">//=&gt; 'Harpo'</code>
<code class="lineno">30</code> 
<code class="lineno">31</code> <code class="kd">var</code> <code class="nx">fc</code> <code class="o">=</code> <code class="nx">bind</code><code class="p">(</code><code class="nx">myName</code><code class="p">,</code> <code class="nx">chico</code><code class="p">);</code>
<code class="lineno">32</code> <code class="nx">fc</code><code class="p">()</code>
<code class="lineno">33</code>   <code class="c1">//=&gt; 'Chico'</code>
<code class="lineno">34</code> 
<code class="lineno">35</code> <code class="kd">var</code> <code class="nx">fhg</code> <code class="o">=</code> <code class="nx">bind</code><code class="p">(</code><code class="nx">fh</code><code class="p">,</code> <code class="nx">groucho</code><code class="p">);</code>
<code class="lineno">36</code> <code class="nx">fhg</code><code class="p">()</code>
<code class="lineno">37</code>   <code class="c1">//=&gt; 'Harpo'</code>
<code class="lineno">38</code> 
<code class="lineno">39</code> <code class="kd">var</code> <code class="nx">fhug</code> <code class="o">=</code> <code class="nx">bind</code><code class="p">(</code><code class="nx">fh</code><code class="p">,</code> <code class="nx">groucho</code><code class="p">,</code> <code class="kc">true</code><code class="p">);</code>
<code class="lineno">40</code> <code class="nx">fhug</code><code class="p">()</code>
<code class="lineno">41</code>   <code class="c1">//=&gt; 'Groucho'</code>
<code class="lineno">42</code> 
<code class="lineno">43</code> <code class="kd">var</code> <code class="nx">fhug2</code> <code class="o">=</code> <code class="nx">bind</code><code class="p">(</code><code class="nx">unbind</code><code class="p">(</code><code class="nx">fh</code><code class="p">),</code> <code class="nx">groucho</code><code class="p">);</code>
<code class="lineno">44</code> <code class="nx">fhug</code><code class="p">()</code>
<code class="lineno">45</code>   <code class="c1">//=&gt; 'Groucho'</code>
<code class="lineno">46</code>   
<code class="lineno">47</code> <code class="nx">fc</code><code class="p">.</code><code class="nx">unbound</code><code class="p">().</code><code class="nx">call</code><code class="p">(</code><code class="nx">groucho</code><code class="p">)</code>
<code class="lineno">48</code>   <code class="c1">//=&gt; 'Groucho'</code>
<code class="lineno">49</code>   
<code class="lineno">50</code> <code class="nx">unbind</code><code class="p">(</code><code class="nx">fh</code><code class="p">).</code><code class="nx">apply</code><code class="p">(</code><code class="nx">groucho</code><code class="p">,</code> <code class="cp">[]</code><code class="p">)</code>
<code class="lineno">51</code>   <code class="c1">//=&gt; 'Groucho'</code>
</pre></div>

</div>

<h3 id="send">Send</h3>

<p>Previously, we saw that the recipe <a href="#bound">bound</a> can be used to get a bound method from an instance. Unfortunately, invoking such methods is a little messy:</p>

<div class="code-block">
<div class="highlight"><pre><code class="lineno">1</code> <code class="nx">mapWith</code><code class="p">(</code><code class="nx">bound</code><code class="p">(</code><code class="s1">'eggs'</code><code class="p">))(</code><code class="nx">inventories</code><code class="p">).</code><code class="nx">map</code><code class="p">(</code>
<code class="lineno">2</code>   <code class="kd">function</code> <code class="p">(</code><code class="nx">boundmethod</code><code class="p">)</code> <code class="p">{</code> 
<code class="lineno">3</code>     <code class="k">return</code> <code class="nx">boundmethod</code><code class="p">()</code> 
<code class="lineno">4</code>   <code class="p">}</code>
<code class="lineno">5</code> <code class="p">)</code>
<code class="lineno">6</code>   <code class="c1">//=&gt; </code><code class="cp">[</code> <code class="mi">36</code><code class="p">,</code> <code class="mi">12</code><code class="p">,</code> <code class="mi">42</code> <code class="cp">]</code><code class="c1"></code>
</pre></div>

</div>

<p>As we noted, it’s ugly to write</p>

<div class="code-block">
<div class="highlight"><pre><code class="lineno">1</code> <code class="kd">function</code> <code class="p">(</code><code class="nx">boundmethod</code><code class="p">)</code> <code class="p">{</code> 
<code class="lineno">2</code>   <code class="k">return</code> <code class="nx">boundmethod</code><code class="p">()</code> 
<code class="lineno">3</code> <code class="p">}</code>
</pre></div>

</div>

<p>So instead, we write a new recipe:</p>

<div class="code-block">
<div class="highlight"><pre><code class="lineno"> 1</code> <code class="kd">var</code> <code class="nx">send</code> <code class="o">=</code> <code class="nx">variadic</code><code class="p">(</code> <code class="kd">function</code> <code class="p">(</code><code class="nx">args</code><code class="p">)</code> <code class="p">{</code>
<code class="lineno"> 2</code>   <code class="kd">var</code> <code class="nx">fn</code> <code class="o">=</code> <code class="nx">bound</code><code class="p">.</code><code class="nx">apply</code><code class="p">(</code><code class="k">this</code><code class="p">,</code> <code class="nx">args</code><code class="p">);</code>
<code class="lineno"> 3</code>   
<code class="lineno"> 4</code>   <code class="k">return</code> <code class="kd">function</code> <code class="p">(</code><code class="nx">instance</code><code class="p">)</code> <code class="p">{</code>
<code class="lineno"> 5</code>     <code class="k">return</code> <code class="nx">fn</code><code class="p">(</code><code class="nx">instance</code><code class="p">)();</code>
<code class="lineno"> 6</code>   <code class="p">}</code>
<code class="lineno"> 7</code> <code class="p">})</code>
<code class="lineno"> 8</code> 
<code class="lineno"> 9</code> <code class="nx">mapWith</code><code class="p">(</code><code class="nx">send</code><code class="p">(</code><code class="s1">'apples'</code><code class="p">))(</code><code class="nx">inventories</code><code class="p">)</code>
<code class="lineno">10</code>   <code class="c1">//=&gt; </code><code class="cp">[</code> <code class="mi">0</code><code class="p">,</code> <code class="mi">240</code><code class="p">,</code> <code class="mi">24</code> <code class="cp">]</code><code class="c1"></code>
</pre></div>

</div>

<p><code>send('apples')</code> works very much like <code>&amp;:apples</code> in the Ruby programming language. You may ask, why retain <code>bound</code>? Well, sometimes we want the function but don’t want to evaluate it immediately, such as when creating callbacks. <code>bound</code> does that well.</p>

<p>Here’s a robust version that doesn’t rely on <code>bound</code>:</p>

<div class="code-block">
<div class="highlight"><pre><code class="lineno">1</code> <code class="kd">var</code> <code class="nx">send</code> <code class="o">=</code> <code class="nx">variadic</code><code class="p">(</code> <code class="kd">function</code> <code class="p">(</code><code class="nx">methodName</code><code class="p">,</code> <code class="nx">leftArguments</code><code class="p">)</code> <code class="p">{</code>
<code class="lineno">2</code>   <code class="k">return</code> <code class="nx">variadic</code><code class="p">(</code> <code class="kd">function</code> <code class="p">(</code><code class="nx">receiver</code><code class="p">,</code> <code class="nx">rightArguments</code><code class="p">)</code> <code class="p">{</code>
<code class="lineno">3</code>     <code class="k">return</code> <code class="nx">receiver</code><code class="cp">[</code><code class="nx">methodName</code><code class="cp">]</code><code class="p">.</code><code class="nx">apply</code><code class="p">(</code><code class="nx">receiver</code><code class="p">,</code> <code class="nx">leftArguments</code><code class="p">.</code><code class="nx">concat</code><code class="p">(</code><code class="nx">rightArgumen</code><code class="o">\</code>
<code class="lineno">4</code> <code class="nx">ts</code><code class="p">))</code>
<code class="lineno">5</code>   <code class="p">})</code>
<code class="lineno">6</code> <code class="p">});</code>
</pre></div>

</div>

<h3 id="invoke">Invoke</h3>

<p><a href="#send">Send</a> is useful when invoking a function that’s a member of an object (or of an instance’s prototype). But we sometimes want to invoke a function that is designed to be executed within an object’s context. This happens most often when we want  to “borrow” a method from one “class” and use it on another object.</p>

<p>It’s not an unprecedented use case. The Ruby programming language has a handy feature called <a href="http://www.ruby-doc.org/core-1.8.7/Object.html#method-i-instance_exec">instance_exec</a>. It lets you execute an arbitrary block of code in the context of any object. Does this sound familiar? JavaScript has this exact feature, we just call it <code>.apply</code> (or <code>.call</code> as the case may be). We can execute any function in the context of any arbitrary object.</p>

<p>The only trouble with <code>.apply</code> is that being a method, it doesn’t compose nicely with other functions like combinators. So, we create a function that allows us to use it as a combinator:</p>

<div class="code-block">
<div class="highlight"><pre><code class="lineno">1</code> <code class="kd">var</code> <code class="nx">__slice</code> <code class="o">=</code> <code class="nb">Array</code><code class="p">.</code><code class="nx">prototype</code><code class="p">.</code><code class="nx">slice</code><code class="p">;</code>
<code class="lineno">2</code> 
<code class="lineno">3</code> <code class="kd">function</code> <code class="nx">invoke</code> <code class="p">(</code><code class="nx">fn</code><code class="p">)</code> <code class="p">{</code>
<code class="lineno">4</code>   <code class="kd">var</code> <code class="nx">args</code> <code class="o">=</code> <code class="nx">__slice</code><code class="p">.</code><code class="nx">call</code><code class="p">(</code><code class="nx">arguments</code><code class="p">,</code> <code class="mi">1</code><code class="p">);</code>
<code class="lineno">5</code>   
<code class="lineno">6</code>   <code class="k">return</code> <code class="kd">function</code> <code class="p">(</code><code class="nx">instance</code><code class="p">)</code> <code class="p">{</code>
<code class="lineno">7</code>     <code class="k">return</code> <code class="nx">fn</code><code class="p">.</code><code class="nx">apply</code><code class="p">(</code><code class="nx">instance</code><code class="p">,</code> <code class="nx">args</code><code class="p">)</code>
<code class="lineno">8</code>   <code class="p">}</code>
<code class="lineno">9</code> <code class="p">}</code>
</pre></div>

</div>

<p>For example, let’s say someone else’s code gives you an array of objects that are in part, but not entirely like arrays. Something like:</p>

<div class="code-block">
<div class="highlight"><pre><code class="lineno">1</code> <code class="n">var</code> <code class="n">data</code> <code class="o">=</code> <code class="p">[</code>
<code class="lineno">2</code>   <code class="p">{</code> <code class="mi">0</code><code class="o">:</code> <code class="err">'</code><code class="n">zero</code><code class="err">'</code><code class="p">,</code> 
<code class="lineno">3</code>     <code class="mi">1</code><code class="o">:</code> <code class="err">'</code><code class="n">one</code><code class="err">'</code><code class="p">,</code> 
<code class="lineno">4</code>     <code class="mi">2</code><code class="o">:</code> <code class="err">'</code><code class="n">two</code><code class="err">'</code><code class="p">,</code> 
<code class="lineno">5</code>     <code class="n">foo</code><code class="o">:</code> <code class="err">'</code><code class="n">foo</code><code class="err">'</code><code class="p">,</code> 
<code class="lineno">6</code>     <code class="n">length</code><code class="o">:</code> <code class="mi">3</code> <code class="p">},</code>
<code class="lineno">7</code>   <code class="c1">// ...</code>
<code class="lineno">8</code> <code class="p">];</code>
</pre></div>

</div>

<p>We can use the pattern from <a href="#pabc">Partial Application, Binding, and Currying</a> to create a context-dependent copy function:</p>

<div class="code-block">
<div class="highlight"><pre><code class="lineno">1</code> <code class="n">var</code> <code class="n">__copy</code> <code class="o">=</code> <code class="n">callFirst</code><code class="p">(</code><code class="n">Array</code><code class="p">.</code><code class="n">prototype</code><code class="p">.</code><code class="n">slice</code><code class="p">,</code> <code class="mi">0</code><code class="p">);</code>
</pre></div>

</div>

<p>And now we can compose <code>mapWith</code> with <code>invoke</code> to convert the data to arrays:</p>

<div class="code-block">
<div class="highlight"><pre><code class="lineno">1</code> <code class="n">mapWith</code><code class="p">(</code><code class="n">invoke</code><code class="p">(</code><code class="n">__copy</code><code class="p">))(</code><code class="n">data</code><code class="p">)</code>
<code class="lineno">2</code>   <code class="c1">//=&gt; [</code>
<code class="lineno">3</code>   <code class="c1">//     [ 'zero', 'one', 'two' ],</code>
<code class="lineno">4</code>   <code class="c1">//     // ...</code>
<code class="lineno">5</code>   <code class="c1">//   ]</code>
</pre></div>

</div>

<p><code>invoke</code> is useful when you have the function and are looking for the instance. It can be written “the other way around,” for when you have the instance and are looking for the function:</p>

<div class="code-block">
<div class="highlight"><pre><code class="lineno">1</code> <code class="kd">function</code> <code class="nx">instanceEval</code> <code class="p">(</code><code class="nx">instance</code><code class="p">)</code> <code class="p">{</code>
<code class="lineno">2</code>   <code class="k">return</code> <code class="kd">function</code> <code class="p">(</code><code class="nx">fn</code><code class="p">)</code> <code class="p">{</code>
<code class="lineno">3</code>     <code class="kd">var</code> <code class="nx">args</code> <code class="o">=</code> <code class="nx">__slice</code><code class="p">.</code><code class="nx">call</code><code class="p">(</code><code class="nx">arguments</code><code class="p">,</code> <code class="mi">1</code><code class="p">);</code>
<code class="lineno">4</code>     
<code class="lineno">5</code>     <code class="k">return</code> <code class="nx">fn</code><code class="p">.</code><code class="nx">apply</code><code class="p">(</code><code class="nx">instance</code><code class="p">,</code> <code class="nx">args</code><code class="p">)</code>
<code class="lineno">6</code>   <code class="p">}</code>
<code class="lineno">7</code> <code class="p">}</code>
<code class="lineno">8</code> 
<code class="lineno">9</code> <code class="kd">var</code> <code class="nx">args</code> <code class="o">=</code> <code class="nx">instanceEval</code><code class="p">(</code><code class="nx">arguments</code><code class="p">)(</code><code class="nx">__slice</code><code class="p">,</code> <code class="mi">0</code><code class="p">);</code>
</pre></div>

</div>

<h3 id="fluent">Fluent</h3>

<p>Object and instance methods can be bifurcated into two classes: Those that query something, and those that update something. Most design philosophies arrange things such that update methods return the value being updated. For example:</p>

<div class="code-block">
<div class="highlight"><pre><code class="lineno"> 1</code> <code class="kd">function</code> <code class="nx">Cake</code> <code class="p">()</code> <code class="p">{}</code>
<code class="lineno"> 2</code> 
<code class="lineno"> 3</code> <code class="nx">extend</code><code class="p">(</code><code class="nx">Cake</code><code class="p">.</code><code class="nx">prototype</code><code class="p">,</code> <code class="p">{</code>
<code class="lineno"> 4</code>   <code class="nx">setFlavour</code><code class="o">:</code> <code class="kd">function</code> <code class="p">(</code><code class="nx">flavour</code><code class="p">)</code> <code class="p">{</code> 
<code class="lineno"> 5</code>     <code class="k">return</code> <code class="k">this</code><code class="p">.</code><code class="nx">flavour</code> <code class="o">=</code> <code class="nx">flavour</code> 
<code class="lineno"> 6</code>   <code class="p">},</code>
<code class="lineno"> 7</code>   <code class="nx">setLayers</code><code class="o">:</code> <code class="kd">function</code> <code class="p">(</code><code class="nx">layers</code><code class="p">)</code> <code class="p">{</code> 
<code class="lineno"> 8</code>     <code class="k">return</code> <code class="k">this</code><code class="p">.</code><code class="nx">layers</code> <code class="o">=</code> <code class="nx">layers</code> 
<code class="lineno"> 9</code>   <code class="p">},</code>
<code class="lineno">10</code>   <code class="nx">bake</code><code class="o">:</code> <code class="kd">function</code> <code class="p">()</code> <code class="p">{</code>
<code class="lineno">11</code>     <code class="c1">// do some baking</code>
<code class="lineno">12</code>   <code class="p">}</code>
<code class="lineno">13</code> <code class="p">});</code>
<code class="lineno">14</code> 
<code class="lineno">15</code> <code class="kd">var</code> <code class="nx">cake</code> <code class="o">=</code> <code class="k">new</code> <code class="nx">Cake</code><code class="p">();</code>
<code class="lineno">16</code> <code class="nx">cake</code><code class="p">.</code><code class="nx">setFlavour</code><code class="p">(</code><code class="s1">'chocolate'</code><code class="p">);</code>
<code class="lineno">17</code> <code class="nx">cake</code><code class="p">.</code><code class="nx">setLayers</code><code class="p">(</code><code class="mi">3</code><code class="p">);</code>
<code class="lineno">18</code> <code class="nx">cake</code><code class="p">.</code><code class="nx">bake</code><code class="p">();</code>
</pre></div>

</div>

<p>Having methods like <code>setFlavour</code> return the value being set mimics the behaviour of assignment, where <code>cake.flavour = 'chocolate'</code> is an expression that in addition to setting a property also evaluates to the value <code>'chocolate'</code>.</p>

<p>The <a href="https://en.wikipedia.org/wiki/Fluent_interface">fluent</a> style presumes that most of the time when you perform an update you are more interested in doing other things with the receiver then the values being passed as argument(s), so the rule is to return the receiver unless the method is a query:</p>

<div class="code-block">
<div class="highlight"><pre><code class="lineno"> 1</code> <code class="kd">function</code> <code class="nx">Cake</code> <code class="p">()</code> <code class="p">{}</code>
<code class="lineno"> 2</code> 
<code class="lineno"> 3</code> <code class="nx">extend</code><code class="p">(</code><code class="nx">Cake</code><code class="p">.</code><code class="nx">prototype</code><code class="p">,</code> <code class="p">{</code>
<code class="lineno"> 4</code>   <code class="nx">setFlavour</code><code class="o">:</code> <code class="kd">function</code> <code class="p">(</code><code class="nx">flavour</code><code class="p">)</code> <code class="p">{</code> 
<code class="lineno"> 5</code>     <code class="k">this</code><code class="p">.</code><code class="nx">flavour</code> <code class="o">=</code> <code class="nx">flavour</code><code class="p">;</code>
<code class="lineno"> 6</code>     <code class="k">return</code> <code class="k">this</code>
<code class="lineno"> 7</code>   <code class="p">},</code>
<code class="lineno"> 8</code>   <code class="nx">setLayers</code><code class="o">:</code> <code class="kd">function</code> <code class="p">(</code><code class="nx">layers</code><code class="p">)</code> <code class="p">{</code> 
<code class="lineno"> 9</code>     <code class="k">this</code><code class="p">.</code><code class="nx">layers</code> <code class="o">=</code> <code class="nx">layers</code><code class="p">;</code>
<code class="lineno">10</code>     <code class="k">return</code> <code class="k">this</code>
<code class="lineno">11</code>   <code class="p">},</code>
<code class="lineno">12</code>   <code class="nx">bake</code><code class="o">:</code> <code class="kd">function</code> <code class="p">()</code> <code class="p">{</code>
<code class="lineno">13</code>     <code class="c1">// do some baking</code>
<code class="lineno">14</code>     <code class="k">return</code> <code class="k">this</code>
<code class="lineno">15</code>   <code class="p">}</code>
<code class="lineno">16</code> <code class="p">});</code>
</pre></div>

</div>

<p>The code to work with cakes is now easier to read and less repetitive:</p>

<div class="code-block">
<div class="highlight"><pre><code class="lineno">1</code> <code class="n">var</code> <code class="n">cake</code> <code class="o">=</code> <code class="n">new</code> <code class="n">Cake</code><code class="p">().</code>
<code class="lineno">2</code>   <code class="n">setFlavour</code><code class="p">(</code><code class="err">'</code><code class="n">chocolate</code><code class="err">'</code><code class="p">).</code>
<code class="lineno">3</code>   <code class="n">setLayers</code><code class="p">(</code><code class="mi">3</code><code class="p">).</code>
<code class="lineno">4</code>   <code class="n">bake</code><code class="p">();</code>
</pre></div>

</div>

<p>For one-liners like setting a property, this is fine. But some functions are longer, and we want to signal the intent of the method at the top, not buried at the bottom. Normally this is done in the method’s name, but fluent interfaces are rarely written to include methods like <code>setLayersAndReturnThis</code>.</p>

<p>The <code>fluent</code> method decorator solves this problem:</p>

<div class="code-block">
<div class="highlight"><pre><code class="lineno">1</code> <code class="kd">function</code> <code class="nx">fluent</code> <code class="p">(</code><code class="nx">methodBody</code><code class="p">)</code> <code class="p">{</code>
<code class="lineno">2</code>   <code class="k">return</code> <code class="kd">function</code> <code class="p">()</code> <code class="p">{</code>
<code class="lineno">3</code>     <code class="nx">methodBody</code><code class="p">.</code><code class="nx">apply</code><code class="p">(</code><code class="k">this</code><code class="p">,</code> <code class="nx">arguments</code><code class="p">);</code>
<code class="lineno">4</code>     <code class="k">return</code> <code class="k">this</code><code class="p">;</code>
<code class="lineno">5</code>   <code class="p">}</code>
<code class="lineno">6</code> <code class="p">}</code>
</pre></div>

</div>

<p>Now you can write methods like this:</p>

<div class="code-block">
<div class="highlight"><pre><code class="lineno">1</code> <code class="nx">Cake</code><code class="p">.</code><code class="nx">prototype</code><code class="p">.</code><code class="nx">bake</code> <code class="o">=</code> <code class="nx">fluent</code><code class="p">(</code> <code class="kd">function</code> <code class="p">()</code> <code class="p">{</code>
<code class="lineno">2</code>   <code class="c1">// do some baking</code>
<code class="lineno">3</code>   <code class="c1">// using many lines of code</code>
<code class="lineno">4</code>   <code class="c1">// and possibly multiple returns</code>
<code class="lineno">5</code> <code class="p">});</code>
</pre></div>

</div>

<p>It’s obvious at a glance that this method is “fluent.”</p>

<h3 id="named-once">Once Again</h3>

<p>As we noted when we saw the recipe for <a href="#once">once</a>, you do have to be careful that you are calling the function <code>once</code> returns multiple times. If you keep calling <code>once</code>, you’ll get a new function that executes once, so you’ll keep calling your function:</p>

<div class="code-block">
<div class="highlight"><pre><code class="lineno">1</code> <code class="nx">once</code><code class="p">(</code><code class="kd">function</code> <code class="p">()</code> <code class="p">{</code>
<code class="lineno">2</code>   <code class="k">return</code> <code class="s1">'sure, why not?'</code>
<code class="lineno">3</code> <code class="p">})()</code>
<code class="lineno">4</code>   <code class="c1">//=&gt; 'sure, why not?'</code>
<code class="lineno">5</code> 
<code class="lineno">6</code> <code class="nx">once</code><code class="p">(</code><code class="kd">function</code> <code class="p">()</code> <code class="p">{</code>
<code class="lineno">7</code>   <code class="k">return</code> <code class="s1">'sure, why not?'</code>
<code class="lineno">8</code> <code class="p">})()</code>
<code class="lineno">9</code>   <code class="c1">//=&gt; 'sure, why not?'</code>
</pre></div>

</div>

<p>This is expected, but sometimes not what we want. Instead of the simple implementation, we can use a <em>named once</em>:</p>

<div class="code-block">
<div class="highlight"><pre><code class="lineno"> 1</code> <code class="kd">function</code> <code class="nx">once</code> <code class="p">(</code><code class="nx">fn</code><code class="p">)</code> <code class="p">{</code>
<code class="lineno"> 2</code>   <code class="kd">var</code> <code class="nx">done</code> <code class="o">=</code> <code class="kc">false</code><code class="p">,</code>
<code class="lineno"> 3</code>       <code class="nx">testAndSet</code><code class="p">;</code>
<code class="lineno"> 4</code>       
<code class="lineno"> 5</code>   <code class="k">if</code> <code class="p">(</code><code class="o">!!</code><code class="nx">fn</code><code class="p">.</code><code class="nx">name</code><code class="p">)</code> <code class="p">{</code>
<code class="lineno"> 6</code>     <code class="nx">testAndSet</code> <code class="o">=</code> <code class="kd">function</code> <code class="p">()</code> <code class="p">{</code>
<code class="lineno"> 7</code>       <code class="k">this</code><code class="cp">[</code><code class="s2">"__once__"</code><code class="cp">]</code> <code class="o">||</code> <code class="p">(</code><code class="k">this</code><code class="cp">[</code><code class="s2">"__once__"</code><code class="cp">]</code> <code class="o">=</code> <code class="p">{})</code>
<code class="lineno"> 8</code>       <code class="k">if</code> <code class="p">(</code><code class="k">this</code><code class="cp">[</code><code class="s2">"__once__"</code><code class="cp">][</code><code class="nx">fn.name</code><code class="cp">]</code><code class="p">)</code> <code class="k">return</code> <code class="kc">true</code><code class="p">;</code>
<code class="lineno"> 9</code>       <code class="k">this</code><code class="cp">[</code><code class="s2">"__once__"</code><code class="cp">][</code><code class="nx">fn.name</code><code class="cp">]</code> <code class="o">=</code> <code class="kc">true</code><code class="p">;</code>
<code class="lineno">10</code>       <code class="k">return</code> <code class="kc">false</code>
<code class="lineno">11</code>     <code class="p">}</code>
<code class="lineno">12</code>   <code class="p">}</code>
<code class="lineno">13</code>   <code class="k">else</code>  <code class="p">{</code>
<code class="lineno">14</code>     <code class="nx">testAndSet</code> <code class="o">=</code> <code class="kd">function</code> <code class="p">(</code><code class="nx">fn</code><code class="p">)</code> <code class="p">{</code>
<code class="lineno">15</code>       <code class="k">if</code> <code class="p">(</code><code class="nx">done</code><code class="p">)</code> <code class="k">return</code> <code class="kc">true</code><code class="p">;</code>
<code class="lineno">16</code>       <code class="nx">done</code> <code class="o">=</code> <code class="kc">true</code><code class="p">;</code>
<code class="lineno">17</code>       <code class="k">return</code> <code class="kc">false</code>
<code class="lineno">18</code>     <code class="p">}</code>
<code class="lineno">19</code>   <code class="p">}</code>
<code class="lineno">20</code>   
<code class="lineno">21</code>   <code class="k">return</code> <code class="kd">function</code> <code class="p">()</code> <code class="p">{</code>
<code class="lineno">22</code>     <code class="k">return</code> <code class="nx">testAndSet</code><code class="p">.</code><code class="nx">call</code><code class="p">(</code><code class="k">this</code><code class="p">)</code> <code class="o">?</code> <code class="k">void</code> <code class="mi">0</code> <code class="o">:</code> <code class="nx">fn</code><code class="p">.</code><code class="nx">apply</code><code class="p">(</code><code class="k">this</code><code class="p">,</code> <code class="nx">arguments</code><code class="p">)</code>
<code class="lineno">23</code>   <code class="p">}</code>
<code class="lineno">24</code> <code class="p">}</code>
</pre></div>

</div>

<p>If you call this with just a function, it behaves exactly like our first recipe. But if you supply a named function, you get a different behaviour:</p>

<div class="code-block">
<div class="highlight"><pre><code class="lineno">1</code> <code class="nx">once</code><code class="p">(</code><code class="kd">function</code> <code class="nx">askedOnDate</code> <code class="p">()</code> <code class="p">{</code>
<code class="lineno">2</code>   <code class="k">return</code> <code class="s1">'sure, why not?'</code>
<code class="lineno">3</code> <code class="p">})()</code>
<code class="lineno">4</code>   <code class="c1">//=&gt; 'sure, why not?'  </code>
<code class="lineno">5</code>     
<code class="lineno">6</code> <code class="nx">once</code><code class="p">(</code><code class="kd">function</code> <code class="nx">askedOnDate</code> <code class="p">()</code> <code class="p">{</code>
<code class="lineno">7</code>   <code class="k">return</code> <code class="s1">'sure, why not?'</code>
<code class="lineno">8</code> <code class="p">})()</code>
<code class="lineno">9</code>   <code class="c1">//=&gt; undefined</code>
</pre></div>

</div>

<p>The named once adds a property, <code>__once__</code>, to the context where the function is called and uses it to keep track of which named functions have and haven’t been run. One very powerful use is for defining object methods that should only be evaluated once, such as an initialization method. Normally this is done in the constructor, but you might write a “fluent” object that lets you call various setters:</p>

<div class="code-block">
<div class="highlight"><pre><code class="lineno"> 1</code> <code class="kd">function</code> <code class="nx">Widget</code> <code class="p">()</code> <code class="p">{};</code>
<code class="lineno"> 2</code> 
<code class="lineno"> 3</code> <code class="nx">Widget</code><code class="p">.</code><code class="nx">prototype</code><code class="p">.</code><code class="nx">setVolume</code> <code class="o">=</code> <code class="kd">function</code> <code class="nx">setVolume</code> <code class="p">(</code><code class="nx">volume</code><code class="p">)</code> <code class="p">{</code>
<code class="lineno"> 4</code>   <code class="k">this</code><code class="p">.</code><code class="nx">volume</code> <code class="o">=</code> <code class="nx">volume</code><code class="p">;</code>
<code class="lineno"> 5</code>   <code class="k">return</code> <code class="k">this</code><code class="p">;</code>
<code class="lineno"> 6</code> <code class="p">}</code>
<code class="lineno"> 7</code> 
<code class="lineno"> 8</code> <code class="nx">Widget</code><code class="p">.</code><code class="nx">prototype</code><code class="p">.</code><code class="nx">setDensity</code> <code class="o">=</code> <code class="kd">function</code> <code class="nx">setDensity</code> <code class="p">(</code><code class="nx">density</code><code class="p">)</code> <code class="p">{</code>
<code class="lineno"> 9</code>   <code class="k">this</code><code class="p">.</code><code class="nx">density</code> <code class="o">=</code> <code class="nx">density</code><code class="p">;</code>
<code class="lineno">10</code>   <code class="k">return</code> <code class="k">this</code><code class="p">;</code>
<code class="lineno">11</code> <code class="p">}</code>
<code class="lineno">12</code> 
<code class="lineno">13</code> <code class="nx">Widget</code><code class="p">.</code><code class="nx">prototype</code><code class="p">.</code><code class="nx">setLength</code> <code class="o">=</code> <code class="kd">function</code> <code class="nx">setLength</code> <code class="p">(</code><code class="nx">length</code><code class="p">)</code> <code class="p">{</code>
<code class="lineno">14</code>   <code class="k">this</code><code class="p">.</code><code class="nx">length</code> <code class="o">=</code> <code class="nx">length</code><code class="p">;</code>
<code class="lineno">15</code>   <code class="k">return</code> <code class="k">this</code><code class="p">;</code>
<code class="lineno">16</code> <code class="p">}</code>
<code class="lineno">17</code> 
<code class="lineno">18</code> <code class="nx">Widget</code><code class="p">.</code><code class="nx">prototype</code><code class="p">.</code><code class="nx">initialize</code> <code class="o">=</code> <code class="nx">once</code><code class="p">(</code><code class="kd">function</code> <code class="nx">initialize</code><code class="p">()</code> <code class="p">{</code>
<code class="lineno">19</code>   <code class="c1">// do some initialization</code>
<code class="lineno">20</code>   <code class="k">return</code> <code class="k">this</code><code class="p">;</code>
<code class="lineno">21</code> <code class="p">});</code>
<code class="lineno">22</code> 
<code class="lineno">23</code> <code class="kd">var</code> <code class="nx">w</code> <code class="o">=</code> <code class="k">new</code> <code class="nx">Widget</code><code class="p">()</code>
<code class="lineno">24</code>   <code class="p">.</code><code class="nx">setVolume</code><code class="p">(...)</code>
<code class="lineno">25</code>   <code class="p">.</code><code class="nx">setDensity</code><code class="p">)(...)</code>
<code class="lineno">26</code>   <code class="p">.</code><code class="nx">setLength</code><code class="p">(...)</code>
<code class="lineno">27</code>   <code class="p">.</code><code class="nx">initialize</code><code class="p">();</code>
</pre></div>

</div>

<p>If you later call <code>w.initialize()</code>, it won’t be initialized again. You need a named <code>once</code>, because an ordinary <code>once</code> would be called once for every instance sharing the same prototype, whereas the named once will keep track of whether it has been run separately for each instance.</p>

<p>Caveat: Every instance will have a <code>__once__</code> property. If you later write code that iterates over every property, you’ll have to take care not to interact with it.</p>

<h2 id="processing">
<span class="section-number">10 </span>Sequence</h2>

<div class="image-with-caption center image-with-caption center">
  <img src="/site_images/javascript-allonge/saltspring----title.jpg" alt="Saltspring Island Roasting Facility"><p class="caption">Saltspring Island Roasting Facility</p>
</div>

<p>Throughout the book, we’ve looked how functions work, and more importantly, the many ways they can be decomposed into smaller parts and recombined in different ways. In this chapter. we will step back and look at a larger pattern, the use of <code>sequence</code> to control the processing of information.</p>

<h3 id="leanpub-auto-introduction-compose-and-pipeline">Introduction: Compose and Pipeline</h3>

<p>In <a href="#combinators">Combinators and Function Decorators</a>, we saw the function <code>compose</code>:</p>

<div class="code-block">
<div class="highlight"><pre><code class="lineno">1</code> <code class="kd">function</code> <code class="nx">compose</code> <code class="p">(</code><code class="nx">a</code><code class="p">,</code> <code class="nx">b</code><code class="p">)</code> <code class="p">{</code>
<code class="lineno">2</code>   <code class="k">return</code> <code class="kd">function</code> <code class="p">(</code><code class="nx">c</code><code class="p">)</code> <code class="p">{</code>
<code class="lineno">3</code>     <code class="k">return</code> <code class="nx">a</code><code class="p">(</code><code class="nx">b</code><code class="p">(</code><code class="nx">c</code><code class="p">))</code>
<code class="lineno">4</code>   <code class="p">}</code>
<code class="lineno">5</code> <code class="p">}</code>
</pre></div>

</div>

<p>As we saw before, given:</p>

<div class="code-block">
<div class="highlight"><pre><code class="lineno">1</code> <code class="kd">function</code> <code class="nx">addOne</code> <code class="p">(</code><code class="nx">number</code><code class="p">)</code> <code class="p">{</code>
<code class="lineno">2</code>   <code class="k">return</code> <code class="nx">number</code> <code class="o">+</code> <code class="mi">1</code>
<code class="lineno">3</code> <code class="p">}</code>
<code class="lineno">4</code> 
<code class="lineno">5</code> <code class="kd">function</code> <code class="kr">double</code> <code class="p">(</code><code class="nx">number</code><code class="p">)</code> <code class="p">{</code>
<code class="lineno">6</code>   <code class="k">return</code> <code class="nx">number</code> <code class="o">*</code> <code class="mi">2</code>
<code class="lineno">7</code> <code class="p">}</code>
</pre></div>

</div>

<p>Instead of:</p>

<div class="code-block">
<div class="highlight"><pre><code class="lineno">1</code> <code class="kd">function</code> <code class="nx">doubleOfAddOne</code> <code class="p">(</code><code class="nx">number</code><code class="p">)</code> <code class="p">{</code>
<code class="lineno">2</code>   <code class="k">return</code> <code class="kr">double</code><code class="p">(</code><code class="nx">addOne</code><code class="p">(</code><code class="nx">number</code><code class="p">))</code>
<code class="lineno">3</code> <code class="p">}</code>
</pre></div>

</div>

<p>We could write:</p>

<div class="code-block">
<div class="highlight"><pre><code class="lineno">1</code> <code class="n">var</code> <code class="n">doubleOfAddOne</code> <code class="o">=</code> <code class="n">compose</code><code class="p">(</code><code class="kt">double</code><code class="p">,</code> <code class="n">addOne</code><code class="p">);</code>
</pre></div>

</div>

<h4 id="leanpub-auto-the-semantics-of-compose">the semantics of compose</h4>

<p>With <code>compose</code>, we’re usually making a new function. Although it works perfectly well, we don’t need to write things like <code>compose(double, addOne)(3)</code> inline to get the result <code>8</code>. It’s easier and clearer to write <code>double(addOne(3))</code>.</p>

<p>On the other hand, when working with something like method decorators, it can help to write:</p>

<div class="code-block">
<div class="highlight"><pre><code class="lineno"> 1</code> <code class="kd">var</code> <code class="nx">setter</code> <code class="o">=</code> <code class="nx">compose</code><code class="p">(</code><code class="nx">fluent</code><code class="p">,</code> <code class="nx">maybe</code><code class="p">);</code>
<code class="lineno"> 2</code> 
<code class="lineno"> 3</code> <code class="c1">// ...</code>
<code class="lineno"> 4</code> 
<code class="lineno"> 5</code> <code class="nx">SomeClass</code><code class="p">.</code><code class="nx">prototype</code><code class="p">.</code><code class="nx">setUser</code> <code class="o">=</code> <code class="nx">setter</code><code class="p">(</code><code class="kd">function</code> <code class="p">(</code><code class="nx">user</code><code class="p">)</code> <code class="p">{</code>
<code class="lineno"> 6</code>   <code class="k">this</code><code class="p">.</code><code class="nx">user</code> <code class="o">=</code> <code class="nx">user</code><code class="p">;</code>
<code class="lineno"> 7</code> <code class="p">});</code>
<code class="lineno"> 8</code> 
<code class="lineno"> 9</code> <code class="nx">SomeClass</code><code class="p">.</code><code class="nx">prototype</code><code class="p">.</code><code class="nx">setPrivileges</code> <code class="o">=</code> <code class="nx">setter</code><code class="p">(</code><code class="kd">function</code> <code class="p">(</code><code class="nx">privileges</code><code class="p">)</code> <code class="p">{</code>
<code class="lineno">10</code>   <code class="k">this</code><code class="p">.</code><code class="nx">privileges</code> <code class="o">=</code> <code class="nx">privileges</code><code class="p">;</code>
<code class="lineno">11</code> <code class="p">});</code>
</pre></div>

</div>

<p>This makes it clear that <code>setter</code> adds the behaviour of both <code>fluent</code> and <code>maybe</code> to each method it decorates, and it’s simpler to read <code>var setter = compose(fluent, maybe);</code> than:</p>

<div class="code-block">
<div class="highlight"><pre><code class="lineno">1</code> <code class="kd">function</code> <code class="nx">setter</code> <code class="p">(</code><code class="nx">fn</code><code class="p">)</code> <code class="p">{</code>
<code class="lineno">2</code>   <code class="k">return</code> <code class="nx">fluent</code><code class="p">(</code><code class="nx">maybe</code><code class="p">(</code><code class="nx">fn</code><code class="p">));</code>
<code class="lineno">3</code> <code class="p">}</code>
</pre></div>

</div>

<p>The take-away is that <code>compose</code> is helpful when we are defining a new function that combines the effects existing functions.</p>

<h4 id="leanpub-auto-pipeline">pipeline</h4>

<p><code>compose</code> is extremely handy, but one thing it doesn’t communicate well is the order on operations. <code>compose</code> is written that way because it matches the way explicitly composing functions works in JavaScript and most other languages: When you write a(b(…)), <code>a</code> happens after <code>b</code>.</p>

<p>Sometimes it makes more sense to compose functions in data flow order, as in “The value flows through a and then through b.” For this, we can use the <code>pipeline</code> function:</p>

<div class="code-block">
<div class="highlight"><pre><code class="lineno">1</code> <code class="n">var</code> <code class="n">pipeline</code> <code class="o">=</code> <code class="n">flip</code><code class="p">(</code><code class="n">compose</code><code class="p">);</code>
<code class="lineno">2</code> 
<code class="lineno">3</code> <code class="n">var</code> <code class="n">setter</code> <code class="o">=</code> <code class="n">pipeline</code><code class="p">(</code><code class="n">addOne</code><code class="p">,</code> <code class="kt">double</code><code class="p">);</code>
</pre></div>

</div>

<p>Comparing <code>pipeline</code> to <code>compose</code>, pipeline says “add one to the number and then double it.” Compose says, “double the result of adding one to the number.” Both do the same job, but communicate their intention in opposite ways.</p>

<div class="image-with-caption center image-with-caption center">
  <img src="/site_images/javascript-allonge/saltspring----rollers.jpg" alt="Saltspring Island Roasting Facility"><p class="caption">Saltspring Island Roasting Facility</p>
</div>

<h4 id="leanpub-auto-callbacks">callbacks</h4>

<p><code>pipeline</code> and <code>compose</code> both work with functions that take an argument and return a value. In our next section, we’ll discuss pipelining functions that invoke a callback rather than returning a value.</p>

<h2 id="redecorating">
<span class="section-number">11 </span>New Ideas</h2>

<div class="image-with-caption center image-with-caption center">
  <img src="/site_images/javascript-allonge/train_1200.jpg" alt="The delight of coffee is that it transports you to another world"><p class="caption">The delight of coffee is that it transports you to another world</p>
</div>

<p>(<em>this bonus chapter is a work-in-progress</em>)</p>

<h3 id="leanpub-auto-how-prototypes-and-constructors-differ-from-classes">How Prototypes and Constructors differ from Classes</h3>

<p>In the previous section, we said that JavaScript has “classes” for some definition of the word “class,” and we showed how JavaScript provides many of the features found in other “object-oriented languages.” For those who want a fuller explanation, this section goes into more detail about how JavaScript’s “prototypes” differ from the classes found in a language like Ruby. It is not necessary to read this section to understand programming in JavaScript, but it can be helpful when discussing JavaScript with programmers who are more comfortable talking about classes.</p>

<hr class="scene-break">
<p>Although each “object-oriented” programming language has its own particular set of semantics, the majority in popular use have “classes.” A class is an entity responsible for creating objects and defining the behaviour of objects. Classes may be objects in their own right, but if they are, they’re different from other types of objects. For example, the <code>String</code> class in Ruby is not itself a string, it’s an object whose class is <code>Class</code>. All objects in a “classical” system have a class, and their class is a “class.”</p>

<p>That sounds tautological, until we look at JavaScript. But let’s start with a quick review of a popular classist language, Ruby.</p>

<h4 id="leanpub-auto-ruby">ruby</h4>

<p>In Ruby, classes are objects, but they’re special objects. For example, here are some of the methods associated with the Ruby class <code>String</code>:</p>

<div class="code-block">
<div class="highlight"><pre><code class="lineno"> 1</code> <code class="n">String</code><code class="p">.</code><code class="n">methods</code>
<code class="lineno"> 2</code>   <code class="err">#</code><code class="o">=&gt;</code> <code class="p">[</code><code class="o">:</code><code class="n">try_convert</code><code class="p">,</code> <code class="o">:</code><code class="n">allocate</code><code class="p">,</code> <code class="o">:</code><code class="n">new</code><code class="p">,</code> <code class="o">:</code><code class="n">superclass</code><code class="p">,</code> <code class="o">:</code><code class="n">freeze</code><code class="p">,</code> <code class="o">:===</code><code class="p">,</code> <code class="o">:==</code><code class="p">,</code>
<code class="lineno"> 3</code>        <code class="o">:&lt;=&gt;</code><code class="p">,</code> <code class="o">:&lt;</code><code class="p">,</code> <code class="o">:&lt;=</code><code class="p">,</code> <code class="o">:&gt;</code><code class="p">,</code> <code class="o">:&gt;=</code><code class="p">,</code> <code class="o">:</code><code class="n">to_s</code><code class="p">,</code> <code class="o">:</code><code class="n">included_modules</code><code class="p">,</code> <code class="o">:</code><code class="n">include</code><code class="o">?</code><code class="p">,</code> <code class="o">:</code><code class="n">name</code><code class="p">,</code> 
<code class="lineno"> 4</code>        <code class="o">:</code><code class="n">ancestors</code><code class="p">,</code> <code class="o">:</code><code class="n">instance_methods</code><code class="p">,</code> <code class="o">:</code><code class="n">public_instance_methods</code><code class="p">,</code> 
<code class="lineno"> 5</code>        <code class="o">:</code><code class="n">protected_instance_methods</code><code class="p">,</code> <code class="o">:</code><code class="n">private_instance_methods</code><code class="p">,</code> <code class="o">:</code><code class="n">constants</code><code class="p">,</code> 
<code class="lineno"> 6</code>        <code class="o">:</code><code class="n">const_get</code><code class="p">,</code> <code class="o">:</code><code class="n">const_set</code><code class="p">,</code> <code class="o">:</code><code class="n">const_defined</code><code class="o">?</code><code class="p">,</code> <code class="o">:</code><code class="n">const_missing</code><code class="p">,</code> 
<code class="lineno"> 7</code>        <code class="o">:</code><code class="n">class_variables</code><code class="p">,</code> <code class="o">:</code><code class="n">remove_class_variable</code><code class="p">,</code> <code class="o">:</code><code class="n">class_variable_get</code><code class="p">,</code> 
<code class="lineno"> 8</code>        <code class="o">:</code><code class="n">class_variable_set</code><code class="p">,</code> <code class="o">:</code><code class="n">class_variable_defined</code><code class="o">?</code><code class="p">,</code> <code class="o">:</code><code class="n">public_constant</code><code class="p">,</code> 
<code class="lineno"> 9</code>        <code class="o">:</code><code class="n">private_constant</code><code class="p">,</code> <code class="o">:</code><code class="n">module_exec</code><code class="p">,</code> <code class="o">:</code><code class="n">class_exec</code><code class="p">,</code> <code class="o">:</code><code class="n">module_eval</code><code class="p">,</code> <code class="o">:</code><code class="n">class_eval</code><code class="p">,</code> 
<code class="lineno">10</code>        <code class="o">:</code><code class="n">method_defined</code><code class="o">?</code><code class="p">,</code> <code class="o">:</code><code class="n">public_method_defined</code><code class="o">?</code><code class="p">,</code> <code class="o">:</code><code class="n">private_method_defined</code><code class="o">?</code><code class="p">,</code> 
<code class="lineno">11</code>        <code class="o">:</code><code class="n">protected_method_defined</code><code class="o">?</code><code class="p">,</code> <code class="o">:</code><code class="n">public_class_method</code><code class="p">,</code> <code class="o">:</code><code class="n">private_class_method</code><code class="p">,</code> 
<code class="lineno">12</code>        <code class="err">#</code> <code class="p">...</code>
<code class="lineno">13</code>        <code class="o">:!=</code><code class="p">,</code> <code class="o">:</code><code class="n">instance_eval</code><code class="p">,</code> <code class="o">:</code><code class="n">instance_exec</code><code class="p">,</code> <code class="o">:</code><code class="n">__send__</code><code class="p">,</code> <code class="o">:</code><code class="n">__id__</code><code class="p">]</code> 
</pre></div>

</div>

<p>And here are some of the methods associated with an instance of a string:</p>

<div class="code-block">
<div class="highlight"><pre><code class="lineno"> 1</code> <code class="n">String</code><code class="p">.</code><code class="n">new</code><code class="p">.</code><code class="n">methods</code>
<code class="lineno"> 2</code>   <code class="err">#</code><code class="o">=&gt;</code> <code class="p">[</code><code class="o">:&lt;=&gt;</code><code class="p">,</code> <code class="o">:==</code><code class="p">,</code> <code class="o">:===</code><code class="p">,</code> <code class="o">:</code><code class="n">eql</code><code class="o">?</code><code class="p">,</code> <code class="o">:</code><code class="n">hash</code><code class="p">,</code> <code class="o">:</code><code class="k">case</code><code class="n">cmp</code><code class="p">,</code> :<code class="o">+</code><code class="p">,</code> <code class="o">:*</code><code class="p">,</code> <code class="o">:%</code><code class="p">,</code> <code class="o">:</code><code class="p">[],</code>
<code class="lineno"> 3</code>        <code class="o">:</code><code class="p">[]</code><code class="o">=</code><code class="p">,</code> <code class="o">:</code><code class="n">insert</code><code class="p">,</code> <code class="o">:</code><code class="n">length</code><code class="p">,</code> <code class="o">:</code><code class="n">size</code><code class="p">,</code> <code class="o">:</code><code class="n">bytesize</code><code class="p">,</code> <code class="o">:</code><code class="n">empty</code><code class="o">?</code><code class="p">,</code> <code class="o">:=~</code><code class="p">,</code>
<code class="lineno"> 4</code>        <code class="o">:</code><code class="n">match</code><code class="p">,</code> <code class="o">:</code><code class="n">succ</code><code class="p">,</code> <code class="o">:</code><code class="n">succ</code><code class="o">!</code><code class="p">,</code> <code class="o">:</code><code class="n">next</code><code class="p">,</code> <code class="o">:</code><code class="n">next</code><code class="o">!</code><code class="p">,</code> <code class="o">:</code><code class="n">upto</code><code class="p">,</code> <code class="o">:</code><code class="n">index</code><code class="p">,</code> <code class="o">:</code><code class="n">rindex</code><code class="p">,</code>
<code class="lineno"> 5</code>        <code class="o">:</code><code class="n">replace</code><code class="p">,</code> <code class="o">:</code><code class="n">clear</code><code class="p">,</code> <code class="o">:</code><code class="n">chr</code><code class="p">,</code> <code class="o">:</code><code class="n">getbyte</code><code class="p">,</code> <code class="o">:</code><code class="n">setbyte</code><code class="p">,</code> <code class="o">:</code><code class="n">byteslice</code><code class="p">,</code>
<code class="lineno"> 6</code>        <code class="o">:</code><code class="n">to_i</code><code class="p">,</code> <code class="o">:</code><code class="n">to_f</code><code class="p">,</code> <code class="o">:</code><code class="n">to_s</code><code class="p">,</code> <code class="o">:</code><code class="n">to_str</code><code class="p">,</code> <code class="o">:</code><code class="n">inspect</code><code class="p">,</code> <code class="o">:</code><code class="n">dump</code><code class="p">,</code> <code class="o">:</code><code class="n">upcase</code><code class="p">,</code>
<code class="lineno"> 7</code>        <code class="o">:</code><code class="n">downcase</code><code class="p">,</code> <code class="o">:</code><code class="n">capitalize</code><code class="p">,</code> <code class="o">:</code><code class="n">swapcase</code><code class="p">,</code> <code class="o">:</code><code class="n">upcase</code><code class="o">!</code><code class="p">,</code> <code class="o">:</code><code class="n">downcase</code><code class="o">!</code><code class="p">,</code>
<code class="lineno"> 8</code>        <code class="o">:</code><code class="n">capitalize</code><code class="o">!</code><code class="p">,</code> <code class="o">:</code><code class="n">swapcase</code><code class="o">!</code><code class="p">,</code> <code class="o">:</code><code class="n">hex</code><code class="p">,</code> <code class="o">:</code><code class="n">oct</code><code class="p">,</code> <code class="o">:</code><code class="n">split</code><code class="p">,</code> <code class="o">:</code><code class="n">lines</code><code class="p">,</code> <code class="o">:</code><code class="n">bytes</code><code class="p">,</code>
<code class="lineno"> 9</code>        <code class="o">:</code><code class="n">chars</code><code class="p">,</code> <code class="o">:</code><code class="n">codepoints</code><code class="p">,</code> <code class="o">:</code><code class="n">reverse</code><code class="p">,</code> <code class="o">:</code><code class="n">reverse</code><code class="o">!</code><code class="p">,</code> <code class="o">:</code><code class="n">concat</code><code class="p">,</code> <code class="o">:&lt;&lt;</code><code class="p">,</code>
<code class="lineno">10</code>        <code class="o">:</code><code class="n">prepend</code><code class="p">,</code> <code class="o">:</code><code class="n">crypt</code><code class="p">,</code> <code class="o">:</code><code class="n">intern</code><code class="p">,</code> <code class="o">:</code><code class="n">to_sym</code><code class="p">,</code> <code class="o">:</code><code class="n">ord</code><code class="p">,</code> <code class="o">:</code><code class="n">include</code><code class="o">?</code><code class="p">,</code>
<code class="lineno">11</code>        <code class="o">:</code><code class="n">start_with</code><code class="o">?</code><code class="p">,</code> <code class="o">:</code><code class="n">end_with</code><code class="o">?</code><code class="p">,</code> <code class="o">:</code><code class="n">scan</code><code class="p">,</code> <code class="o">:</code><code class="n">ljust</code><code class="p">,</code> <code class="o">:</code><code class="n">rjust</code><code class="p">,</code> <code class="o">:</code><code class="n">center</code><code class="p">,</code>
<code class="lineno">12</code>        <code class="err">#</code> <code class="p">...</code>
<code class="lineno">13</code>        <code class="o">:</code><code class="n">instance_eval</code><code class="p">,</code> <code class="o">:</code><code class="n">instance_exec</code><code class="p">,</code> <code class="o">:</code><code class="n">__send__</code><code class="p">,</code> <code class="o">:</code><code class="n">__id__</code><code class="p">]</code>
</pre></div>

</div>

<p>As you can see, a “class” in Ruby is very different from an “instance of that class.” And the methods of a class are very different from the methods of an instance of that class.</p>

<p>Here’s how you define a Queue in Ruby:</p>

<div class="code-block">
<div class="highlight"><pre><code class="lineno"> 1</code> <code class="n">class</code> <code class="n">Queue</code>
<code class="lineno"> 2</code>   <code class="n">def</code> <code class="n">initialize</code>
<code class="lineno"> 3</code>     <code class="err">@</code><code class="n">array</code><code class="p">,</code> <code class="err">@</code><code class="n">head</code><code class="p">,</code> <code class="err">@</code><code class="n">tail</code> <code class="o">=</code> <code class="p">[],</code> <code class="mi">0</code><code class="p">,</code> <code class="o">-</code><code class="mi">1</code>
<code class="lineno"> 4</code>   <code class="n">end</code>
<code class="lineno"> 5</code>   
<code class="lineno"> 6</code>   <code class="n">def</code> <code class="n">pushTail</code> <code class="n">value</code>
<code class="lineno"> 7</code>     <code class="err">@</code><code class="n">array</code><code class="p">[</code><code class="err">@</code><code class="n">tail</code> <code class="o">+=</code> <code class="mi">1</code><code class="p">]</code> <code class="o">=</code> <code class="n">value</code>
<code class="lineno"> 8</code>   <code class="n">end</code>
<code class="lineno"> 9</code>   
<code class="lineno">10</code>   <code class="n">def</code> <code class="n">pullHead</code>
<code class="lineno">11</code>     <code class="k">if</code> <code class="o">!</code><code class="err">@</code><code class="n">isEmpty</code>
<code class="lineno">12</code>       <code class="err">@</code><code class="n">array</code><code class="p">[</code><code class="err">@</code><code class="n">head</code><code class="p">]).</code><code class="n">tap</code> <code class="p">{</code> <code class="o">|</code><code class="n">value</code><code class="o">|</code>
<code class="lineno">13</code>         <code class="err">@</code><code class="n">array</code><code class="p">[</code><code class="err">@</code><code class="n">head</code><code class="p">]</code> <code class="o">=</code> <code class="n">null</code>
<code class="lineno">14</code>         <code class="err">@</code><code class="n">head</code> <code class="o">+=</code> <code class="mi">1</code>
<code class="lineno">15</code>       <code class="p">}</code>
<code class="lineno">16</code>     <code class="n">end</code>
<code class="lineno">17</code>   <code class="n">end</code>
<code class="lineno">18</code>   
<code class="lineno">19</code>   <code class="n">def</code> <code class="n">isEmpty</code>
<code class="lineno">20</code>     <code class="o">!!</code><code class="p">(</code><code class="err">@</code><code class="n">tail</code> <code class="o">&lt;</code> <code class="err">@</code><code class="n">head</code><code class="p">)</code>
<code class="lineno">21</code>   <code class="n">end</code>
<code class="lineno">22</code> <code class="n">end</code>
</pre></div>

</div>

<p>There is special syntax for defining a class, and special syntax for defining the behaviour of instances. There are different ways of defining the way new instances are created in classist languages. Ruby uses a “magic method” called <code>initialize</code>. Now let’s look at JavaScript.</p>

<h4 id="leanpub-auto-javascript-has-constructors-and-prototypes">javascript has constructors and prototypes</h4>

<p>JavaScript objects don’t have a formal class, and thus there’s no special syntax for defining how to create an instance or define its behaviour.</p>

<p>JavaScript instances are created with a <em>constructor</em>. The constructor of an instance is a function that was invoked with the <code>new</code> operator. In JavaScript, any function can be a constructor, even if it doesn’t look like one:</p>

<div class="code-block">
<div class="highlight"><pre><code class="lineno"> 1</code> <code class="kd">function</code> <code class="nx">square</code> <code class="p">(</code><code class="nx">n</code><code class="p">)</code> <code class="p">{</code> <code class="k">return</code> <code class="nx">n</code> <code class="o">*</code> <code class="nx">n</code><code class="p">;</code> <code class="p">}</code>
<code class="lineno"> 2</code>   <code class="c1">//=&gt; undefined</code>
<code class="lineno"> 3</code> <code class="nx">square</code><code class="p">(</code><code class="mi">2</code><code class="p">)</code>
<code class="lineno"> 4</code>   <code class="c1">//=&gt; 4</code>
<code class="lineno"> 5</code> <code class="nx">square</code><code class="p">(</code><code class="mi">2</code><code class="p">).</code><code class="nx">constructor</code>
<code class="lineno"> 6</code>   <code class="c1">//=&gt; </code><code class="cp">[</code><code class="nx">Function</code><code class="p">:</code> <code class="nx">Number</code><code class="cp">]</code><code class="c1"></code>
<code class="lineno"> 7</code> <code class="k">new</code> <code class="nx">square</code><code class="p">(</code><code class="mi">2</code><code class="p">)</code>
<code class="lineno"> 8</code>   <code class="c1">//=&gt; {}</code>
<code class="lineno"> 9</code> <code class="k">new</code> <code class="nx">square</code><code class="p">(</code><code class="mi">2</code><code class="p">).</code><code class="nx">constructor</code>
<code class="lineno">10</code>   <code class="c1">//=&gt; </code><code class="cp">[</code><code class="nx">Function</code><code class="p">:</code> <code class="nx">square</code><code class="cp">]</code><code class="c1"></code>
</pre></div>

</div>

<p>As you can see, the <code>square</code> function will act as a constructor if you call it with <code>new</code>. <em>There is no special kind of thing that constructs new objects, every function is (potentially) a constructor</em>.</p>

<p>That’s different from a true classical language, where the class is a special kind of object that creates new instances.</p>

<p>How does JavaScript define the behaviour of instances? JavaScript doesn’t have a special syntax or special kind of object for that, it has “prototypes.” Prototypes are objects, but unlike a classical system, there are no special methods or properties associated with a prototype. Any object can be a prototype, even an empty object. In fact, that’s exactly what is associated with a constructor by default:</p>

<div class="code-block">
<div class="highlight"><pre><code class="lineno">1</code> <code class="kd">function</code> <code class="nx">Nullo</code> <code class="p">()</code> <code class="p">{};</code>
<code class="lineno">2</code> <code class="nx">Nullo</code><code class="p">.</code><code class="nx">prototype</code>
<code class="lineno">3</code>   <code class="c1">//=&gt; {}</code>
</pre></div>

</div>

<p>There’s absolutely nothing special about a prototype object. No special class methods, no special constructor of its own, nothing. Let’s look at a simple Queue in JavaScript:</p>

<div class="code-block">
<div class="highlight"><pre><code class="lineno"> 1</code> <code class="kd">var</code> <code class="nx">Queue</code> <code class="o">=</code> <code class="kd">function</code> <code class="p">()</code> <code class="p">{</code>
<code class="lineno"> 2</code>   <code class="k">this</code><code class="p">.</code><code class="nx">array</code> <code class="o">=</code> <code class="cp">[]</code><code class="p">;</code>
<code class="lineno"> 3</code>   <code class="k">this</code><code class="p">.</code><code class="nx">head</code> <code class="o">=</code> <code class="mi">0</code><code class="p">;</code>
<code class="lineno"> 4</code>   <code class="k">this</code><code class="p">.</code><code class="nx">tail</code> <code class="o">=</code> <code class="o">-</code><code class="mi">1</code><code class="p">;</code>
<code class="lineno"> 5</code> <code class="p">};</code>
<code class="lineno"> 6</code>   
<code class="lineno"> 7</code> <code class="nx">Queue</code><code class="p">.</code><code class="nx">prototype</code><code class="p">.</code><code class="nx">pushTail</code> <code class="o">=</code> <code class="kd">function</code> <code class="p">(</code><code class="nx">value</code><code class="p">)</code> <code class="p">{</code>
<code class="lineno"> 8</code>   <code class="k">return</code> <code class="k">this</code><code class="p">.</code><code class="nx">array</code><code class="cp">[</code><code class="nx">this.tail</code> <code class="o">+=</code> <code class="mi">1</code><code class="cp">]</code> <code class="o">=</code> <code class="nx">value</code><code class="p">;</code>
<code class="lineno"> 9</code> <code class="p">};</code>
<code class="lineno">10</code> <code class="nx">Queue</code><code class="p">.</code><code class="nx">prototype</code><code class="p">.</code><code class="nx">pullHead</code> <code class="o">=</code> <code class="kd">function</code> <code class="p">()</code> <code class="p">{</code>
<code class="lineno">11</code>   <code class="kd">var</code> <code class="nx">value</code><code class="p">;</code>
<code class="lineno">12</code>   
<code class="lineno">13</code>   <code class="k">if</code> <code class="p">(</code><code class="o">!</code><code class="k">this</code><code class="p">.</code><code class="nx">isEmpty</code><code class="p">())</code> <code class="p">{</code>
<code class="lineno">14</code>     <code class="nx">value</code> <code class="o">=</code> <code class="k">this</code><code class="p">.</code><code class="nx">array</code><code class="cp">[</code><code class="nx">this.head</code><code class="cp">]</code><code class="p">;</code>
<code class="lineno">15</code>     <code class="k">this</code><code class="p">.</code><code class="nx">array</code><code class="cp">[</code><code class="nx">this.head</code><code class="cp">]</code> <code class="o">=</code> <code class="k">void</code> <code class="mi">0</code><code class="p">;</code>
<code class="lineno">16</code>     <code class="k">this</code><code class="p">.</code><code class="nx">head</code> <code class="o">+=</code> <code class="mi">1</code><code class="p">;</code>
<code class="lineno">17</code>     <code class="k">return</code> <code class="nx">value</code><code class="p">;</code>
<code class="lineno">18</code>   <code class="p">}</code>
<code class="lineno">19</code> <code class="p">};</code>
<code class="lineno">20</code> <code class="nx">Queue</code><code class="p">.</code><code class="nx">prototype</code><code class="p">.</code><code class="nx">isEmpty</code> <code class="o">=</code> <code class="kd">function</code> <code class="p">()</code> <code class="p">{</code>
<code class="lineno">21</code>   <code class="k">return</code> <code class="k">this</code><code class="p">.</code><code class="nx">tail</code> <code class="o">&lt;</code> <code class="k">this</code><code class="p">.</code><code class="nx">head</code><code class="p">;</code>
<code class="lineno">22</code> <code class="p">};</code>
<code class="lineno">23</code> 
<code class="lineno">24</code> <code class="nx">Queue</code><code class="p">.</code><code class="nx">prototype</code>
<code class="lineno">25</code>   <code class="c1">//=&gt;  { pushTail: </code><code class="cp">[</code><code class="nx">Function</code><code class="cp">]</code><code class="c1">,</code>
<code class="lineno">26</code>   <code class="c1">//      pullHead: </code><code class="cp">[</code><code class="nx">Function</code><code class="cp">]</code><code class="c1">,</code>
<code class="lineno">27</code>   <code class="c1">//      isEmpty: </code><code class="cp">[</code><code class="nx">Function</code><code class="cp">]</code><code class="c1"> }</code>
</pre></div>

</div>

<p>The first way a prototype in JavaScript is different from a class in Ruby is that the prototype is an ordinary object with exactly the same properties that we expect to find in an instance: Methods <code>pushTail</code>, <code>pullHead</code>, and <code>isEmpty</code>.</p>

<p>The second way is that <em>any</em> object can be a prototype. It can have functions (which act like methods), it can have other values (like numbers, booleans, objects, or strings). It can be an object you’re using for something else: An account, a view, a DOM object if you’re in the browser, anything.</p>

<p>“Classes” are objects in most “classical” languages, but they are a special kind of object. In JavaScript, prototypes are not a special kind of object, they’re just objects.</p>

<h4 id="leanpub-auto-summary-of-the-difference-between-classes-and-prototypes">summary of the difference between classes and prototypes</h4>

<p>A class in a formal classist language can be an object, but it’s a special kind of object with special properties and methods. It is responsible for creating new instances and for defining the behaviour of instances.</p>

<p>Instance behaviour in a classist language is defined with special syntax. If changes are allowed dynamically, they are done with special syntax and/or special methods invoked on the class.</p>

<p>JavaScript splits the responsibility for instances into a constructor and a prototype. A constructor in JavaScript can be any function. Constructors are responsible for creating new instances.</p>

<p>A prototype in JavaScript can be any object. Prototypes are responsible for defining the behaviour of instances. prototypes don’t have special methods or properties.</p>

<p>Instance behaviour in JavaScript is defined by modifying the prototype directly, e.g. by adding functions to it as properties. There is no special syntax for defining a class or modifying a class.</p>

<h4 id="leanpub-auto-so-why-does-this-book-say-that-javascript-has-classes-for-some-definition-of-class">so why does this book say that javascript has “classes” for some definition of “class?”</h4>

<p>Because, <strong>if</strong>:</p>

<ol class="numeric numeric">
<li>You use a function as a constructor, and;</li>
  <li>You use a prototype for defining instance methods, and;</li>
  <li>The prototype is used strictly for defining the instance methods and nothing else;</li>
</ol>
<p><strong>Then</strong>:</p>

<p>You will have something that works just like a simple class-based system, with the constructor function and its prototype acting as the “class.”</p>

<p>But if you want more, you have a flexible system that does allow you to do <a href="https://github.com/raganwald/homoiconic/blob/master/2013/01/function_and_method_decorators.md#function-and-method-decorators" title="Function and Method Decorators">much much more</a>. It’s up to you.</p>

<h3 id="new-agnostic">New-Agnostic Constructors</h3>

<p>JavaScript is inflexible about certain things. One of them is invoking <code>new</code> on a constructor. In many of our recipes, we can write functions that can handle a variable number of arguments and use <code>.apply</code> to invoke a function. For example:</p>

<div class="code-block">
<div class="highlight"><pre><code class="lineno">1</code> <code class="kd">function</code> <code class="nx">fluent</code> <code class="p">(</code><code class="nx">methodBody</code><code class="p">)</code> <code class="p">{</code>
<code class="lineno">2</code>   <code class="k">return</code> <code class="kd">function</code> <code class="p">()</code> <code class="p">{</code>
<code class="lineno">3</code>     <code class="nx">methodBody</code><code class="p">.</code><code class="nx">apply</code><code class="p">(</code><code class="k">this</code><code class="p">,</code> <code class="nx">arguments</code><code class="p">);</code>
<code class="lineno">4</code>     <code class="k">return</code> <code class="k">this</code>
<code class="lineno">5</code>   <code class="p">}</code>
<code class="lineno">6</code> <code class="p">}</code>
</pre></div>

</div>

<p>You can’t do the same thing with calling a constructor. This will not work:</p>

<div class="code-block">
<div class="highlight"><pre><code class="lineno"> 1</code> <code class="n">function</code> <code class="nf">User</code> <code class="p">(</code><code class="n">name</code><code class="p">,</code> <code class="n">password</code><code class="p">)</code> <code class="p">{</code>
<code class="lineno"> 2</code>   <code class="n">this</code><code class="p">.</code><code class="n">name</code> <code class="o">=</code> <code class="n">name</code> <code class="o">||</code> <code class="err">'</code><code class="n">Untitled</code><code class="err">'</code><code class="p">;</code>
<code class="lineno"> 3</code>   <code class="n">this</code><code class="p">.</code><code class="n">password</code> <code class="o">=</code> <code class="n">password</code>
<code class="lineno"> 4</code> <code class="p">};</code>
<code class="lineno"> 5</code> 
<code class="lineno"> 6</code> <code class="n">function</code> <code class="nf">withDefaultPassword</code> <code class="p">()</code> <code class="p">{</code>
<code class="lineno"> 7</code>   <code class="n">var</code> <code class="n">args</code> <code class="o">=</code> <code class="n">Array</code><code class="p">.</code><code class="n">prototype</code><code class="p">.</code><code class="n">slice</code><code class="p">.</code><code class="n">call</code><code class="p">(</code><code class="n">arguments</code><code class="p">,</code> <code class="mi">0</code><code class="p">);</code>
<code class="lineno"> 8</code>   <code class="n">args</code><code class="p">[</code><code class="mi">1</code><code class="p">]</code> <code class="o">=</code> <code class="err">'</code><code class="n">swordfish</code><code class="err">'</code><code class="p">;</code>
<code class="lineno"> 9</code>   <code class="k">return</code> <code class="n">new</code> <code class="n">User</code><code class="p">.</code><code class="n">apply</code><code class="p">(</code><code class="n">this</code><code class="p">,</code> <code class="n">args</code><code class="p">);</code>
<code class="lineno">10</code> <code class="p">}</code> 
<code class="lineno">11</code> 
<code class="lineno">12</code> <code class="n">withDefaultPassword</code><code class="p">(</code><code class="err">'</code><code class="n">James</code><code class="err">'</code><code class="p">)</code>
<code class="lineno">13</code>   <code class="c1">//=&gt; TypeError: function apply() { [native code] } is not a constructor</code>
</pre></div>

</div>

<p>Another weakness of constructors is that if you call them without using <code>new</code>, you usually get nonsense:</p>

<div class="code-block">
<div class="highlight"><pre><code class="lineno">1</code> <code class="n">User</code><code class="p">(</code><code class="err">'</code><code class="n">James</code><code class="err">'</code><code class="p">,</code> <code class="err">'</code><code class="n">swordfish</code><code class="err">'</code><code class="p">)</code>
<code class="lineno">2</code>   <code class="c1">//=&gt; undefined</code>
</pre></div>

</div>

<p>In David Herman’s <a href="http://www.amazon.com/gp/product/B00AC1RP14/ref=as_li_ss_tl?ie=UTF8&amp;camp=1789&amp;creative=390957&amp;creativeASIN=B00AC1RP14&amp;linkCode=as2&amp;tag=raganwald001-20" title="Effective JavaScript: 68 Specific Ways to Harness the Power of JavaScript">Effective JavaScript</a>, he describes the “New-Agnostic Constructor Pattern.” He gives several variations, but the simplest is this:</p>

<div class="code-block">
<div class="highlight"><pre><code class="lineno">1</code> <code class="kd">function</code> <code class="nx">User</code> <code class="p">(</code><code class="nx">name</code><code class="p">,</code> <code class="nx">password</code><code class="p">)</code> <code class="p">{</code>
<code class="lineno">2</code>   <code class="k">if</code> <code class="p">(</code><code class="o">!</code><code class="p">(</code><code class="k">this</code> <code class="k">instanceof</code> <code class="nx">User</code><code class="p">))</code> <code class="p">{</code>
<code class="lineno">3</code>     <code class="k">return</code> <code class="k">new</code> <code class="nx">User</code><code class="p">(</code><code class="nx">name</code><code class="p">,</code> <code class="nx">password</code><code class="p">);</code>
<code class="lineno">4</code>   <code class="p">}</code>
<code class="lineno">5</code>   <code class="k">this</code><code class="p">.</code><code class="nx">name</code> <code class="o">=</code> <code class="nx">name</code> <code class="o">||</code> <code class="s1">'Untitled'</code><code class="p">;</code>
<code class="lineno">6</code>   <code class="k">this</code><code class="p">.</code><code class="nx">password</code> <code class="o">=</code> <code class="nx">password</code>
<code class="lineno">7</code> <code class="p">};</code>
</pre></div>

</div>

<p>Now you can call the constructor without the <code>new</code> keyword:</p>

<div class="code-block">
<div class="highlight"><pre><code class="lineno">1</code> <code class="n">User</code><code class="p">(</code><code class="err">'</code><code class="n">James</code><code class="err">'</code><code class="p">,</code> <code class="err">'</code><code class="n">swordfish</code><code class="err">'</code><code class="p">)</code>
<code class="lineno">2</code>   <code class="c1">//=&gt; { name: 'James', password: 'swordfish' }</code>
</pre></div>

</div>

<p>This in turn opens up the possibility of doing dynamic things with constructors that didn’t work when you were forced to use <code>new</code>:</p>

<div class="code-block">
<div class="highlight"><pre><code class="lineno">1</code> <code class="kd">function</code> <code class="nx">withDefaultPassword</code> <code class="p">()</code> <code class="p">{</code>
<code class="lineno">2</code>   <code class="kd">var</code> <code class="nx">args</code> <code class="o">=</code> <code class="nb">Array</code><code class="p">.</code><code class="nx">prototype</code><code class="p">.</code><code class="nx">slice</code><code class="p">.</code><code class="nx">call</code><code class="p">(</code><code class="nx">arguments</code><code class="p">,</code> <code class="mi">0</code><code class="p">);</code>
<code class="lineno">3</code>   <code class="nx">args</code><code class="cp">[</code><code class="mi">1</code><code class="cp">]</code> <code class="o">=</code> <code class="s1">'swordfish'</code><code class="p">;</code>
<code class="lineno">4</code>   <code class="k">return</code> <code class="nx">User</code><code class="p">.</code><code class="nx">apply</code><code class="p">(</code><code class="k">this</code><code class="p">,</code> <code class="nx">args</code><code class="p">);</code>
<code class="lineno">5</code> <code class="p">}</code> 
<code class="lineno">6</code> 
<code class="lineno">7</code> <code class="nx">withDefaultPassword</code><code class="p">(</code><code class="s1">'James'</code><code class="p">)</code>
<code class="lineno">8</code>   <code class="c1">//=&gt; { name: 'James', password: 'swordfish' }</code>
</pre></div>

</div>

<p>(The pattern above has a tradeoff: It works for all circumstances except when you want to set up an inheritance hierarchy.)</p>

<h3 id="leanpub-auto-another-new-agnostic-constructor-pattern">Another New-Agnostic Constructor Pattern</h3>

<p>Here’s another way to write a new-agnostic constructor:</p>

<div class="code-block">
<div class="highlight"><pre><code class="lineno">1</code> <code class="kd">function</code> <code class="nx">User</code> <code class="p">(</code><code class="nx">name</code><code class="p">,</code> <code class="nx">password</code><code class="p">)</code> <code class="p">{</code>
<code class="lineno">2</code>   <code class="kd">var</code> <code class="nx">self</code> <code class="o">=</code> <code class="k">this</code> <code class="k">instanceof</code> <code class="nx">User</code> <code class="o">?</code> <code class="k">this</code> <code class="o">:</code> <code class="k">new</code> <code class="nx">User</code><code class="p">();</code>
<code class="lineno">3</code>   <code class="k">if</code> <code class="p">(</code><code class="nx">name</code> <code class="o">!=</code> <code class="kc">null</code><code class="p">)</code> <code class="p">{</code>
<code class="lineno">4</code>     <code class="nx">self</code><code class="p">.</code><code class="nx">name</code> <code class="o">=</code> <code class="nx">name</code><code class="p">;</code>
<code class="lineno">5</code>     <code class="nx">self</code><code class="p">.</code><code class="nx">password</code> <code class="o">=</code> <code class="nx">password</code><code class="p">;</code>
<code class="lineno">6</code>   <code class="p">}</code>
<code class="lineno">7</code>   <code class="k">return</code> <code class="nx">self</code><code class="p">;</code>
<code class="lineno">8</code> <code class="p">};</code>
</pre></div>

</div>

<p>The principle is that the constructor initializes an object assigned to the variable <code>self</code> and returns it. When you call the constructor with <code>new</code>, then <code>self</code> will be assigned the current context. But if you call this constructor as a standard function, then it will call itself without parameters and assign the newly created User to <code>self</code>.</p>

<h3 id="functional-mixins">Mixins</h3>

<p>In <a href="#class-other-name">A Class By Any Other Name</a>, we saw that you can emulate “mixins” using our <code>extend</code> function. We’ll revisit this subject now and spend more time looking at mixing functionality into classes.</p>

<p>First, a quick recap: In JavaScript, a “class” is implemented as a constructor function and its prototype. Instances of the class are created by calling the constructor with <code>new</code>. They “inherit” shared behaviour from the constructor’s <code>prototype</code> property. One way to share behaviour scattered across multiple classes, or to untangle behaviour by factoring it out of an overweight prototype, is to extend a prototype with a mixin.</p>

<p>Here’s an evolved class of todo items we saw earlier:</p>

<div class="code-block">
<div class="highlight"><pre><code class="lineno"> 1</code> <code class="kd">function</code> <code class="nx">Todo</code> <code class="p">(</code><code class="nx">name</code><code class="p">)</code> <code class="p">{</code>
<code class="lineno"> 2</code>   <code class="kd">var</code> <code class="nx">self</code> <code class="o">=</code> <code class="k">this</code> <code class="k">instanceof</code> <code class="nx">Todo</code>
<code class="lineno"> 3</code>              <code class="o">?</code> <code class="k">this</code>
<code class="lineno"> 4</code>              <code class="o">:</code> <code class="k">new</code> <code class="nx">Todo</code><code class="p">();</code>
<code class="lineno"> 5</code>   <code class="nx">self</code><code class="p">.</code><code class="nx">name</code> <code class="o">=</code> <code class="nx">name</code> <code class="o">||</code> <code class="s1">'Untitled'</code><code class="p">;</code>
<code class="lineno"> 6</code>   <code class="nx">self</code><code class="p">.</code><code class="nx">done</code> <code class="o">=</code> <code class="kc">false</code><code class="p">;</code>
<code class="lineno"> 7</code> <code class="p">};</code>
<code class="lineno"> 8</code> 
<code class="lineno"> 9</code> <code class="nx">Todo</code><code class="p">.</code><code class="nx">prototype</code><code class="p">.</code><code class="k">do</code> <code class="o">=</code> <code class="nx">fluent</code><code class="p">(</code> <code class="kd">function</code> <code class="p">()</code> <code class="p">{</code>
<code class="lineno">10</code>   <code class="k">this</code><code class="p">.</code><code class="nx">done</code> <code class="o">=</code> <code class="kc">true</code><code class="p">;</code>
<code class="lineno">11</code> <code class="p">});</code>
<code class="lineno">12</code> 
<code class="lineno">13</code> <code class="nx">Todo</code><code class="p">.</code><code class="nx">prototype</code><code class="p">.</code><code class="nx">undo</code> <code class="o">=</code> <code class="nx">fluent</code><code class="p">(</code> <code class="kd">function</code> <code class="p">()</code> <code class="p">{</code>
<code class="lineno">14</code>   <code class="k">this</code><code class="p">.</code><code class="nx">done</code> <code class="o">=</code> <code class="kc">false</code><code class="p">;</code>
<code class="lineno">15</code> <code class="p">});</code>
<code class="lineno">16</code> 
<code class="lineno">17</code> <code class="nx">Todo</code><code class="p">.</code><code class="nx">prototype</code><code class="p">;</code>
<code class="lineno">18</code>   <code class="c1">//=&gt; { do: </code><code class="cp">[</code><code class="nx">Function</code><code class="cp">]</code><code class="c1">, undo: </code><code class="cp">[</code><code class="nx">Function</code><code class="cp">]</code><code class="c1"> }</code>
</pre></div>

</div>

<p>And a “mixin:”</p>

<div class="code-block">
<div class="highlight"><pre><code class="lineno">1</code> <code class="kd">var</code> <code class="nx">ColourCoded</code> <code class="o">=</code> <code class="p">{</code>
<code class="lineno">2</code>   <code class="nx">setColourRGB</code><code class="o">:</code> <code class="nx">fluent</code><code class="p">(</code> <code class="kd">function</code> <code class="p">(</code><code class="nx">r</code><code class="p">,</code> <code class="nx">g</code><code class="p">,</code> <code class="nx">b</code><code class="p">)</code> <code class="p">{</code>
<code class="lineno">3</code>     <code class="k">this</code><code class="p">.</code><code class="nx">colourCode</code> <code class="o">=</code> <code class="p">{</code> <code class="nx">r</code><code class="o">:</code> <code class="nx">r</code><code class="p">,</code> <code class="nx">g</code><code class="o">:</code> <code class="nx">g</code><code class="p">,</code> <code class="nx">b</code><code class="o">:</code> <code class="nx">b</code> <code class="p">};</code>
<code class="lineno">4</code>   <code class="p">}),</code>
<code class="lineno">5</code>   <code class="nx">getColourRGB</code><code class="o">:</code> <code class="kd">function</code> <code class="p">()</code> <code class="p">{</code>
<code class="lineno">6</code>     <code class="k">return</code> <code class="k">this</code><code class="p">.</code><code class="nx">colourCode</code><code class="p">;</code>
<code class="lineno">7</code>   <code class="p">}</code>
<code class="lineno">8</code> <code class="p">};</code>
</pre></div>

</div>

<p>Mixing colour coding into our Todo prototype is straightforward:</p>

<div class="code-block">
<div class="highlight"><pre><code class="lineno">1</code> <code class="n">extend</code><code class="p">(</code><code class="n">Todo</code><code class="p">.</code><code class="n">prototype</code><code class="p">,</code> <code class="n">ColourCoded</code><code class="p">);</code>
<code class="lineno">2</code> 
<code class="lineno">3</code> <code class="n">Todo</code><code class="p">.</code><code class="n">prototype</code><code class="p">;</code>
<code class="lineno">4</code>   <code class="c1">//=&gt; { do: [Function],</code>
<code class="lineno">5</code>   <code class="c1">//     undo: [Function],</code>
<code class="lineno">6</code>   <code class="c1">//     setColourRGB: [Function],</code>
<code class="lineno">7</code>   <code class="c1">//     getColourRGB: [Function] }</code>
</pre></div>

</div>

<h4 id="leanpub-auto-what-is-a-mixin">what is a “mixin?”</h4>

<p>Like “class,” the word “mixin” means different things to different people. A Ruby user will talk about modules, for example. And a JavaScript user could in truth say that everything is an object and we’re just extending one object (that happens to be a prototype) with the properties of another object (that just happens to contain some functions).</p>

<p>A simple definition that works for most purposes is to define a mixin as: <em>A collection of behaviour that can be added to a class’s existing prototype</em>. <code>ColourCoded</code> above is such a mixin. If we had to actually assign a new prototype to the <code>Todo</code> class, that wouldn’t be mixing functionality in, that would be replacing functionality.</p>

<h4 id="leanpub-auto-functional-mixins">functional mixins</h4>

<p>The mixin we have above works properly, but our little recipe had two distinct steps: Define the mixin and then extend the class prototype. Angus Croll pointed out that it’s far more elegant to define a mixin as a function rather than an object. He calls this a <a href="https://javascriptweblog.wordpress.com/2011/05/31/a-fresh-look-at-javascript-mixins/" title="A fresh look at JavaScript Mixins">functional mixin</a>. Here’s our <code>ColourCoded</code> recast in functional form:</p>

<div class="code-block">
<div class="highlight"><pre><code class="lineno"> 1</code> <code class="kd">function</code> <code class="nx">becomeColourCoded</code> <code class="p">(</code><code class="nx">target</code><code class="p">)</code> <code class="p">{</code>
<code class="lineno"> 2</code>   <code class="nx">target</code><code class="p">.</code><code class="nx">setColourRGB</code> <code class="o">=</code> <code class="nx">fluent</code><code class="p">(</code> <code class="kd">function</code> <code class="p">(</code><code class="nx">r</code><code class="p">,</code> <code class="nx">g</code><code class="p">,</code> <code class="nx">b</code><code class="p">)</code> <code class="p">{</code>
<code class="lineno"> 3</code>     <code class="k">this</code><code class="p">.</code><code class="nx">colourCode</code> <code class="o">=</code> <code class="p">{</code> <code class="nx">r</code><code class="o">:</code> <code class="nx">r</code><code class="p">,</code> <code class="nx">g</code><code class="o">:</code> <code class="nx">g</code><code class="p">,</code> <code class="nx">b</code><code class="o">:</code> <code class="nx">b</code> <code class="p">};</code>
<code class="lineno"> 4</code>   <code class="p">});</code>
<code class="lineno"> 5</code>   
<code class="lineno"> 6</code>   <code class="nx">target</code><code class="p">.</code><code class="nx">getColourRGB</code> <code class="o">=</code> <code class="kd">function</code> <code class="p">()</code> <code class="p">{</code>
<code class="lineno"> 7</code>     <code class="k">return</code> <code class="k">this</code><code class="p">.</code><code class="nx">colourCode</code><code class="p">;</code>
<code class="lineno"> 8</code>   <code class="p">};</code>
<code class="lineno"> 9</code>   
<code class="lineno">10</code>   <code class="k">return</code> <code class="nx">target</code><code class="p">;</code>
<code class="lineno">11</code> <code class="p">};</code>
<code class="lineno">12</code> 
<code class="lineno">13</code> <code class="nx">becomeColourCoded</code><code class="p">(</code><code class="nx">Todo</code><code class="p">.</code><code class="nx">prototype</code><code class="p">);</code>
<code class="lineno">14</code> 
<code class="lineno">15</code> <code class="nx">Todo</code><code class="p">.</code><code class="nx">prototype</code><code class="p">;</code>
<code class="lineno">16</code>   <code class="c1">//=&gt; { do: </code><code class="cp">[</code><code class="nx">Function</code><code class="cp">]</code><code class="c1">,</code>
<code class="lineno">17</code>   <code class="c1">//     undo: </code><code class="cp">[</code><code class="nx">Function</code><code class="cp">]</code><code class="c1">,</code>
<code class="lineno">18</code>   <code class="c1">//     setColourRGB: </code><code class="cp">[</code><code class="nx">Function</code><code class="cp">]</code><code class="c1">,</code>
<code class="lineno">19</code>   <code class="c1">//     getColourRGB: </code><code class="cp">[</code><code class="nx">Function</code><code class="cp">]</code><code class="c1"> }</code>
</pre></div>

</div>

<p>Notice that we mix the functionality into the prototype. This keeps our mixing flexible: You could mix functionality directly into an object if you so choose. Twitter’s <a href="https://twitter.github.com/flight">Flight</a> framework uses a variation on this technique that targets the mixin function’s context:</p>

<div class="code-block">
<div class="highlight"><pre><code class="lineno"> 1</code> <code class="kd">function</code> <code class="nx">asColourCoded</code> <code class="p">()</code> <code class="p">{</code>
<code class="lineno"> 2</code>   <code class="k">this</code><code class="p">.</code><code class="nx">setColourRGB</code> <code class="o">=</code> <code class="nx">fluent</code><code class="p">(</code> <code class="kd">function</code> <code class="p">(</code><code class="nx">r</code><code class="p">,</code> <code class="nx">g</code><code class="p">,</code> <code class="nx">b</code><code class="p">)</code> <code class="p">{</code>
<code class="lineno"> 3</code>     <code class="k">this</code><code class="p">.</code><code class="nx">colourCode</code> <code class="o">=</code> <code class="p">{</code> <code class="nx">r</code><code class="o">:</code> <code class="nx">r</code><code class="p">,</code> <code class="nx">g</code><code class="o">:</code> <code class="nx">g</code><code class="p">,</code> <code class="nx">b</code><code class="o">:</code> <code class="nx">b</code> <code class="p">};</code>
<code class="lineno"> 4</code>   <code class="p">});</code>
<code class="lineno"> 5</code>   
<code class="lineno"> 6</code>   <code class="k">this</code><code class="p">.</code><code class="nx">getColourRGB</code> <code class="o">=</code> <code class="kd">function</code> <code class="p">()</code> <code class="p">{</code>
<code class="lineno"> 7</code>     <code class="k">return</code> <code class="k">this</code><code class="p">.</code><code class="nx">colourCode</code><code class="p">;</code>
<code class="lineno"> 8</code>   <code class="p">};</code>
<code class="lineno"> 9</code>   
<code class="lineno">10</code>   <code class="k">return</code> <code class="k">this</code><code class="p">;</code>
<code class="lineno">11</code> <code class="p">};</code>
<code class="lineno">12</code> 
<code class="lineno">13</code> <code class="nx">asColourCoded</code><code class="p">.</code><code class="nx">call</code><code class="p">(</code><code class="nx">Todo</code><code class="p">.</code><code class="nx">prototype</code><code class="p">);</code>
</pre></div>

</div>

<p>This approach has some subtle benefits: You can use mixins as methods, for example. It’s possible to write a context-agnostic functional mixin:</p>

<div class="code-block">
<div class="highlight"><pre><code class="lineno"> 1</code> <code class="kd">function</code> <code class="nx">colourCoded</code> <code class="p">()</code> <code class="p">{</code>
<code class="lineno"> 2</code>   <code class="k">if</code> <code class="p">(</code><code class="nx">arguments</code><code class="cp">[</code><code class="mi">0</code><code class="cp">]</code> <code class="o">!==</code> <code class="k">void</code> <code class="mi">0</code><code class="p">)</code> <code class="p">{</code>
<code class="lineno"> 3</code>     <code class="k">return</code> <code class="nx">colourCoded</code><code class="p">.</code><code class="nx">call</code><code class="p">(</code><code class="nx">arguments</code><code class="cp">[</code><code class="mi">0</code><code class="cp">]</code><code class="p">);</code>
<code class="lineno"> 4</code>   <code class="p">}</code>
<code class="lineno"> 5</code>   <code class="k">this</code><code class="p">.</code><code class="nx">setColourRGB</code> <code class="o">=</code> <code class="nx">fluent</code><code class="p">(</code> <code class="kd">function</code> <code class="p">(</code><code class="nx">r</code><code class="p">,</code> <code class="nx">g</code><code class="p">,</code> <code class="nx">b</code><code class="p">)</code> <code class="p">{</code>
<code class="lineno"> 6</code>     <code class="k">this</code><code class="p">.</code><code class="nx">colourCode</code> <code class="o">=</code> <code class="p">{</code> <code class="nx">r</code><code class="o">:</code> <code class="nx">r</code><code class="p">,</code> <code class="nx">g</code><code class="o">:</code> <code class="nx">g</code><code class="p">,</code> <code class="nx">b</code><code class="o">:</code> <code class="nx">b</code> <code class="p">};</code>
<code class="lineno"> 7</code>   <code class="p">});</code>
<code class="lineno"> 8</code>   
<code class="lineno"> 9</code>   <code class="k">this</code><code class="p">.</code><code class="nx">getColourRGB</code> <code class="o">=</code> <code class="kd">function</code> <code class="p">()</code> <code class="p">{</code>
<code class="lineno">10</code>     <code class="k">return</code> <code class="k">this</code><code class="p">.</code><code class="nx">colourCode</code><code class="p">;</code>
<code class="lineno">11</code>   <code class="p">};</code>
<code class="lineno">12</code>   
<code class="lineno">13</code>   <code class="k">return</code> <code class="k">this</code><code class="p">;</code>
<code class="lineno">14</code> <code class="p">};</code>
</pre></div>

</div>

<p>Bueno!</p>

<h3 id="class-decorators">Class Decorators</h3>

<p><a href="#functional-mixins">Functional Mixins</a> look a lot like the function and method decorators we’ve seen. The big difference is that the mixin alters its subject, whereas the function decorators return a new function that wraps the old one. That can be handy if we wish, for example, to have some Todos that are not colour coded and we don’t want to have a wild hierarchy of inheritance or if we wish to dynamically mix functionality into a class.</p>

<blockquote>
  <p>There is a strong caveat: At this time, JavaScript is inflexible about dynamically paramaterizing calls to constructors. Therefore,
the function decorator pattern being discussed here only works with constructors that are <a href="#new-agnostic">new agnostic</a><sup id="fnref-create"><a href="#fn-create" rel="footnote">35</a></sup> and that can
create an “empty object.”</p>
</blockquote>

<p>Once again, our Todo class:</p>

<div class="code-block">
<div class="highlight"><pre><code class="lineno"> 1</code> <code class="kd">function</code> <code class="nx">Todo</code> <code class="p">(</code><code class="nx">name</code><code class="p">)</code> <code class="p">{</code>
<code class="lineno"> 2</code>   <code class="kd">var</code> <code class="nx">self</code> <code class="o">=</code> <code class="k">this</code> <code class="k">instanceof</code> <code class="nx">Todo</code>
<code class="lineno"> 3</code>              <code class="o">?</code> <code class="k">this</code>
<code class="lineno"> 4</code>              <code class="o">:</code> <code class="k">new</code> <code class="nx">Todo</code><code class="p">();</code>
<code class="lineno"> 5</code>   <code class="nx">self</code><code class="p">.</code><code class="nx">name</code> <code class="o">=</code> <code class="nx">name</code> <code class="o">||</code> <code class="s1">'Untitled'</code><code class="p">;</code>
<code class="lineno"> 6</code>   <code class="nx">self</code><code class="p">.</code><code class="nx">done</code> <code class="o">=</code> <code class="kc">false</code><code class="p">;</code>
<code class="lineno"> 7</code> <code class="p">};</code>
<code class="lineno"> 8</code> 
<code class="lineno"> 9</code> <code class="nx">Todo</code><code class="p">.</code><code class="nx">prototype</code><code class="p">.</code><code class="k">do</code> <code class="o">=</code> <code class="nx">fluent</code><code class="p">(</code> <code class="kd">function</code> <code class="p">()</code> <code class="p">{</code>
<code class="lineno">10</code>   <code class="k">this</code><code class="p">.</code><code class="nx">done</code> <code class="o">=</code> <code class="kc">true</code><code class="p">;</code>
<code class="lineno">11</code> <code class="p">});</code>
<code class="lineno">12</code> 
<code class="lineno">13</code> <code class="nx">Todo</code><code class="p">.</code><code class="nx">prototype</code><code class="p">.</code><code class="nx">undo</code> <code class="o">=</code> <code class="nx">fluent</code><code class="p">(</code> <code class="kd">function</code> <code class="p">()</code> <code class="p">{</code>
<code class="lineno">14</code>   <code class="k">this</code><code class="p">.</code><code class="nx">done</code> <code class="o">=</code> <code class="kc">false</code><code class="p">;</code>
<code class="lineno">15</code> <code class="p">});</code>
<code class="lineno">16</code> 
<code class="lineno">17</code> <code class="nx">Todo</code><code class="p">.</code><code class="nx">prototype</code><code class="p">;</code>
<code class="lineno">18</code>   <code class="c1">//=&gt; { do: </code><code class="cp">[</code><code class="nx">Function</code><code class="cp">]</code><code class="c1">, undo: </code><code class="cp">[</code><code class="nx">Function</code><code class="cp">]</code><code class="c1"> }</code>
</pre></div>

</div>

<p>Here’s our <code>ColourCoded</code> as a class decorator: It returns a new class rather than modifying <code>ToDo</code>:</p>

<div class="code-block">
<div class="highlight"><pre><code class="lineno"> 1</code> <code class="kd">function</code> <code class="nx">AndColourCoded</code> <code class="p">(</code><code class="nx">clazz</code><code class="p">)</code> <code class="p">{</code>
<code class="lineno"> 2</code>   <code class="kd">function</code> <code class="nx">Decorated</code>  <code class="p">()</code> <code class="p">{</code>
<code class="lineno"> 3</code>     <code class="kd">var</code> <code class="nx">self</code> <code class="o">=</code> <code class="k">this</code> <code class="k">instanceof</code> <code class="nx">Decorated</code>
<code class="lineno"> 4</code>                <code class="o">?</code> <code class="k">this</code>
<code class="lineno"> 5</code>                <code class="o">:</code> <code class="k">new</code> <code class="nx">Decorated</code><code class="p">();</code>
<code class="lineno"> 6</code>     
<code class="lineno"> 7</code>     <code class="k">return</code> <code class="nx">clazz</code><code class="p">.</code><code class="nx">apply</code><code class="p">(</code><code class="nx">self</code><code class="p">,</code> <code class="nx">arguments</code><code class="p">);</code>
<code class="lineno"> 8</code>   <code class="p">};</code>
<code class="lineno"> 9</code>   <code class="nx">Decorated</code><code class="p">.</code><code class="nx">prototype</code> <code class="o">=</code> <code class="k">new</code> <code class="nx">clazz</code><code class="p">();</code>
<code class="lineno">10</code>   
<code class="lineno">11</code>   <code class="nx">Decorated</code><code class="p">.</code><code class="nx">prototype</code><code class="p">.</code><code class="nx">setColourRGB</code> <code class="o">=</code> <code class="nx">fluent</code><code class="p">(</code> <code class="kd">function</code> <code class="p">(</code><code class="nx">r</code><code class="p">,</code> <code class="nx">g</code><code class="p">,</code> <code class="nx">b</code><code class="p">)</code> <code class="p">{</code>
<code class="lineno">12</code>     <code class="k">this</code><code class="p">.</code><code class="nx">colourCode</code> <code class="o">=</code> <code class="p">{</code> <code class="nx">r</code><code class="o">:</code> <code class="nx">r</code><code class="p">,</code> <code class="nx">g</code><code class="o">:</code> <code class="nx">g</code><code class="p">,</code> <code class="nx">b</code><code class="o">:</code> <code class="nx">b</code> <code class="p">};</code>
<code class="lineno">13</code>   <code class="p">});</code>
<code class="lineno">14</code>   
<code class="lineno">15</code>   <code class="nx">Decorated</code><code class="p">.</code><code class="nx">prototype</code><code class="p">.</code><code class="nx">getColourRGB</code> <code class="o">=</code> <code class="kd">function</code> <code class="p">()</code> <code class="p">{</code>
<code class="lineno">16</code>     <code class="k">return</code> <code class="k">this</code><code class="p">.</code><code class="nx">colourCode</code><code class="p">;</code>
<code class="lineno">17</code>   <code class="p">};</code>
<code class="lineno">18</code>   
<code class="lineno">19</code>   <code class="k">return</code> <code class="nx">Decorated</code><code class="p">;</code>
<code class="lineno">20</code> <code class="p">};</code>
<code class="lineno">21</code> 
<code class="lineno">22</code> <code class="kd">var</code> <code class="nx">ColourTodo</code> <code class="o">=</code> <code class="nx">AndColourCoded</code><code class="p">(</code><code class="nx">Todo</code><code class="p">);</code>
<code class="lineno">23</code> 
<code class="lineno">24</code> <code class="nx">Todo</code><code class="p">.</code><code class="nx">prototype</code><code class="p">;</code>
<code class="lineno">25</code>   <code class="c1">//=&gt; { do: </code><code class="cp">[</code><code class="nx">Function</code><code class="cp">]</code><code class="c1">, undo: </code><code class="cp">[</code><code class="nx">Function</code><code class="cp">]</code><code class="c1"> }</code>
<code class="lineno">26</code> 
<code class="lineno">27</code> <code class="kd">var</code> <code class="nx">colourTodo</code> <code class="o">=</code> <code class="k">new</code> <code class="nx">ColourTodo</code><code class="p">(</code><code class="s1">'Write more JavaScript'</code><code class="p">);</code>
<code class="lineno">28</code> <code class="nx">colourTodo</code><code class="p">.</code><code class="nx">setColourRGB</code><code class="p">(</code><code class="mi">255</code><code class="p">,</code> <code class="mi">255</code><code class="p">,</code> <code class="mi">0</code><code class="p">);</code>
<code class="lineno">29</code>   <code class="c1">//=&gt; { name: 'Write more JavaScript',</code>
<code class="lineno">30</code>   <code class="c1">//     done: false,</code>
<code class="lineno">31</code>   <code class="c1">//     colourCode: { r: 255, g: 255, b: 0 } }</code>
<code class="lineno">32</code>   
<code class="lineno">33</code> <code class="nx">colourTodo</code> <code class="k">instanceof</code> <code class="nx">Todo</code>
<code class="lineno">34</code>   <code class="c1">//=&gt; true</code>
<code class="lineno">35</code>   
<code class="lineno">36</code> <code class="nx">colourTodo</code> <code class="k">instanceof</code> <code class="nx">ColourTodo</code>
<code class="lineno">37</code>   <code class="c1">//=&gt; true</code>
</pre></div>

</div>

<p>Although the implementation is more subtle, class decorators can be an improvement on functional mixins when you wish to avoid destructively modifying an existing prototype.</p>

<h3 id="tortoises">Interlude: Tortoises, Hares, and Teleporting Turtles</h3>

<p>A good long while ago (The First Age of Internet Startups), someone asked me one of those pet algorithm questions. It was, “Write an algorithm to detect a loop in a linked list, in constant space.”</p>

<p>I’m not particularly surprised that I couldn’t think up an answer in a few minutes at the time. And to the interviewer’s credit, he didn’t terminate the interview on the spot, he asked me to describe the kinds of things going through my head.</p>

<p>I think I told him that I was trying to figure out if I could adapt a hashing algorithm such as XORing everything together. This is the “trick answer” to a question about finding a missing integer from a list, so I was trying the old, “Transform this into <a href="http://www-users.cs.york.ac.uk/susan/joke/3.htm#boil">a problem you’ve already solved</a>” meta-algorithm. We moved on from there, and he didn’t reveal the “solution.”</p>

<p>I went home and pondered the problem. I wanted to solve it. Eventually, I came up with something and tried it (In Java!) on my home PC. I sent him an email sharing my result, to demonstrate my ability to follow through. I then forgot about it for a while. Some time later, I was told that the correct solution was:</p>

<div class="code-block">
<div class="highlight"><pre><code class="lineno"> 1</code> <code class="kd">var</code> <code class="nx">LinkedList</code><code class="p">,</code> <code class="nx">list</code><code class="p">,</code> <code class="nx">tortoiseAndHareLoopDetector</code><code class="p">;</code>
<code class="lineno"> 2</code> 
<code class="lineno"> 3</code> <code class="nx">LinkedList</code> <code class="o">=</code> <code class="p">(</code><code class="kd">function</code><code class="p">()</code> <code class="p">{</code>
<code class="lineno"> 4</code> 
<code class="lineno"> 5</code>   <code class="kd">function</code> <code class="nx">LinkedList</code><code class="p">(</code><code class="nx">content</code><code class="p">,</code> <code class="nx">next</code><code class="p">)</code> <code class="p">{</code>
<code class="lineno"> 6</code>     <code class="k">this</code><code class="p">.</code><code class="nx">content</code> <code class="o">=</code> <code class="nx">content</code><code class="p">;</code>
<code class="lineno"> 7</code>     <code class="k">this</code><code class="p">.</code><code class="nx">next</code> <code class="o">=</code> <code class="nx">next</code> <code class="o">!=</code> <code class="kc">null</code> <code class="o">?</code> <code class="nx">next</code> <code class="o">:</code> <code class="k">void</code> <code class="mi">0</code><code class="p">;</code>
<code class="lineno"> 8</code>   <code class="p">}</code>
<code class="lineno"> 9</code> 
<code class="lineno">10</code>   <code class="nx">LinkedList</code><code class="p">.</code><code class="nx">prototype</code><code class="p">.</code><code class="nx">appendTo</code> <code class="o">=</code> <code class="kd">function</code><code class="p">(</code><code class="nx">content</code><code class="p">)</code> <code class="p">{</code>
<code class="lineno">11</code>     <code class="k">return</code> <code class="k">new</code> <code class="nx">LinkedList</code><code class="p">(</code><code class="nx">content</code><code class="p">,</code> <code class="k">this</code><code class="p">);</code>
<code class="lineno">12</code>   <code class="p">};</code>
<code class="lineno">13</code> 
<code class="lineno">14</code>   <code class="nx">LinkedList</code><code class="p">.</code><code class="nx">prototype</code><code class="p">.</code><code class="nx">tailNode</code> <code class="o">=</code> <code class="kd">function</code><code class="p">()</code> <code class="p">{</code>
<code class="lineno">15</code>     <code class="kd">var</code> <code class="nx">nextThis</code><code class="p">;</code>
<code class="lineno">16</code>     <code class="k">return</code> <code class="p">((</code><code class="nx">nextThis</code> <code class="o">=</code> <code class="k">this</code><code class="p">.</code><code class="nx">next</code><code class="p">)</code> <code class="o">!=</code> <code class="kc">null</code> <code class="o">?</code> <code class="nx">nextThis</code><code class="p">.</code><code class="nx">tailNode</code><code class="p">()</code> <code class="o">:</code> <code class="k">void</code> <code class="mi">0</code><code class="p">)</code> <code class="o">||</code> <code class="nx">thi</code><code class="o">\</code>
<code class="lineno">17</code> <code class="nx">s</code><code class="p">;</code>
<code class="lineno">18</code>   <code class="p">};</code>
<code class="lineno">19</code> 
<code class="lineno">20</code>   <code class="k">return</code> <code class="nx">LinkedList</code><code class="p">;</code>
<code class="lineno">21</code> 
<code class="lineno">22</code> <code class="p">})();</code>
<code class="lineno">23</code> 
<code class="lineno">24</code> <code class="nx">tortoiseAndHareLoopDetector</code> <code class="o">=</code> <code class="kd">function</code><code class="p">(</code><code class="nx">list</code><code class="p">)</code> <code class="p">{</code>
<code class="lineno">25</code>   <code class="kd">var</code> <code class="nx">hare</code><code class="p">,</code> <code class="nx">tortoise</code><code class="p">,</code> <code class="nx">nextHare</code><code class="p">;</code>
<code class="lineno">26</code>   <code class="nx">tortoise</code> <code class="o">=</code> <code class="nx">list</code><code class="p">;</code>
<code class="lineno">27</code>   <code class="nx">hare</code> <code class="o">=</code> <code class="nx">list</code><code class="p">.</code><code class="nx">next</code><code class="p">;</code>
<code class="lineno">28</code>   <code class="k">while</code> <code class="p">((</code><code class="nx">tortoise</code> <code class="o">!=</code> <code class="kc">null</code><code class="p">)</code> <code class="o">&amp;&amp;</code> <code class="p">(</code><code class="nx">hare</code> <code class="o">!=</code> <code class="kc">null</code><code class="p">))</code> <code class="p">{</code>
<code class="lineno">29</code>     <code class="k">if</code> <code class="p">(</code><code class="nx">tortoise</code> <code class="o">===</code> <code class="nx">hare</code><code class="p">)</code> <code class="p">{</code>
<code class="lineno">30</code>       <code class="k">return</code> <code class="kc">true</code><code class="p">;</code>
<code class="lineno">31</code>     <code class="p">}</code>
<code class="lineno">32</code>     <code class="nx">tortoise</code> <code class="o">=</code> <code class="nx">tortoise</code><code class="p">.</code><code class="nx">next</code><code class="p">;</code>
<code class="lineno">33</code>     <code class="nx">hare</code> <code class="o">=</code> <code class="p">(</code><code class="nx">nextHare</code> <code class="o">=</code> <code class="nx">hare</code><code class="p">.</code><code class="nx">next</code><code class="p">)</code> <code class="o">!=</code> <code class="kc">null</code> <code class="o">?</code> <code class="nx">nextHare</code><code class="p">.</code><code class="nx">next</code> <code class="o">:</code> <code class="k">void</code> <code class="mi">0</code><code class="p">;</code>
<code class="lineno">34</code>   <code class="p">}</code>
<code class="lineno">35</code>   <code class="k">return</code> <code class="kc">false</code><code class="p">;</code>
<code class="lineno">36</code> <code class="p">};</code>
<code class="lineno">37</code> 
<code class="lineno">38</code> <code class="nx">list</code> <code class="o">=</code> <code class="k">new</code> <code class="nx">LinkedList</code><code class="p">(</code><code class="mi">5</code><code class="p">).</code><code class="nx">appendTo</code><code class="p">(</code><code class="mi">4</code><code class="p">).</code><code class="nx">appendTo</code><code class="p">(</code><code class="mi">3</code><code class="p">).</code><code class="nx">appendTo</code><code class="p">(</code><code class="mi">2</code><code class="p">).</code><code class="nx">appendTo</code><code class="p">(</code><code class="mi">1</code><code class="p">);</code>
<code class="lineno">39</code> 
<code class="lineno">40</code> <code class="nx">tortoiseAndHareLoopDetector</code><code class="p">(</code><code class="nx">list</code><code class="p">);</code>
<code class="lineno">41</code>   <code class="c1">//=&gt; false</code>
<code class="lineno">42</code> 
<code class="lineno">43</code> <code class="nx">list</code><code class="p">.</code><code class="nx">tailNode</code><code class="p">().</code><code class="nx">next</code> <code class="o">=</code> <code class="nx">list</code><code class="p">.</code><code class="nx">next</code><code class="p">;</code>
<code class="lineno">44</code> 
<code class="lineno">45</code> <code class="nx">tortoiseAndHareLoopDetector</code><code class="p">(</code><code class="nx">list</code><code class="p">);</code>
<code class="lineno">46</code>   <code class="c1">//=&gt; true</code>
</pre></div>

</div>

<p>This algorithm is called “The Tortoise and the Hare,” and was discovered by Robert Floyd in the 1960s. You have two node references, and one traverses the list at twice the speed of the other. No matter how large it is, you will eventually have the fast reference equal to the slow reference, and thus you’ll detect the loop.</p>

<p>At the time, I couldn’t think of any way to use hashing to solve the problem, so I gave up and tried to fit this into a powers-of-two algorithm. My first pass at it was clumsy, but it was roughly equivalent to this:</p>

<div class="code-block">
<div class="highlight"><pre><code class="lineno"> 1</code> <code class="kd">var</code> <code class="nx">list</code><code class="p">,</code> <code class="nx">teleportingTurtleLoopDetector</code><code class="p">;</code>
<code class="lineno"> 2</code> 
<code class="lineno"> 3</code> <code class="nx">teleportingTurtleLoopDetector</code> <code class="o">=</code> <code class="kd">function</code><code class="p">(</code><code class="nx">list</code><code class="p">)</code> <code class="p">{</code>
<code class="lineno"> 4</code>   <code class="kd">var</code> <code class="nx">i</code><code class="p">,</code> <code class="nx">rabbit</code><code class="p">,</code> <code class="nx">speed</code><code class="p">,</code> <code class="nx">turtle</code><code class="p">;</code>
<code class="lineno"> 5</code>   <code class="nx">speed</code> <code class="o">=</code> <code class="mi">1</code><code class="p">;</code>
<code class="lineno"> 6</code>   <code class="nx">turtle</code> <code class="o">=</code> <code class="nx">rabbit</code> <code class="o">=</code> <code class="nx">list</code><code class="p">;</code>
<code class="lineno"> 7</code>   <code class="k">while</code> <code class="p">(</code><code class="kc">true</code><code class="p">)</code> <code class="p">{</code>
<code class="lineno"> 8</code>     <code class="k">for</code> <code class="p">(</code><code class="nx">i</code> <code class="o">=</code> <code class="mi">0</code><code class="p">;</code> <code class="nx">i</code> <code class="o">&lt;=</code> <code class="nx">speed</code><code class="p">;</code> <code class="nx">i</code> <code class="o">+=</code> <code class="mi">1</code><code class="p">)</code> <code class="p">{</code>
<code class="lineno"> 9</code>       <code class="nx">rabbit</code> <code class="o">=</code> <code class="nx">rabbit</code><code class="p">.</code><code class="nx">next</code><code class="p">;</code>
<code class="lineno">10</code>       <code class="k">if</code> <code class="p">(</code><code class="nx">rabbit</code> <code class="o">==</code> <code class="kc">null</code><code class="p">)</code> <code class="p">{</code>
<code class="lineno">11</code>         <code class="k">return</code> <code class="kc">false</code><code class="p">;</code>
<code class="lineno">12</code>       <code class="p">}</code>
<code class="lineno">13</code>       <code class="k">if</code> <code class="p">(</code><code class="nx">rabbit</code> <code class="o">===</code> <code class="nx">turtle</code><code class="p">)</code> <code class="p">{</code>
<code class="lineno">14</code>         <code class="k">return</code> <code class="kc">true</code><code class="p">;</code>
<code class="lineno">15</code>       <code class="p">}</code>
<code class="lineno">16</code>     <code class="p">}</code>
<code class="lineno">17</code>     <code class="nx">turtle</code> <code class="o">=</code> <code class="nx">rabbit</code><code class="p">;</code>
<code class="lineno">18</code>     <code class="nx">speed</code> <code class="o">*=</code> <code class="mi">2</code><code class="p">;</code>
<code class="lineno">19</code>   <code class="p">}</code>
<code class="lineno">20</code>   <code class="k">return</code> <code class="kc">false</code><code class="p">;</code>
<code class="lineno">21</code> <code class="p">};</code>
<code class="lineno">22</code> 
<code class="lineno">23</code> <code class="nx">list</code> <code class="o">=</code> <code class="k">new</code> <code class="nx">LinkedList</code><code class="p">(</code><code class="mi">5</code><code class="p">).</code><code class="nx">appendTo</code><code class="p">(</code><code class="mi">4</code><code class="p">).</code><code class="nx">appendTo</code><code class="p">(</code><code class="mi">3</code><code class="p">).</code><code class="nx">appendTo</code><code class="p">(</code><code class="mi">2</code><code class="p">).</code><code class="nx">appendTo</code><code class="p">(</code><code class="mi">1</code><code class="p">);</code>
<code class="lineno">24</code> 
<code class="lineno">25</code> <code class="nx">teleportingTurtleLoopDetector</code><code class="p">(</code><code class="nx">list</code><code class="p">);</code>
<code class="lineno">26</code>   <code class="c1">//=&gt; false</code>
<code class="lineno">27</code> 
<code class="lineno">28</code> <code class="nx">list</code><code class="p">.</code><code class="nx">tailNode</code><code class="p">().</code><code class="nx">next</code> <code class="o">=</code> <code class="nx">list</code><code class="p">.</code><code class="nx">next</code><code class="p">;</code>
<code class="lineno">29</code> 
<code class="lineno">30</code> <code class="nx">teleportingTurtleLoopDetector</code><code class="p">(</code><code class="nx">list</code><code class="p">);</code>
<code class="lineno">31</code>   <code class="c1">//=&gt; true</code>
</pre></div>

</div>

<p>Years later, I came across a discussion of this algorithm, <a href="http://www.penzba.co.uk/Writings/TheTeleportingTurtle.html">The Tale of the Teleporting Turtle</a>. It seems to be faster under certain circumstances, depending on the size of the loop and the relative costs of certain operations.</p>

<p>What’s interesting about these two algorithms is that they both <em>tangle</em> two separate concerns: How to traverse a data structure, and what to do with the elements that you encounter. In <a href="#functional-iterators">Functional Iterators</a>, we’ll investigate one pattern for separating these concerns.</p>

<h3 id="functional-iterators">Functional Iterators</h3>

<p>Let’s consider a remarkably simple problem: Finding the sum of the elements of an array. In iterative style, it looks like this:</p>

<div class="code-block">
<div class="highlight"><pre><code class="lineno">1</code> <code class="kd">function</code> <code class="nx">sum</code> <code class="p">(</code><code class="nx">array</code><code class="p">)</code> <code class="p">{</code>
<code class="lineno">2</code>   <code class="kd">var</code> <code class="nx">number</code><code class="p">,</code> <code class="nx">total</code><code class="p">,</code> <code class="nx">len</code><code class="p">;</code>
<code class="lineno">3</code>   <code class="nx">total</code> <code class="o">=</code> <code class="mi">0</code><code class="p">;</code>
<code class="lineno">4</code>   <code class="k">for</code> <code class="p">(</code><code class="nx">i</code> <code class="o">=</code> <code class="mi">0</code><code class="p">,</code> <code class="nx">len</code> <code class="o">=</code> <code class="nx">array</code><code class="p">.</code><code class="nx">length</code><code class="p">;</code> <code class="nx">i</code> <code class="o">&lt;</code> <code class="nx">len</code><code class="p">;</code> <code class="nx">i</code><code class="o">++</code><code class="p">)</code> <code class="p">{</code>
<code class="lineno">5</code>     <code class="nx">number</code> <code class="o">=</code> <code class="nx">array</code><code class="p">[</code><code class="nx">i</code><code class="p">];</code>
<code class="lineno">6</code>     <code class="nx">total</code> <code class="o">+=</code> <code class="nx">number</code><code class="p">;</code>
<code class="lineno">7</code>   <code class="p">}</code>
<code class="lineno">8</code>   <code class="k">return</code> <code class="nx">total</code><code class="p">;</code>
<code class="lineno">9</code> <code class="p">};</code>
</pre></div>

</div>

<p>What’s the sum of a linked list of numbers? How about the sum of a tree of numbers (represented as an array of array of numbers)? Must we re-write the <code>sum</code> function for each data structure?</p>

<p>There are two roads ahead. One involves a generalized <code>reduce</code> or <code>fold</code> method for each data structure. The other involves writing an <a href="https://developer.mozilla.org/en-US/docs/JavaScript/New_in_JavaScript/1.7#Iterators">Iterator</a> for each data structure and writing our <code>sum</code> to take an iterator as its argument. Let’s use iterators, especially since we need two different iterators for the same data structure, so a single object method is inconvenient.</p>

<p>Since we don’t have iterators baked into the underlying JavaScript engine yet, we’ll write our iterators as functions:</p>

<div class="code-block">
<div class="highlight"><pre><code class="lineno"> 1</code> <code class="kd">var</code> <code class="nx">LinkedList</code><code class="p">,</code> <code class="nx">list</code><code class="p">;</code>
<code class="lineno"> 2</code> 
<code class="lineno"> 3</code> <code class="nx">LinkedList</code> <code class="o">=</code> <code class="p">(</code><code class="kd">function</code><code class="p">()</code> <code class="p">{</code>
<code class="lineno"> 4</code> 
<code class="lineno"> 5</code>   <code class="kd">function</code> <code class="nx">LinkedList</code><code class="p">(</code><code class="nx">content</code><code class="p">,</code> <code class="nx">next</code><code class="p">)</code> <code class="p">{</code>
<code class="lineno"> 6</code>     <code class="k">this</code><code class="p">.</code><code class="nx">content</code> <code class="o">=</code> <code class="nx">content</code><code class="p">;</code>
<code class="lineno"> 7</code>     <code class="k">this</code><code class="p">.</code><code class="nx">next</code> <code class="o">=</code> <code class="nx">next</code> <code class="o">!=</code> <code class="kc">null</code> <code class="o">?</code> <code class="nx">next</code> <code class="o">:</code> <code class="k">void</code> <code class="mi">0</code><code class="p">;</code>
<code class="lineno"> 8</code>   <code class="p">}</code>
<code class="lineno"> 9</code> 
<code class="lineno">10</code>   <code class="nx">LinkedList</code><code class="p">.</code><code class="nx">prototype</code><code class="p">.</code><code class="nx">appendTo</code> <code class="o">=</code> <code class="kd">function</code><code class="p">(</code><code class="nx">content</code><code class="p">)</code> <code class="p">{</code>
<code class="lineno">11</code>     <code class="k">return</code> <code class="k">new</code> <code class="nx">LinkedList</code><code class="p">(</code><code class="nx">content</code><code class="p">,</code> <code class="k">this</code><code class="p">);</code>
<code class="lineno">12</code>   <code class="p">};</code>
<code class="lineno">13</code> 
<code class="lineno">14</code>   <code class="nx">LinkedList</code><code class="p">.</code><code class="nx">prototype</code><code class="p">.</code><code class="nx">tailNode</code> <code class="o">=</code> <code class="kd">function</code><code class="p">()</code> <code class="p">{</code>
<code class="lineno">15</code>     <code class="kd">var</code> <code class="nx">nextThis</code><code class="p">;</code>
<code class="lineno">16</code>     <code class="k">return</code> <code class="p">((</code><code class="nx">nextThis</code> <code class="o">=</code> <code class="k">this</code><code class="p">.</code><code class="nx">next</code><code class="p">)</code> <code class="o">!=</code> <code class="kc">null</code> <code class="o">?</code> <code class="nx">nextThis</code><code class="p">.</code><code class="nx">tailNode</code><code class="p">()</code> <code class="o">:</code> <code class="k">void</code> <code class="mi">0</code><code class="p">)</code> <code class="o">||</code> <code class="nx">thi</code><code class="o">\</code>
<code class="lineno">17</code> <code class="nx">s</code><code class="p">;</code>
<code class="lineno">18</code>   <code class="p">};</code>
<code class="lineno">19</code> 
<code class="lineno">20</code>   <code class="k">return</code> <code class="nx">LinkedList</code><code class="p">;</code>
<code class="lineno">21</code> 
<code class="lineno">22</code> <code class="p">})();</code>
<code class="lineno">23</code> 
<code class="lineno">24</code> <code class="kd">function</code> <code class="nx">ListIterator</code> <code class="p">(</code><code class="nx">list</code><code class="p">)</code> <code class="p">{</code>
<code class="lineno">25</code>   <code class="k">return</code> <code class="kd">function</code><code class="p">()</code> <code class="p">{</code>
<code class="lineno">26</code>     <code class="kd">var</code> <code class="nx">node</code><code class="p">;</code>
<code class="lineno">27</code>     <code class="nx">node</code> <code class="o">=</code> <code class="nx">list</code> <code class="o">!=</code> <code class="kc">null</code> <code class="o">?</code> <code class="nx">list</code><code class="p">.</code><code class="nx">content</code> <code class="o">:</code> <code class="k">void</code> <code class="mi">0</code><code class="p">;</code>
<code class="lineno">28</code>     <code class="nx">list</code> <code class="o">=</code> <code class="nx">list</code> <code class="o">!=</code> <code class="kc">null</code> <code class="o">?</code> <code class="nx">list</code><code class="p">.</code><code class="nx">next</code> <code class="o">:</code> <code class="k">void</code> <code class="mi">0</code><code class="p">;</code>
<code class="lineno">29</code>     <code class="k">return</code> <code class="nx">node</code><code class="p">;</code>
<code class="lineno">30</code>   <code class="p">};</code>
<code class="lineno">31</code> <code class="p">};</code>
<code class="lineno">32</code> 
<code class="lineno">33</code> <code class="kd">function</code> <code class="nx">sum</code> <code class="p">(</code><code class="nx">iter</code><code class="p">)</code> <code class="p">{</code>
<code class="lineno">34</code>   <code class="kd">var</code> <code class="nx">number</code><code class="p">,</code> <code class="nx">total</code><code class="p">;</code>
<code class="lineno">35</code>   <code class="nx">total</code> <code class="o">=</code> <code class="mi">0</code><code class="p">;</code>
<code class="lineno">36</code>   <code class="nx">number</code> <code class="o">=</code> <code class="nx">iter</code><code class="p">();</code>
<code class="lineno">37</code>   <code class="k">while</code> <code class="p">(</code><code class="nx">number</code> <code class="o">!=</code> <code class="kc">null</code><code class="p">)</code> <code class="p">{</code>
<code class="lineno">38</code>     <code class="nx">total</code> <code class="o">+=</code> <code class="nx">number</code><code class="p">;</code>
<code class="lineno">39</code>     <code class="nx">number</code> <code class="o">=</code> <code class="nx">iter</code><code class="p">();</code>
<code class="lineno">40</code>   <code class="p">}</code>
<code class="lineno">41</code>   <code class="k">return</code> <code class="nx">total</code><code class="p">;</code>
<code class="lineno">42</code> <code class="p">};</code>
<code class="lineno">43</code> 
<code class="lineno">44</code> <code class="nx">list</code> <code class="o">=</code> <code class="k">new</code> <code class="nx">LinkedList</code><code class="p">(</code><code class="mi">5</code><code class="p">).</code><code class="nx">appendTo</code><code class="p">(</code><code class="mi">4</code><code class="p">).</code><code class="nx">appendTo</code><code class="p">(</code><code class="mi">3</code><code class="p">).</code><code class="nx">appendTo</code><code class="p">(</code><code class="mi">2</code><code class="p">).</code><code class="nx">appendTo</code><code class="p">(</code><code class="mi">1</code><code class="p">);</code>
<code class="lineno">45</code> 
<code class="lineno">46</code> <code class="nx">sum</code><code class="p">(</code><code class="nx">ListIterator</code><code class="p">(</code><code class="nx">list</code><code class="p">));</code>
<code class="lineno">47</code>   <code class="c1">//=&gt; 15</code>
<code class="lineno">48</code> 
<code class="lineno">49</code> <code class="kd">function</code> <code class="nx">ArrayIterator</code> <code class="p">(</code><code class="nx">array</code><code class="p">)</code> <code class="p">{</code>
<code class="lineno">50</code>   <code class="kd">var</code> <code class="nx">index</code><code class="p">;</code>
<code class="lineno">51</code>   <code class="nx">index</code> <code class="o">=</code> <code class="mi">0</code><code class="p">;</code>
<code class="lineno">52</code>   <code class="k">return</code> <code class="kd">function</code><code class="p">()</code> <code class="p">{</code>
<code class="lineno">53</code>     <code class="k">return</code> <code class="nx">array</code><code class="p">[</code><code class="nx">index</code><code class="o">++</code><code class="p">];</code>
<code class="lineno">54</code>   <code class="p">};</code>
<code class="lineno">55</code> <code class="p">};</code>
<code class="lineno">56</code> 
<code class="lineno">57</code> <code class="nx">sum</code><code class="p">(</code><code class="nx">ArrayIterator</code><code class="p">([</code><code class="mi">1</code><code class="p">,</code> <code class="mi">2</code><code class="p">,</code> <code class="mi">3</code><code class="p">,</code> <code class="mi">4</code><code class="p">,</code> <code class="mi">5</code><code class="p">]));</code>
<code class="lineno">58</code>   <code class="c1">//=&gt; 15</code>
</pre></div>

</div>

<p>Summing an array that can contain nested arrays adds a degree of complexity. Writing a function that iterates recursively over a data structure is an interesting problem, one that is trivial in a language with <a href="https://en.wikipedia.org/wiki/Coroutine">coroutines</a>. Since we don’t have Generators yet, and we don’t want to try to turn our loop detection inside-out, we’ll Greenspun our own coroutine by maintaining our own stack.</p>

<blockquote>
  <p>This business of managing your own stack may seem weird to anyone born after 1970, but old fogeys fondly remember that after walking barefoot to and from University uphill in a blizzard both ways, the interview question brain teaser of the day was to write a “Towers of Hanoi” solver in a language like BASIC that didn’t have reentrant subroutines.</p>
</blockquote>

<div class="code-block">
<div class="highlight"><pre><code class="lineno"> 1</code> <code class="kd">function</code> <code class="nx">LeafIterator</code> <code class="p">(</code><code class="nx">array</code><code class="p">)</code> <code class="p">{</code>
<code class="lineno"> 2</code>   <code class="kd">var</code> <code class="nx">index</code><code class="p">,</code> <code class="nx">myself</code><code class="p">,</code> <code class="nx">state</code><code class="p">;</code>
<code class="lineno"> 3</code>   <code class="nx">index</code> <code class="o">=</code> <code class="mi">0</code><code class="p">;</code>
<code class="lineno"> 4</code>   <code class="nx">state</code> <code class="o">=</code> <code class="p">[];</code>
<code class="lineno"> 5</code>   <code class="nx">myself</code> <code class="o">=</code> <code class="kd">function</code><code class="p">()</code> <code class="p">{</code>
<code class="lineno"> 6</code>     <code class="kd">var</code> <code class="nx">element</code><code class="p">,</code> <code class="nx">tempState</code><code class="p">;</code>
<code class="lineno"> 7</code>     <code class="nx">element</code> <code class="o">=</code> <code class="nx">array</code><code class="p">[</code><code class="nx">index</code><code class="o">++</code><code class="p">];</code>
<code class="lineno"> 8</code>     <code class="k">if</code> <code class="p">(</code><code class="nx">element</code> <code class="k">instanceof</code> <code class="nb">Array</code><code class="p">)</code> <code class="p">{</code>
<code class="lineno"> 9</code>       <code class="nx">state</code><code class="p">.</code><code class="nx">push</code><code class="p">({</code>
<code class="lineno">10</code>         <code class="nx">array</code><code class="o">:</code> <code class="nx">array</code><code class="p">,</code>
<code class="lineno">11</code>         <code class="nx">index</code><code class="o">:</code> <code class="nx">index</code>
<code class="lineno">12</code>       <code class="p">});</code>
<code class="lineno">13</code>       <code class="nx">array</code> <code class="o">=</code> <code class="nx">element</code><code class="p">;</code>
<code class="lineno">14</code>       <code class="nx">index</code> <code class="o">=</code> <code class="mi">0</code><code class="p">;</code>
<code class="lineno">15</code>       <code class="k">return</code> <code class="nx">myself</code><code class="p">();</code>
<code class="lineno">16</code>     <code class="p">}</code> <code class="k">else</code> <code class="k">if</code> <code class="p">(</code><code class="nx">element</code> <code class="o">===</code> <code class="k">void</code> <code class="mi">0</code><code class="p">)</code> <code class="p">{</code>
<code class="lineno">17</code>       <code class="k">if</code> <code class="p">(</code><code class="nx">state</code><code class="p">.</code><code class="nx">length</code> <code class="o">&gt;</code> <code class="mi">0</code><code class="p">)</code> <code class="p">{</code>
<code class="lineno">18</code>         <code class="nx">tempState</code> <code class="o">=</code> <code class="nx">state</code><code class="p">.</code><code class="nx">pop</code><code class="p">(),</code> <code class="nx">array</code> <code class="o">=</code> <code class="nx">tempState</code><code class="p">.</code><code class="nx">array</code><code class="p">,</code> <code class="nx">index</code> <code class="o">=</code> <code class="nx">tempState</code><code class="p">.</code><code class="nx">index</code><code class="p">;</code>
<code class="lineno">19</code>         <code class="k">return</code> <code class="nx">myself</code><code class="p">();</code>
<code class="lineno">20</code>       <code class="p">}</code> <code class="k">else</code> <code class="p">{</code>
<code class="lineno">21</code>         <code class="k">return</code> <code class="k">void</code> <code class="mi">0</code><code class="p">;</code>
<code class="lineno">22</code>       <code class="p">}</code>
<code class="lineno">23</code>     <code class="p">}</code> <code class="k">else</code> <code class="p">{</code>
<code class="lineno">24</code>       <code class="k">return</code> <code class="nx">element</code><code class="p">;</code>
<code class="lineno">25</code>     <code class="p">}</code>
<code class="lineno">26</code>   <code class="p">};</code>
<code class="lineno">27</code>   <code class="k">return</code> <code class="nx">myself</code><code class="p">;</code>
<code class="lineno">28</code> <code class="p">};</code>
<code class="lineno">29</code> 
<code class="lineno">30</code> <code class="nx">sum</code><code class="p">(</code><code class="nx">LeafIterator</code><code class="p">([</code><code class="mi">1</code><code class="p">,</code> <code class="p">[</code><code class="mi">2</code><code class="p">,</code> <code class="p">[</code><code class="mi">3</code><code class="p">,</code> <code class="mi">4</code><code class="p">]],</code> <code class="p">[</code><code class="mi">5</code><code class="p">]]));</code>
<code class="lineno">31</code>   <code class="c1">//=&gt; 15</code>
</pre></div>

</div>

<p>We’ve successfully separated the issue of what one does with data from how one traverses over the elements.</p>

<h4 id="leanpub-auto-folding">folding</h4>

<p>Just as pure functional programmers love to talk monads, newcomers to functional programming in multi-paradigm languages often drool over <a href="https://en.wikipedia.org/wiki/Fold_" title="higher-order_function">folding</a> a/k/a mapping/injecting/reducing. We’re just a level of abstraction away:</p>

<div class="code-block">
<div class="highlight"><pre><code class="lineno"> 1</code> <code class="kd">function</code> <code class="nx">fold</code> <code class="p">(</code><code class="nx">iter</code><code class="p">,</code> <code class="nx">binaryFn</code><code class="p">,</code> <code class="nx">seed</code><code class="p">)</code> <code class="p">{</code>
<code class="lineno"> 2</code>   <code class="kd">var</code> <code class="nx">acc</code><code class="p">,</code> <code class="nx">element</code><code class="p">;</code>
<code class="lineno"> 3</code>   <code class="nx">acc</code> <code class="o">=</code> <code class="nx">seed</code><code class="p">;</code>
<code class="lineno"> 4</code>   <code class="nx">element</code> <code class="o">=</code> <code class="nx">iter</code><code class="p">();</code>
<code class="lineno"> 5</code>   <code class="k">while</code> <code class="p">(</code><code class="nx">element</code> <code class="o">!=</code> <code class="kc">null</code><code class="p">)</code> <code class="p">{</code>
<code class="lineno"> 6</code>     <code class="nx">acc</code> <code class="o">=</code> <code class="nx">binaryFn</code><code class="p">.</code><code class="nx">call</code><code class="p">(</code><code class="nx">element</code><code class="p">,</code> <code class="nx">acc</code><code class="p">,</code> <code class="nx">element</code><code class="p">);</code>
<code class="lineno"> 7</code>     <code class="nx">element</code> <code class="o">=</code> <code class="nx">iter</code><code class="p">();</code>
<code class="lineno"> 8</code>   <code class="p">}</code>
<code class="lineno"> 9</code>   <code class="k">return</code> <code class="nx">acc</code><code class="p">;</code>
<code class="lineno">10</code> <code class="p">};</code>
<code class="lineno">11</code> 
<code class="lineno">12</code> <code class="kd">function</code> <code class="nx">foldingSum</code> <code class="p">(</code><code class="nx">iter</code><code class="p">)</code> <code class="p">{</code>
<code class="lineno">13</code>   <code class="k">return</code> <code class="nx">fold</code><code class="p">(</code><code class="nx">iter</code><code class="p">,</code> <code class="p">(</code><code class="kd">function</code><code class="p">(</code><code class="nx">x</code><code class="p">,</code> <code class="nx">y</code><code class="p">)</code> <code class="p">{</code>
<code class="lineno">14</code>     <code class="k">return</code> <code class="nx">x</code> <code class="o">+</code> <code class="nx">y</code><code class="p">;</code>
<code class="lineno">15</code>   <code class="p">}),</code> <code class="mi">0</code><code class="p">);</code>
<code class="lineno">16</code> <code class="p">};</code>
<code class="lineno">17</code> 
<code class="lineno">18</code> <code class="nx">foldingSum</code><code class="p">(</code><code class="nx">LeafIterator</code><code class="p">([</code><code class="mi">1</code><code class="p">,</code> <code class="p">[</code><code class="mi">2</code><code class="p">,</code> <code class="p">[</code><code class="mi">3</code><code class="p">,</code> <code class="mi">4</code><code class="p">]],</code> <code class="p">[</code><code class="mi">5</code><code class="p">]]));</code>
<code class="lineno">19</code>   <code class="c1">//=&gt; 15</code>
</pre></div>

</div>

<p>Fold turns an iterator over a finite data structure into an accumulator. And once again, it works with any data structure. You don’t need a different kind of fold for each kind of data structure you use.</p>

<h4 id="leanpub-auto-unfolding-and-laziness">unfolding and laziness</h4>

<p>Iterators are functions. When they iterate over an array or linked list, they are traversing something that is already there. But they could, in principle, manufacture the data as they go. Let’s consider the simplest example:</p>

<div class="code-block">
<div class="highlight"><pre><code class="lineno"> 1</code> <code class="kd">function</code> <code class="nx">NumberIterator</code> <code class="p">(</code><code class="nx">base</code><code class="p">)</code> <code class="p">{</code>
<code class="lineno"> 2</code>   <code class="kd">var</code> <code class="nx">number</code><code class="p">;</code>
<code class="lineno"> 3</code>   <code class="k">if</code> <code class="p">(</code><code class="nx">base</code> <code class="o">==</code> <code class="kc">null</code><code class="p">)</code> <code class="p">{</code>
<code class="lineno"> 4</code>     <code class="nx">base</code> <code class="o">=</code> <code class="mi">0</code><code class="p">;</code>
<code class="lineno"> 5</code>   <code class="p">}</code>
<code class="lineno"> 6</code>   <code class="nx">number</code> <code class="o">=</code> <code class="nx">base</code><code class="p">;</code>
<code class="lineno"> 7</code>   <code class="k">return</code> <code class="kd">function</code><code class="p">()</code> <code class="p">{</code>
<code class="lineno"> 8</code>     <code class="k">return</code> <code class="nx">number</code><code class="o">++</code><code class="p">;</code>
<code class="lineno"> 9</code>   <code class="p">};</code>
<code class="lineno">10</code> <code class="p">};</code>
<code class="lineno">11</code> 
<code class="lineno">12</code> <code class="nx">fromOne</code> <code class="o">=</code> <code class="nx">NumberIterator</code><code class="p">(</code><code class="mi">1</code><code class="p">);</code>
<code class="lineno">13</code> 
<code class="lineno">14</code> <code class="nx">fromOne</code><code class="p">();</code>
<code class="lineno">15</code>   <code class="c1">//=&gt; 1</code>
<code class="lineno">16</code> <code class="nx">fromOne</code><code class="p">();</code>
<code class="lineno">17</code>   <code class="c1">//=&gt; 2</code>
<code class="lineno">18</code> <code class="nx">fromOne</code><code class="p">();</code>
<code class="lineno">19</code>   <code class="c1">//=&gt; 3</code>
<code class="lineno">20</code> <code class="nx">fromOne</code><code class="p">();</code>
<code class="lineno">21</code>   <code class="c1">//=&gt; 4</code>
<code class="lineno">22</code> <code class="nx">fromOne</code><code class="p">();</code>
<code class="lineno">23</code>   <code class="c1">//=&gt; 5</code>
</pre></div>

</div>

<p>And here’s another one:</p>

<div class="code-block">
<div class="highlight"><pre><code class="lineno"> 1</code> <code class="kd">function</code> <code class="nx">FibonacciIterator</code> <code class="p">()</code> <code class="p">{</code>
<code class="lineno"> 2</code>   <code class="kd">var</code> <code class="nx">current</code><code class="p">,</code> <code class="nx">previous</code><code class="p">;</code>
<code class="lineno"> 3</code>   <code class="nx">previous</code> <code class="o">=</code> <code class="mi">0</code><code class="p">;</code>
<code class="lineno"> 4</code>   <code class="nx">current</code> <code class="o">=</code> <code class="mi">1</code><code class="p">;</code>
<code class="lineno"> 5</code>   <code class="k">return</code> <code class="kd">function</code><code class="p">()</code> <code class="p">{</code>
<code class="lineno"> 6</code>     <code class="kd">var</code> <code class="nx">value</code><code class="p">,</code> <code class="nx">tempValues</code><code class="p">;</code>
<code class="lineno"> 7</code>     <code class="nx">value</code> <code class="o">=</code> <code class="nx">current</code><code class="p">;</code>
<code class="lineno"> 8</code>     <code class="nx">tempValues</code> <code class="o">=</code> <code class="p">[</code><code class="nx">current</code><code class="p">,</code> <code class="nx">current</code> <code class="o">+</code> <code class="nx">previous</code><code class="p">],</code> <code class="nx">previous</code> <code class="o">=</code> <code class="nx">tempValues</code><code class="p">[</code><code class="mi">0</code><code class="p">],</code> <code class="nx">current</code><code class="o">\</code>
<code class="lineno"> 9</code>  <code class="o">=</code> <code class="nx">tempValues</code><code class="p">[</code><code class="mi">1</code><code class="p">];</code>
<code class="lineno">10</code>     <code class="k">return</code> <code class="nx">value</code><code class="p">;</code>
<code class="lineno">11</code>   <code class="p">};</code>
<code class="lineno">12</code> <code class="p">};</code>
<code class="lineno">13</code>   
<code class="lineno">14</code> <code class="nx">fib</code> <code class="o">=</code> <code class="nx">FibonacciIterator</code><code class="p">()</code>
<code class="lineno">15</code> 
<code class="lineno">16</code> <code class="nx">fib</code><code class="p">()</code>
<code class="lineno">17</code>   <code class="c1">//=&gt; 1</code>
<code class="lineno">18</code> <code class="nx">fib</code><code class="p">()</code>
<code class="lineno">19</code>   <code class="c1">//=&gt; 1</code>
<code class="lineno">20</code> <code class="nx">fib</code><code class="p">()</code>
<code class="lineno">21</code>   <code class="c1">//=&gt; 2</code>
<code class="lineno">22</code> <code class="nx">fib</code><code class="p">()</code>
<code class="lineno">23</code>   <code class="c1">//=&gt; 3</code>
<code class="lineno">24</code> <code class="nx">fib</code><code class="p">()</code>
<code class="lineno">25</code>   <code class="c1">//=&gt; 5</code>
</pre></div>

</div>

<p>A function that starts with a seed and expands it into a data structure is called an <em>unfold</em>. It’s the opposite of a fold. It’s possible to write a generic unfold mechanism, but let’s pass on to what we can do with unfolded iterators.</p>

<p>This business of going on forever has some drawbacks. Let’s introduce an idea: A function that takes an Iterator and returns another iterator. We can start with <code>take</code>, an easy function that returns an iterator that only returns a fixed number of elements:</p>

<div class="code-block">
<div class="highlight"><pre><code class="lineno"> 1</code> <code class="nx">take</code> <code class="o">=</code> <code class="kd">function</code><code class="p">(</code><code class="nx">iter</code><code class="p">,</code> <code class="nx">numberToTake</code><code class="p">)</code> <code class="p">{</code>
<code class="lineno"> 2</code>   <code class="kd">var</code> <code class="nx">count</code><code class="p">;</code>
<code class="lineno"> 3</code>   <code class="nx">count</code> <code class="o">=</code> <code class="mi">0</code><code class="p">;</code>
<code class="lineno"> 4</code>   <code class="k">return</code> <code class="kd">function</code><code class="p">()</code> <code class="p">{</code>
<code class="lineno"> 5</code>     <code class="k">if</code> <code class="p">(</code><code class="o">++</code><code class="nx">count</code> <code class="o">&lt;=</code> <code class="nx">numberToTake</code><code class="p">)</code> <code class="p">{</code>
<code class="lineno"> 6</code>       <code class="k">return</code> <code class="nx">iter</code><code class="p">();</code>
<code class="lineno"> 7</code>     <code class="p">}</code> <code class="k">else</code> <code class="p">{</code>
<code class="lineno"> 8</code>       <code class="k">return</code> <code class="k">void</code> <code class="mi">0</code><code class="p">;</code>
<code class="lineno"> 9</code>     <code class="p">}</code>
<code class="lineno">10</code>   <code class="p">};</code>
<code class="lineno">11</code> <code class="p">};</code>
<code class="lineno">12</code> 
<code class="lineno">13</code> <code class="nx">oneToFive</code> <code class="o">=</code> <code class="nx">take</code><code class="p">(</code><code class="nx">NumberIterator</code><code class="p">(</code><code class="mi">1</code><code class="p">),</code> <code class="mi">5</code><code class="p">);</code>
<code class="lineno">14</code> 
<code class="lineno">15</code> <code class="nx">oneToFive</code><code class="p">();</code>
<code class="lineno">16</code>   <code class="c1">//=&gt; 1</code>
<code class="lineno">17</code> <code class="nx">oneToFive</code><code class="p">();</code>
<code class="lineno">18</code>   <code class="c1">//=&gt; 2</code>
<code class="lineno">19</code> <code class="nx">oneToFive</code><code class="p">();</code>
<code class="lineno">20</code>   <code class="c1">//=&gt; 3</code>
<code class="lineno">21</code> <code class="nx">oneToFive</code><code class="p">();</code>
<code class="lineno">22</code>   <code class="c1">//=&gt; 4</code>
<code class="lineno">23</code> <code class="nx">oneToFive</code><code class="p">();</code>
<code class="lineno">24</code>   <code class="c1">//=&gt; 5</code>
<code class="lineno">25</code> <code class="nx">oneToFive</code><code class="p">();</code>
<code class="lineno">26</code>   <code class="c1">//=&gt; undefined</code>
</pre></div>

</div>

<p>With <code>take</code>, we can do things like return the squares of the first five numbers:</p>

<div class="code-block">
<div class="highlight"><pre><code class="lineno">1</code> <code class="nx">square</code><code class="p">(</code><code class="nx">take</code><code class="p">(</code><code class="nx">NumberIterator</code><code class="p">(</code><code class="mi">1</code><code class="p">),</code> <code class="mi">5</code><code class="p">))</code>
<code class="lineno">2</code> 
<code class="lineno">3</code>   <code class="c1">//=&gt; [ 1,</code>
<code class="lineno">4</code>   <code class="c1">//     4,</code>
<code class="lineno">5</code>   <code class="c1">//     9,</code>
<code class="lineno">6</code>   <code class="c1">//     16,</code>
<code class="lineno">7</code>   <code class="c1">//     25 ]</code>
</pre></div>

</div>

<p>How about the squares of the odd numbers from the first five numbers?</p>

<div class="code-block">
<div class="highlight"><pre><code class="lineno">1</code> <code class="nx">square</code><code class="p">(</code><code class="nx">odds</code><code class="p">(</code><code class="nx">take</code><code class="p">(</code><code class="nx">NumberIterator</code><code class="p">(</code><code class="mi">1</code><code class="p">),</code> <code class="mi">5</code><code class="p">)))</code>
<code class="lineno">2</code>   <code class="c1">//=&gt; TypeError: object is not a function</code>
</pre></div>

</div>

<p>Bzzzt! Our <code>odds</code> function returns an array, not an iterator.</p>

<div class="code-block">
<div class="highlight"><pre><code class="lineno">1</code> <code class="nx">square</code><code class="p">(</code><code class="nx">take</code><code class="p">(</code><code class="nx">odds</code><code class="p">(</code><code class="nx">NumberIterator</code><code class="p">(</code><code class="mi">1</code><code class="p">)),</code> <code class="mi">5</code><code class="p">))</code>
<code class="lineno">2</code>   <code class="c1">//=&gt; RangeError: Maximum call stack size exceeded</code>
</pre></div>

</div>

<p>You can’t take the first five odd numbers at all, because <code>odds</code> tries to get the entire set of numbers and accumulate the odd ones in an array. This can be fixed. For unfolds and other infinite iterators, we need more functions that transform one iterator into another:</p>

<div class="code-block">
<div class="highlight"><pre><code class="lineno"> 1</code> <code class="kd">function</code> <code class="nx">iteratorMap</code> <code class="p">(</code><code class="nx">iter</code><code class="p">,</code> <code class="nx">unaryFn</code><code class="p">)</code> <code class="p">{</code>
<code class="lineno"> 2</code>   <code class="k">return</code> <code class="kd">function</code><code class="p">()</code> <code class="p">{</code>
<code class="lineno"> 3</code>     <code class="kd">var</code> <code class="nx">element</code><code class="p">;</code>
<code class="lineno"> 4</code>     <code class="nx">element</code> <code class="o">=</code> <code class="nx">iter</code><code class="p">();</code>
<code class="lineno"> 5</code>     <code class="k">if</code> <code class="p">(</code><code class="nx">element</code> <code class="o">!=</code> <code class="kc">null</code><code class="p">)</code> <code class="p">{</code>
<code class="lineno"> 6</code>       <code class="k">return</code> <code class="nx">unaryFn</code><code class="p">.</code><code class="nx">call</code><code class="p">(</code><code class="nx">element</code><code class="p">,</code> <code class="nx">element</code><code class="p">);</code>
<code class="lineno"> 7</code>     <code class="p">}</code> <code class="k">else</code> <code class="p">{</code>
<code class="lineno"> 8</code>       <code class="k">return</code> <code class="k">void</code> <code class="mi">0</code><code class="p">;</code>
<code class="lineno"> 9</code>     <code class="p">}</code>
<code class="lineno">10</code>   <code class="p">};</code>
<code class="lineno">11</code> <code class="p">};</code>
<code class="lineno">12</code> 
<code class="lineno">13</code> <code class="kd">function</code> <code class="nx">squaresIterator</code> <code class="p">(</code><code class="nx">iter</code><code class="p">)</code> <code class="p">{</code>
<code class="lineno">14</code>   <code class="k">return</code> <code class="nx">iteratorMap</code><code class="p">(</code><code class="nx">iter</code><code class="p">,</code> <code class="kd">function</code><code class="p">(</code><code class="nx">n</code><code class="p">)</code> <code class="p">{</code>
<code class="lineno">15</code>     <code class="k">return</code> <code class="nx">n</code> <code class="o">*</code> <code class="nx">n</code><code class="p">;</code>
<code class="lineno">16</code>   <code class="p">});</code>
<code class="lineno">17</code> <code class="p">};</code>
<code class="lineno">18</code> 
<code class="lineno">19</code> <code class="kd">function</code> <code class="nx">iteratorFilter</code> <code class="p">(</code><code class="nx">iter</code><code class="p">,</code> <code class="nx">unaryPredicateFn</code><code class="p">)</code> <code class="p">{</code>
<code class="lineno">20</code>   <code class="k">return</code> <code class="kd">function</code><code class="p">()</code> <code class="p">{</code>
<code class="lineno">21</code>     <code class="kd">var</code> <code class="nx">element</code><code class="p">;</code>
<code class="lineno">22</code>     <code class="nx">element</code> <code class="o">=</code> <code class="nx">iter</code><code class="p">();</code>
<code class="lineno">23</code>     <code class="k">while</code> <code class="p">(</code><code class="nx">element</code> <code class="o">!=</code> <code class="kc">null</code><code class="p">)</code> <code class="p">{</code>
<code class="lineno">24</code>       <code class="k">if</code> <code class="p">(</code><code class="nx">unaryPredicateFn</code><code class="p">.</code><code class="nx">call</code><code class="p">(</code><code class="nx">element</code><code class="p">,</code> <code class="nx">element</code><code class="p">))</code> <code class="p">{</code>
<code class="lineno">25</code>         <code class="k">return</code> <code class="nx">element</code><code class="p">;</code>
<code class="lineno">26</code>       <code class="p">}</code>
<code class="lineno">27</code>       <code class="nx">element</code> <code class="o">=</code> <code class="nx">iter</code><code class="p">();</code>
<code class="lineno">28</code>     <code class="p">}</code>
<code class="lineno">29</code>     <code class="k">return</code> <code class="k">void</code> <code class="mi">0</code><code class="p">;</code>
<code class="lineno">30</code>   <code class="p">};</code>
<code class="lineno">31</code> <code class="p">};</code>
<code class="lineno">32</code> 
<code class="lineno">33</code> <code class="kd">function</code> <code class="nx">oddsFilter</code> <code class="p">(</code><code class="nx">iter</code><code class="p">)</code> <code class="p">{</code>
<code class="lineno">34</code>   <code class="k">return</code> <code class="nx">iteratorFilter</code><code class="p">(</code><code class="nx">iter</code><code class="p">,</code> <code class="nx">odd</code><code class="p">);</code>
<code class="lineno">35</code> <code class="p">};</code>
</pre></div>

</div>

<p>Now we can do things like take the sum of the first five odd squares of fibonacci numbers:</p>

<div class="code-block">
<div class="highlight"><pre><code class="lineno">1</code> <code class="nx">foldingSum</code><code class="p">(</code><code class="nx">take</code><code class="p">(</code><code class="nx">oddsFilter</code><code class="p">(</code><code class="nx">squaresIterator</code><code class="p">(</code><code class="nx">FibonacciIterator</code><code class="p">())),</code> <code class="mi">5</code><code class="p">))</code>
<code class="lineno">2</code>   <code class="c1">//=&gt; 205</code>
</pre></div>

</div>

<p>This solution composes the parts we already have, rather than writing a tricky bit of code with ifs and whiles and boundary conditions.</p>

<h4 id="leanpub-auto-summary-4">summary</h4>

<p>Untangling the concerns of how to iterate over data from what to do with data leads us to thinking of iterators and working directly with iterators. For example, we can map and filter iterators rather than trying to write separate map and filter functions or methods for each type of data structure. This leads to the possibility of working with lazy or infinite iterators.</p>

<h4 id="leanpub-auto-caveat">caveat</h4>

<p>Please note that unlike most of the other functions discussed in this book, iterators are <em>stateful</em>. There are some important implications of stateful functions. One is that while functions like <code>take(...)</code> appear to create an entirely new iterator, in reality they return a decorated reference to the original iterator. So as you traverse the new decorator, you’re changing the state of the original!</p>

<p>For all intents and purposes, once you pass an iterator to a function, you can expect that you no longer “own” that iterator, and that its state either has changed or will change.</p>

<h3 id="leanpub-auto-refactoring-to-functional-iterators">Refactoring to Functional Iterators</h3>

<p>In <a href="#tortoises">Tortoises, Hares, and Teleporting Turtles</a>, we looked at the “Tortoise and Hare” algorithm for detecting a linked list. Like many such algorithms, it “tangles” two different concerns:</p>

<ol class="numeric numeric">
<li>The mechanism for iterating over a list.</li>
  <li>The algorithm for detecting a loop in a list.</li>
</ol>
<div class="code-block">
<div class="highlight"><pre><code class="lineno"> 1</code> <code class="kd">var</code> <code class="nx">LinkedList</code> <code class="o">=</code> <code class="p">(</code><code class="kd">function</code><code class="p">()</code> <code class="p">{</code>
<code class="lineno"> 2</code> 
<code class="lineno"> 3</code>   <code class="kd">function</code> <code class="nx">LinkedList</code><code class="p">(</code><code class="nx">content</code><code class="p">,</code> <code class="nx">next</code><code class="p">)</code> <code class="p">{</code>
<code class="lineno"> 4</code>     <code class="k">this</code><code class="p">.</code><code class="nx">content</code> <code class="o">=</code> <code class="nx">content</code><code class="p">;</code>
<code class="lineno"> 5</code>     <code class="k">this</code><code class="p">.</code><code class="nx">next</code> <code class="o">=</code> <code class="nx">next</code> <code class="o">!=</code> <code class="kc">null</code> <code class="o">?</code> <code class="nx">next</code> <code class="o">:</code> <code class="k">void</code> <code class="mi">0</code><code class="p">;</code>
<code class="lineno"> 6</code>   <code class="p">}</code>
<code class="lineno"> 7</code> 
<code class="lineno"> 8</code>   <code class="nx">LinkedList</code><code class="p">.</code><code class="nx">prototype</code><code class="p">.</code><code class="nx">appendTo</code> <code class="o">=</code> <code class="kd">function</code><code class="p">(</code><code class="nx">content</code><code class="p">)</code> <code class="p">{</code>
<code class="lineno"> 9</code>     <code class="k">return</code> <code class="k">new</code> <code class="nx">LinkedList</code><code class="p">(</code><code class="nx">content</code><code class="p">,</code> <code class="k">this</code><code class="p">);</code>
<code class="lineno">10</code>   <code class="p">};</code>
<code class="lineno">11</code> 
<code class="lineno">12</code>   <code class="nx">LinkedList</code><code class="p">.</code><code class="nx">prototype</code><code class="p">.</code><code class="nx">tailNode</code> <code class="o">=</code> <code class="kd">function</code><code class="p">()</code> <code class="p">{</code>
<code class="lineno">13</code>     <code class="kd">var</code> <code class="nx">nextThis</code><code class="p">;</code>
<code class="lineno">14</code>     <code class="k">return</code> <code class="p">((</code><code class="nx">nextThis</code> <code class="o">=</code> <code class="k">this</code><code class="p">.</code><code class="nx">next</code><code class="p">)</code> <code class="o">!=</code> <code class="kc">null</code> <code class="o">?</code> <code class="nx">nextThis</code><code class="p">.</code><code class="nx">tailNode</code><code class="p">()</code> <code class="o">:</code> <code class="k">void</code> <code class="mi">0</code><code class="p">)</code> <code class="o">||</code> <code class="nx">thi</code><code class="o">\</code>
<code class="lineno">15</code> <code class="nx">s</code><code class="p">;</code>
<code class="lineno">16</code>   <code class="p">};</code>
<code class="lineno">17</code> 
<code class="lineno">18</code>   <code class="k">return</code> <code class="nx">LinkedList</code><code class="p">;</code>
<code class="lineno">19</code> 
<code class="lineno">20</code> <code class="p">})();</code>
<code class="lineno">21</code> 
<code class="lineno">22</code> <code class="kd">function</code> <code class="nx">tortoiseAndHareLoopDetector</code> <code class="p">(</code><code class="nx">list</code><code class="p">)</code> <code class="p">{</code>
<code class="lineno">23</code>   <code class="kd">var</code> <code class="nx">hare</code><code class="p">,</code> <code class="nx">tortoise</code><code class="p">,</code> <code class="nx">nextHare</code><code class="p">;</code>
<code class="lineno">24</code>   <code class="nx">tortoise</code> <code class="o">=</code> <code class="nx">list</code><code class="p">;</code>
<code class="lineno">25</code>   <code class="nx">hare</code> <code class="o">=</code> <code class="nx">list</code><code class="p">.</code><code class="nx">next</code><code class="p">;</code>
<code class="lineno">26</code>   <code class="k">while</code> <code class="p">((</code><code class="nx">tortoise</code> <code class="o">!=</code> <code class="kc">null</code><code class="p">)</code> <code class="o">&amp;&amp;</code> <code class="p">(</code><code class="nx">hare</code> <code class="o">!=</code> <code class="kc">null</code><code class="p">))</code> <code class="p">{</code>
<code class="lineno">27</code>     <code class="k">if</code> <code class="p">(</code><code class="nx">tortoise</code> <code class="o">===</code> <code class="nx">hare</code><code class="p">)</code> <code class="p">{</code>
<code class="lineno">28</code>       <code class="k">return</code> <code class="kc">true</code><code class="p">;</code>
<code class="lineno">29</code>     <code class="p">}</code>
<code class="lineno">30</code>     <code class="nx">tortoise</code> <code class="o">=</code> <code class="nx">tortoise</code><code class="p">.</code><code class="nx">next</code><code class="p">;</code>
<code class="lineno">31</code>     <code class="nx">hare</code> <code class="o">=</code> <code class="p">(</code><code class="nx">nextHare</code> <code class="o">=</code> <code class="nx">hare</code><code class="p">.</code><code class="nx">next</code><code class="p">)</code> <code class="o">!=</code> <code class="kc">null</code> <code class="o">?</code> <code class="nx">nextHare</code><code class="p">.</code><code class="nx">next</code> <code class="o">:</code> <code class="k">void</code> <code class="mi">0</code><code class="p">;</code>
<code class="lineno">32</code>   <code class="p">}</code>
<code class="lineno">33</code>   <code class="k">return</code> <code class="kc">false</code><code class="p">;</code>
<code class="lineno">34</code> <code class="p">};</code>
</pre></div>

</div>

<h4 id="leanpub-auto-functional-iterators">functional iterators</h4>

<p>We then went on to discuss how to use <a href="#functional-iterators">functional iterators</a> to untangle concerns like this. A functional iterator is a stateful function that iterates over a data structure. Every time you call it, it returns the next element from the data structure. If and when it completes its traversal, it returns <code>undefined</code>.</p>

<p>For example, here is a function that takes an array and returns a functional iterator over the array:</p>

<div class="code-block">
<div class="highlight"><pre><code class="lineno">1</code> <code class="kd">function</code> <code class="nx">ArrayIterator</code> <code class="p">(</code><code class="nx">array</code><code class="p">)</code> <code class="p">{</code>
<code class="lineno">2</code>   <code class="kd">var</code> <code class="nx">index</code> <code class="o">=</code> <code class="mi">0</code><code class="p">;</code>
<code class="lineno">3</code>   <code class="k">return</code> <code class="kd">function</code><code class="p">()</code> <code class="p">{</code>
<code class="lineno">4</code>     <code class="k">return</code> <code class="nx">array</code><code class="p">[</code><code class="nx">index</code><code class="o">++</code><code class="p">];</code>
<code class="lineno">5</code>   <code class="p">};</code>
<code class="lineno">6</code> <code class="p">};</code>
</pre></div>

</div>

<p>Iterators allow us to write (or refactor) functions to operate on iterators instead of data structures. That increases reuse. We can also write higher-order functions that operate directly on iterators such as mapping and selecting. That allows us to write lazy algorithms.</p>

<h4 id="leanpub-auto-refactoring-the-tortoise-and-hare">refactoring the tortoise and hare</h4>

<p>Now we’ll refactor the Tortoise and Hare to use iterators instead of directly operate on linked lists. We’ll add an <code>.iterator()</code> method to linked lists, and we’ll rewrite our loop detector function to take an “iterable” instead of a list:</p>

<div class="code-block">
<div class="highlight"><pre><code class="lineno"> 1</code> <code class="nx">LinkedList</code><code class="p">.</code><code class="nx">prototype</code><code class="p">.</code><code class="nx">iterator</code> <code class="o">=</code> <code class="kd">function</code><code class="p">()</code> <code class="p">{</code>
<code class="lineno"> 2</code>   <code class="kd">var</code> <code class="nx">list</code> <code class="o">=</code> <code class="k">this</code><code class="p">;</code>
<code class="lineno"> 3</code>   <code class="k">return</code> <code class="kd">function</code><code class="p">()</code> <code class="p">{</code>
<code class="lineno"> 4</code>     <code class="kd">var</code> <code class="nx">value</code> <code class="o">=</code> <code class="nx">list</code> <code class="o">!=</code> <code class="kc">null</code> <code class="o">?</code> <code class="nx">list</code><code class="p">.</code><code class="nx">content</code> <code class="o">:</code> <code class="k">void</code> <code class="mi">0</code><code class="p">;</code>
<code class="lineno"> 5</code>     <code class="nx">list</code> <code class="o">=</code> <code class="nx">list</code> <code class="o">!=</code> <code class="kc">null</code> <code class="o">?</code> <code class="nx">list</code><code class="p">.</code><code class="nx">next</code> <code class="o">:</code> <code class="k">void</code> <code class="mi">0</code><code class="p">;</code>
<code class="lineno"> 6</code>     <code class="k">return</code> <code class="nx">value</code><code class="p">;</code>
<code class="lineno"> 7</code>   <code class="p">};</code>
<code class="lineno"> 8</code> <code class="p">};</code>
<code class="lineno"> 9</code> 
<code class="lineno">10</code> <code class="kd">function</code> <code class="nx">tortoiseAndHareLoopDetector</code> <code class="p">(</code><code class="nx">iterable</code><code class="p">)</code> <code class="p">{</code>
<code class="lineno">11</code>   <code class="kd">var</code> <code class="nx">tortoise</code> <code class="o">=</code> <code class="nx">iterable</code><code class="p">.</code><code class="nx">iterator</code><code class="p">(),</code>
<code class="lineno">12</code>       <code class="nx">hare</code> <code class="o">=</code> <code class="nx">iterable</code><code class="p">.</code><code class="nx">iterator</code><code class="p">(),</code> 
<code class="lineno">13</code>       <code class="nx">tortoiseValue</code><code class="p">,</code> 
<code class="lineno">14</code>       <code class="nx">hareValue</code><code class="p">;</code>
<code class="lineno">15</code>   <code class="k">while</code> <code class="p">(((</code><code class="nx">tortoiseValue</code> <code class="o">=</code> <code class="nx">tortoise</code><code class="p">())</code> <code class="o">!=</code> <code class="kc">null</code><code class="p">)</code> <code class="o">&amp;&amp;</code> <code class="p">((</code><code class="nx">hare</code><code class="p">(),</code> <code class="nx">hareValue</code> <code class="o">=</code> <code class="nx">hare</code><code class="p">())</code> <code class="o">\</code>
<code class="lineno">16</code> <code class="o">!=</code> <code class="kc">null</code><code class="p">))</code> <code class="p">{</code>
<code class="lineno">17</code>     <code class="k">if</code> <code class="p">(</code><code class="nx">tortoiseValue</code> <code class="o">===</code> <code class="nx">hareValue</code><code class="p">)</code> <code class="p">{</code>
<code class="lineno">18</code>       <code class="k">return</code> <code class="kc">true</code><code class="p">;</code>
<code class="lineno">19</code>     <code class="p">}</code>
<code class="lineno">20</code>   <code class="p">}</code>
<code class="lineno">21</code>   <code class="k">return</code> <code class="kc">false</code><code class="p">;</code>
<code class="lineno">22</code> <code class="p">};</code>
<code class="lineno">23</code> 
<code class="lineno">24</code> <code class="nx">list</code> <code class="o">=</code> <code class="k">new</code> <code class="nx">LinkedList</code><code class="p">(</code><code class="mi">5</code><code class="p">).</code><code class="nx">appendTo</code><code class="p">(</code><code class="mi">4</code><code class="p">).</code><code class="nx">appendTo</code><code class="p">(</code><code class="mi">3</code><code class="p">).</code><code class="nx">appendTo</code><code class="p">(</code><code class="mi">2</code><code class="p">).</code><code class="nx">appendTo</code><code class="p">(</code><code class="mi">1</code><code class="p">);</code>
<code class="lineno">25</code> 
<code class="lineno">26</code> <code class="nx">tortoiseAndHareLoopDetector</code><code class="p">(</code><code class="nx">list</code><code class="p">);</code>
<code class="lineno">27</code>   <code class="c1">//=&gt; false</code>
<code class="lineno">28</code> 
<code class="lineno">29</code> <code class="nx">list</code><code class="p">.</code><code class="nx">tailNode</code><code class="p">().</code><code class="nx">next</code> <code class="o">=</code> <code class="nx">list</code><code class="p">.</code><code class="nx">next</code><code class="p">;</code>
<code class="lineno">30</code> 
<code class="lineno">31</code> <code class="nx">tortoiseAndHareLoopDetector</code><code class="p">(</code><code class="nx">list</code><code class="p">);</code>
<code class="lineno">32</code>   <code class="c1">//=&gt; true</code>
</pre></div>

</div>

<p>We have now refactored it into a function that operates on anything that responds to the <code>.iterator()</code> method. It’s classic “Duck Typed” Object-Orientation. So, how shall we put it to work?</p>

<h3 id="leanpub-auto-a-drunken-walk-across-a-chequerboard">A Drunken Walk Across A Chequerboard</h3>

<p>Here’s another job interview puzzle.<sup id="fnref-yecch"><a href="#fn-yecch" rel="footnote">36</a></sup></p>

<p><em>Consider a finite checkerboard of unknown size. On each square we randomly place an arrow pointing to one of its four sides. For convenience, we shall uniformly label the directions: N, S, E, and W. A chequer is placed randomly on the checkerboard. Each move consists of moving the red chequer one square in the direction of the arrow in the square it occupies. If the arrow should cause the chequer to move off the edge of the board, the game halts.</em></p>

<p><em>As a player moves the chequer, he calls out the direction of movement, e.g. “N, E, N, S, N, E…” Write an algorithm that will determine whether the game halts strictly from the called out directions, in constant space.</em></p>

<h4 id="leanpub-auto-the-insight">the insight</h4>

<p>Our solution will rest on the observation that as the chequer follows a path, if it ever visits a square for a second time, it will cycle indefinitely without falling off the board. Otherwise, on a finite board, it must eventually fall off the board after at most visiting every square once.</p>

<p>Therefore, if we think of this as detecting whether the chequer revisits a square in constant space, we can see this is isomorphic to detecting whether a linked list has a loop by checking to see whether it revisits the same node.</p>

<h4 id="leanpub-auto-the-game">the game</h4>

<p>In essence, we’re given an object that has a <code>.iterator()</code> method. That gives us an iterator, and each time we call the iterator, we get a direction. Here it is:</p>

<div class="code-block">
<div class="highlight"><pre><code class="lineno"> 1</code> <code class="kd">var</code> <code class="nx">DIRECTION_TO_DELTA</code> <code class="o">=</code> <code class="p">{</code>
<code class="lineno"> 2</code>   <code class="nx">N</code><code class="o">:</code> <code class="p">[</code><code class="mi">1</code><code class="p">,</code> <code class="mi">0</code><code class="p">],</code>
<code class="lineno"> 3</code>   <code class="nx">E</code><code class="o">:</code> <code class="p">[</code><code class="mi">0</code><code class="p">,</code> <code class="mi">1</code><code class="p">],</code>
<code class="lineno"> 4</code>   <code class="nx">S</code><code class="o">:</code> <code class="p">[</code><code class="o">-</code><code class="mi">1</code><code class="p">,</code> <code class="mi">0</code><code class="p">],</code>
<code class="lineno"> 5</code>   <code class="nx">W</code><code class="o">:</code> <code class="p">[</code><code class="mi">0</code><code class="p">,</code> <code class="o">-</code><code class="mi">1</code><code class="p">]</code>
<code class="lineno"> 6</code> <code class="p">};</code>
<code class="lineno"> 7</code> 
<code class="lineno"> 8</code> <code class="kd">var</code> <code class="nx">Game</code> <code class="o">=</code> <code class="p">(</code><code class="kd">function</code> <code class="p">()</code> <code class="p">{</code>
<code class="lineno"> 9</code>   <code class="kd">function</code> <code class="nx">Game</code> <code class="p">(</code><code class="nx">size</code><code class="p">)</code> <code class="p">{</code>
<code class="lineno">10</code>     <code class="kd">var</code> <code class="nx">i</code><code class="p">,</code>
<code class="lineno">11</code>         <code class="nx">j</code><code class="p">;</code>
<code class="lineno">12</code>     
<code class="lineno">13</code>     <code class="k">this</code><code class="p">.</code><code class="nx">size</code> <code class="o">=</code> <code class="nx">size</code>
<code class="lineno">14</code>                 <code class="o">?</code> <code class="nb">Math</code><code class="p">.</code><code class="nx">floor</code><code class="p">(</code><code class="nb">Math</code><code class="p">.</code><code class="nx">random</code><code class="p">()</code> <code class="o">*</code> <code class="mi">8</code><code class="p">)</code> <code class="o">+</code> <code class="mi">8</code>
<code class="lineno">15</code>                 <code class="o">:</code> <code class="nx">size</code> <code class="p">;</code>
<code class="lineno">16</code>     <code class="k">this</code><code class="p">.</code><code class="nx">board</code> <code class="o">=</code> <code class="p">[];</code>
<code class="lineno">17</code>     <code class="k">for</code> <code class="p">(</code><code class="nx">i</code> <code class="o">=</code> <code class="mi">0</code><code class="p">;</code> <code class="nx">i</code> <code class="o">&lt;</code> <code class="k">this</code><code class="p">.</code><code class="nx">size</code><code class="p">;</code> <code class="o">++</code><code class="nx">i</code><code class="p">)</code> <code class="p">{</code>
<code class="lineno">18</code>       <code class="k">this</code><code class="p">.</code><code class="nx">board</code><code class="p">[</code><code class="nx">i</code><code class="p">]</code> <code class="o">=</code> <code class="p">[];</code>
<code class="lineno">19</code>       <code class="k">for</code> <code class="p">(</code><code class="nx">j</code> <code class="o">=</code> <code class="mi">0</code><code class="p">;</code> <code class="nx">j</code> <code class="o">&lt;</code> <code class="k">this</code><code class="p">.</code><code class="nx">size</code><code class="p">;</code> <code class="o">++</code><code class="nx">j</code><code class="p">)</code> <code class="p">{</code>
<code class="lineno">20</code>         <code class="k">this</code><code class="p">.</code><code class="nx">board</code><code class="p">[</code><code class="nx">i</code><code class="p">][</code><code class="nx">j</code><code class="p">]</code> <code class="o">=</code> <code class="s1">'NSEW'</code><code class="p">[</code><code class="nb">Math</code><code class="p">.</code><code class="nx">floor</code><code class="p">(</code><code class="nb">Math</code><code class="p">.</code><code class="nx">random</code><code class="p">()</code> <code class="o">*</code> <code class="mi">4</code><code class="p">)];</code>
<code class="lineno">21</code>       <code class="p">}</code>
<code class="lineno">22</code>     <code class="p">}</code>
<code class="lineno">23</code>     <code class="k">this</code><code class="p">.</code><code class="nx">initialPosition</code> <code class="o">=</code> <code class="p">[</code>
<code class="lineno">24</code>       <code class="mi">2</code> <code class="o">+</code> <code class="nb">Math</code><code class="p">.</code><code class="nx">floor</code><code class="p">(</code><code class="nb">Math</code><code class="p">.</code><code class="nx">random</code><code class="p">()</code> <code class="o">*</code> <code class="p">(</code><code class="k">this</code><code class="p">.</code><code class="nx">size</code> <code class="o">-</code> <code class="mi">4</code><code class="p">)),</code> 
<code class="lineno">25</code>       <code class="mi">2</code> <code class="o">+</code> <code class="nb">Math</code><code class="p">.</code><code class="nx">floor</code><code class="p">(</code><code class="nb">Math</code><code class="p">.</code><code class="nx">random</code><code class="p">()</code> <code class="o">*</code> <code class="p">(</code><code class="k">this</code><code class="p">.</code><code class="nx">size</code> <code class="o">-</code> <code class="mi">4</code><code class="p">))</code>
<code class="lineno">26</code>     <code class="p">];</code>
<code class="lineno">27</code>     <code class="k">return</code> <code class="k">this</code><code class="p">;</code>
<code class="lineno">28</code>   <code class="p">};</code>
<code class="lineno">29</code>   
<code class="lineno">30</code>   <code class="nx">Game</code><code class="p">.</code><code class="nx">prototype</code><code class="p">.</code><code class="nx">contains</code> <code class="o">=</code> <code class="kd">function</code> <code class="p">(</code><code class="nx">position</code><code class="p">)</code> <code class="p">{</code>
<code class="lineno">31</code>     <code class="k">return</code> <code class="nx">position</code><code class="p">[</code><code class="mi">0</code><code class="p">]</code> <code class="o">&gt;=</code> <code class="mi">0</code> <code class="o">&amp;&amp;</code> <code class="nx">position</code><code class="p">[</code><code class="mi">0</code><code class="p">]</code> <code class="o">&lt;</code> <code class="k">this</code><code class="p">.</code><code class="nx">size</code> <code class="o">&amp;&amp;</code> <code class="nx">position</code><code class="p">[</code><code class="mi">1</code><code class="p">]</code> <code class="o">&gt;=</code> <code class="mi">0</code> <code class="o">&amp;&amp;</code> <code class="nx">pos</code><code class="o">\</code>
<code class="lineno">32</code> <code class="nx">ition</code><code class="p">[</code><code class="mi">1</code><code class="p">]</code> <code class="o">&lt;</code> <code class="k">this</code><code class="p">.</code><code class="nx">size</code><code class="p">;</code>
<code class="lineno">33</code>   <code class="p">};</code>
<code class="lineno">34</code>   
<code class="lineno">35</code>   <code class="nx">Game</code><code class="p">.</code><code class="nx">prototype</code><code class="p">.</code><code class="nx">iterator</code> <code class="o">=</code> <code class="kd">function</code> <code class="p">()</code> <code class="p">{</code>
<code class="lineno">36</code>     <code class="kd">var</code> <code class="nx">position</code> <code class="o">=</code> <code class="p">[</code><code class="k">this</code><code class="p">.</code><code class="nx">initialPosition</code><code class="p">[</code><code class="mi">0</code><code class="p">],</code> <code class="k">this</code><code class="p">.</code><code class="nx">initialPosition</code><code class="p">[</code><code class="mi">1</code><code class="p">]];</code>
<code class="lineno">37</code>     <code class="k">return</code> <code class="kd">function</code> <code class="p">()</code> <code class="p">{</code>
<code class="lineno">38</code>       <code class="kd">var</code> <code class="nx">direction</code><code class="p">;</code>
<code class="lineno">39</code>       <code class="k">if</code> <code class="p">(</code><code class="k">this</code><code class="p">.</code><code class="nx">contains</code><code class="p">(</code><code class="nx">position</code><code class="p">))</code> <code class="p">{</code>
<code class="lineno">40</code>         <code class="nx">direction</code> <code class="o">=</code> <code class="k">this</code><code class="p">.</code><code class="nx">board</code><code class="p">[</code><code class="nx">position</code><code class="p">[</code><code class="mi">0</code><code class="p">]][</code><code class="nx">position</code><code class="p">[</code><code class="mi">1</code><code class="p">]];</code>
<code class="lineno">41</code>         <code class="nx">position</code><code class="p">[</code><code class="mi">0</code><code class="p">]</code> <code class="o">+=</code> <code class="nx">DIRECTION_TO_DELTA</code><code class="p">[</code><code class="nx">direction</code><code class="p">][</code><code class="mi">0</code><code class="p">];</code>
<code class="lineno">42</code>         <code class="nx">position</code><code class="p">[</code><code class="mi">1</code><code class="p">]</code> <code class="o">+=</code> <code class="nx">DIRECTION_TO_DELTA</code><code class="p">[</code><code class="nx">direction</code><code class="p">][</code><code class="mi">1</code><code class="p">];</code>
<code class="lineno">43</code>         <code class="k">return</code> <code class="nx">direction</code><code class="p">;</code>
<code class="lineno">44</code>       <code class="p">}</code>
<code class="lineno">45</code>       <code class="k">else</code> <code class="p">{</code>
<code class="lineno">46</code>         <code class="k">return</code> <code class="k">void</code> <code class="mi">0</code><code class="p">;</code>
<code class="lineno">47</code>       <code class="p">}</code>
<code class="lineno">48</code>     <code class="p">}.</code><code class="nx">bind</code><code class="p">(</code><code class="k">this</code><code class="p">);</code>
<code class="lineno">49</code>   <code class="p">};</code>
<code class="lineno">50</code>   
<code class="lineno">51</code>   <code class="k">return</code> <code class="nx">Game</code><code class="p">;</code>
<code class="lineno">52</code>   
<code class="lineno">53</code> <code class="p">})();</code>
<code class="lineno">54</code> 
<code class="lineno">55</code> <code class="kd">var</code> <code class="nx">i</code> <code class="o">=</code> <code class="k">new</code> <code class="nx">Game</code><code class="p">().</code><code class="nx">iterator</code><code class="p">();</code>
<code class="lineno">56</code>   <code class="c1">//=&gt; [Function]</code>
<code class="lineno">57</code> <code class="nx">i</code><code class="p">();</code>
<code class="lineno">58</code>   <code class="c1">//=&gt; 'N'</code>
<code class="lineno">59</code> <code class="nx">i</code><code class="p">();</code>
<code class="lineno">60</code>   <code class="c1">//=&gt; 'S'</code>
<code class="lineno">61</code> <code class="nx">i</code><code class="p">();</code>
<code class="lineno">62</code>   <code class="c1">//=&gt; 'N'</code>
<code class="lineno">63</code> <code class="nx">i</code><code class="p">();</code>
<code class="lineno">64</code>   <code class="c1">//=&gt; 'S'</code>
<code class="lineno">65</code>   <code class="c1">//   ...</code>
</pre></div>

</div>

<p>In the example above, we have the smallest possible repeating path: The chequer shuttles back and forth between two squares. It will not always be so obvious when a game does not terminate.</p>

<h4 id="leanpub-auto-stateful-mapping">stateful mapping</h4>

<p>Our goal is to transform the iteration of directions into an iteration that the Tortoise and Hare can use to detect revisiting the same square. Our approach is to convert the directions into offsets representing the position of the chequer relative to its starting position.</p>

<p>We’ll use a <code>statefulMap</code>:</p>

<div class="code-block">
<div class="highlight"><pre><code class="lineno"> 1</code> <code class="kd">function</code> <code class="nx">statefulMap</code> <code class="p">(</code><code class="nx">iter</code><code class="p">,</code> <code class="nx">binaryFn</code><code class="p">,</code> <code class="nx">initial</code><code class="p">)</code> <code class="p">{</code>
<code class="lineno"> 2</code>   <code class="kd">var</code> <code class="nx">state</code> <code class="o">=</code> <code class="nx">initial</code><code class="p">;</code>
<code class="lineno"> 3</code>   <code class="k">return</code> <code class="kd">function</code> <code class="p">()</code> <code class="p">{</code>
<code class="lineno"> 4</code>     <code class="nx">element</code> <code class="o">=</code> <code class="nx">iter</code><code class="p">();</code>
<code class="lineno"> 5</code>     <code class="k">if</code> <code class="p">(</code><code class="nx">element</code> <code class="o">==</code> <code class="kc">null</code><code class="p">)</code> <code class="p">{</code>
<code class="lineno"> 6</code>       <code class="k">return</code> <code class="nx">element</code><code class="p">;</code>
<code class="lineno"> 7</code>     <code class="p">}</code>
<code class="lineno"> 8</code>     <code class="k">else</code> <code class="p">{</code>
<code class="lineno"> 9</code>       <code class="k">if</code> <code class="p">(</code><code class="nx">state</code> <code class="o">===</code> <code class="k">void</code> <code class="mi">0</code><code class="p">)</code> <code class="p">{</code>
<code class="lineno">10</code>         <code class="k">return</code> <code class="p">(</code><code class="nx">state</code> <code class="o">=</code> <code class="nx">element</code><code class="p">);</code>
<code class="lineno">11</code>       <code class="p">}</code>
<code class="lineno">12</code>       <code class="k">else</code> <code class="k">return</code> <code class="p">(</code><code class="nx">state</code> <code class="o">=</code> <code class="nx">binaryFn</code><code class="p">.</code><code class="nx">call</code><code class="p">(</code><code class="nx">element</code><code class="p">,</code> <code class="nx">state</code><code class="p">,</code> <code class="nx">element</code><code class="p">));</code>
<code class="lineno">13</code>     <code class="p">}</code>
<code class="lineno">14</code>   <code class="p">}</code>
<code class="lineno">15</code> <code class="p">};</code>
</pre></div>

</div>

<p><code>statefulMap</code> takes in iterator and maps it to a new iterator. Unlike a “regular” map, it is computes its elements on demand, so it will not run indefinitely when given an iteration representing an infinitely looping chequer. We need a stateful map because we are tracking a position that changes over time even when given the same direction over and over again.</p>

<p>Here’s how we use <code>statefulMap</code>:</p>

<div class="code-block">
<div class="highlight"><pre><code class="lineno"> 1</code> <code class="kd">function</code> <code class="nx">RelativeIterator</code> <code class="p">(</code><code class="nx">directionIterator</code><code class="p">)</code> <code class="p">{</code>
<code class="lineno"> 2</code>   <code class="k">return</code> <code class="nx">statefulMap</code><code class="p">(</code><code class="nx">directionIterator</code><code class="p">,</code> <code class="kd">function</code> <code class="p">(</code><code class="nx">relativePositionStr</code><code class="p">,</code> <code class="nx">directionS</code><code class="o">\</code>
<code class="lineno"> 3</code> <code class="nx">tr</code><code class="p">)</code> <code class="p">{</code>
<code class="lineno"> 4</code>     <code class="kd">var</code> <code class="nx">delta</code> <code class="o">=</code> <code class="nx">DIRECTION_TO_DELTA</code><code class="p">[</code><code class="nx">directionStr</code><code class="p">],</code>
<code class="lineno"> 5</code>         <code class="nx">matchData</code> <code class="o">=</code> <code class="nx">relativePositionStr</code><code class="p">.</code><code class="nx">match</code><code class="p">(</code><code class="sr">/(-?\d+) (-?\d+)/</code><code class="p">),</code>
<code class="lineno"> 6</code>         <code class="nx">relative0</code> <code class="o">=</code> <code class="nb">parseInt</code><code class="p">(</code><code class="nx">matchData</code><code class="p">[</code><code class="mi">1</code><code class="p">],</code> <code class="mi">10</code><code class="p">),</code>
<code class="lineno"> 7</code>         <code class="nx">relative1</code> <code class="o">=</code> <code class="nb">parseInt</code><code class="p">(</code><code class="nx">matchData</code><code class="p">[</code><code class="mi">2</code><code class="p">],</code> <code class="mi">10</code><code class="p">);</code>
<code class="lineno"> 8</code>     <code class="k">return</code> <code class="s2">""</code> <code class="o">+</code> <code class="p">(</code><code class="nx">relative0</code> <code class="o">+</code> <code class="nx">delta</code><code class="p">[</code><code class="mi">0</code><code class="p">])</code> <code class="o">+</code> <code class="s2">" "</code> <code class="o">+</code> <code class="p">(</code><code class="nx">relative1</code> <code class="o">+</code> <code class="nx">delta</code><code class="p">[</code><code class="mi">1</code><code class="p">]);</code>
<code class="lineno"> 9</code>   <code class="p">},</code> <code class="s2">"0 0"</code><code class="p">);</code>
<code class="lineno">10</code> <code class="p">};</code>
<code class="lineno">11</code> 
<code class="lineno">12</code> <code class="kd">var</code> <code class="nx">i</code> <code class="o">=</code> <code class="nx">RelativeIterator</code><code class="p">(</code><code class="k">new</code> <code class="nx">Game</code><code class="p">().</code><code class="nx">iterator</code><code class="p">());</code>
<code class="lineno">13</code> <code class="nx">i</code><code class="p">();</code>
<code class="lineno">14</code>   <code class="c1">//=&gt; '-1 0'</code>
<code class="lineno">15</code> <code class="nx">i</code><code class="p">();</code>
<code class="lineno">16</code>   <code class="c1">//=&gt; '-1 -1'</code>
<code class="lineno">17</code> <code class="nx">i</code><code class="p">();</code>
<code class="lineno">18</code>   <code class="c1">//=&gt; '-2 -1'</code>
<code class="lineno">19</code> <code class="nx">i</code><code class="p">();</code>
<code class="lineno">20</code>   <code class="c1">//=&gt; '-2 0'</code>
<code class="lineno">21</code> <code class="nx">i</code><code class="p">();</code>
<code class="lineno">22</code>   <code class="c1">//=&gt; '-2 1'</code>
<code class="lineno">23</code> <code class="nx">i</code><code class="p">();</code>
<code class="lineno">24</code>   <code class="c1">//=&gt; '-3 1'</code>
<code class="lineno">25</code> <code class="nx">i</code><code class="p">();</code>
<code class="lineno">26</code>   <code class="c1">//=&gt; '-3 2'</code>
<code class="lineno">27</code> <code class="nx">i</code><code class="p">();</code>
<code class="lineno">28</code>   <code class="c1">//=&gt; '-3 3'</code>
</pre></div>

</div>

<p>We’re almost there! The refactored <code>tortoiseAndHareLoopDetector</code> expects an “iterable,” an object that implements the  <code>.iterator()</code> method. Let’s refactor <code>RelativeIterable</code> to accept a game and return an iterable instead of accepting an iteration and returning an iteration:</p>

<div class="code-block">
<div class="highlight"><pre><code class="lineno"> 1</code> <code class="kd">function</code> <code class="nx">RelativeIterable</code> <code class="p">(</code><code class="nx">game</code><code class="p">)</code> <code class="p">{</code>
<code class="lineno"> 2</code>   <code class="k">return</code> <code class="p">{</code>
<code class="lineno"> 3</code>     <code class="nx">iterator</code><code class="o">:</code> <code class="kd">function</code> <code class="p">()</code> <code class="p">{</code>
<code class="lineno"> 4</code>         <code class="k">return</code> <code class="nx">statefulMap</code><code class="p">(</code><code class="nx">game</code><code class="p">.</code><code class="nx">iterator</code><code class="p">(),</code> <code class="kd">function</code> <code class="p">(</code><code class="nx">relativePositionStr</code><code class="p">,</code> <code class="nx">direct</code><code class="o">\</code>
<code class="lineno"> 5</code> <code class="nx">ionStr</code><code class="p">)</code> <code class="p">{</code>
<code class="lineno"> 6</code>           <code class="kd">var</code> <code class="nx">delta</code> <code class="o">=</code> <code class="nx">DIRECTION_TO_DELTA</code><code class="p">[</code><code class="nx">directionStr</code><code class="p">],</code>
<code class="lineno"> 7</code>               <code class="nx">matchData</code> <code class="o">=</code> <code class="nx">relativePositionStr</code><code class="p">.</code><code class="nx">match</code><code class="p">(</code><code class="sr">/(-?\d+) (-?\d+)/</code><code class="p">),</code>
<code class="lineno"> 8</code>               <code class="nx">relative0</code> <code class="o">=</code> <code class="nb">parseInt</code><code class="p">(</code><code class="nx">matchData</code><code class="p">[</code><code class="mi">1</code><code class="p">],</code> <code class="mi">10</code><code class="p">),</code>
<code class="lineno"> 9</code>               <code class="nx">relative1</code> <code class="o">=</code> <code class="nb">parseInt</code><code class="p">(</code><code class="nx">matchData</code><code class="p">[</code><code class="mi">2</code><code class="p">],</code> <code class="mi">10</code><code class="p">);</code>
<code class="lineno">10</code>           <code class="k">return</code> <code class="s2">""</code> <code class="o">+</code> <code class="p">(</code><code class="nx">relative0</code> <code class="o">+</code> <code class="nx">delta</code><code class="p">[</code><code class="mi">0</code><code class="p">])</code> <code class="o">+</code> <code class="s2">" "</code> <code class="o">+</code> <code class="p">(</code><code class="nx">relative1</code> <code class="o">+</code> <code class="nx">delta</code><code class="p">[</code><code class="mi">1</code><code class="p">]);</code>
<code class="lineno">11</code>         <code class="p">},</code> <code class="s2">"0 0"</code><code class="p">);</code>
<code class="lineno">12</code>     <code class="p">}</code>
<code class="lineno">13</code>   <code class="p">};</code>
<code class="lineno">14</code> <code class="p">};</code>
<code class="lineno">15</code> 
<code class="lineno">16</code> <code class="kd">var</code> <code class="nx">i</code> <code class="o">=</code> <code class="nx">RelativeIterable</code><code class="p">(</code><code class="k">new</code> <code class="nx">Game</code><code class="p">()).</code><code class="nx">iterator</code><code class="p">();</code>
<code class="lineno">17</code> <code class="nx">i</code><code class="p">();</code>
<code class="lineno">18</code>   <code class="c1">//=&gt; '0 -1'</code>
<code class="lineno">19</code> <code class="nx">i</code><code class="p">();</code>
<code class="lineno">20</code>   <code class="c1">//=&gt; '1 -1'</code>
<code class="lineno">21</code> <code class="nx">i</code><code class="p">();</code>
<code class="lineno">22</code>   <code class="c1">//=&gt; '1 0'</code>
<code class="lineno">23</code> <code class="nx">i</code><code class="p">();</code>
<code class="lineno">24</code>   <code class="c1">//=&gt; '2 0'</code>
<code class="lineno">25</code> <code class="nx">i</code><code class="p">();</code>
<code class="lineno">26</code>   <code class="c1">//=&gt; undefined</code>
</pre></div>

</div>

<h4 id="leanpub-auto-the-solution">the solution</h4>

<p>So. We can take a <code>Game</code> instance and produce an iterable that iterates over regular strings representing relative positions. If it terminates on its own, the game obviously terminates. And if it repeats itself, the game does not terminate.</p>

<p>Our refactored <code>tortoiseAndHareLoopDetector</code> takes an iterable and detects this for us. Writing a detector function is trivial:</p>

<div class="code-block">
<div class="highlight"><pre><code class="lineno"> 1</code> <code class="kd">function</code> <code class="nx">terminates</code> <code class="p">(</code><code class="nx">game</code><code class="p">)</code> <code class="p">{</code>
<code class="lineno"> 2</code>   <code class="k">return</code> <code class="o">!</code><code class="nx">tortoiseAndHareLoopDetector</code><code class="p">(</code><code class="nx">RelativeIterable</code><code class="p">(</code><code class="nx">game</code><code class="p">));</code>
<code class="lineno"> 3</code> <code class="p">}</code>
<code class="lineno"> 4</code> 
<code class="lineno"> 5</code> <code class="nx">terminates</code><code class="p">(</code><code class="k">new</code> <code class="nx">Game</code><code class="p">(</code><code class="mi">4</code><code class="p">));</code>
<code class="lineno"> 6</code>   <code class="c1">//=&gt; false</code>
<code class="lineno"> 7</code> <code class="nx">terminates</code><code class="p">(</code><code class="k">new</code> <code class="nx">Game</code><code class="p">(</code><code class="mi">4</code><code class="p">));</code>
<code class="lineno"> 8</code>   <code class="c1">//=&gt; true</code>
<code class="lineno"> 9</code> <code class="nx">terminates</code><code class="p">(</code><code class="k">new</code> <code class="nx">Game</code><code class="p">(</code><code class="mi">4</code><code class="p">));</code>
<code class="lineno">10</code>   <code class="c1">//=&gt; false</code>
<code class="lineno">11</code> <code class="nx">terminates</code><code class="p">(</code><code class="k">new</code> <code class="nx">Game</code><code class="p">(</code><code class="mi">4</code><code class="p">));</code>
<code class="lineno">12</code>   <code class="c1">//=&gt; false</code>
</pre></div>

</div>

<h4 id="leanpub-auto-preliminary-conclusion">preliminary conclusion</h4>

<p>Untangling the mechanism of following a linked list from the algorithm of searching for a loop allows us to repurpose the Tortoise and Hare algorithm to solve a question about a path looping.</p>

<h4 id="leanpub-auto-no-charge-extra-conclusion">no-charge extra conclusion</h4>

<p>Can we also refactor the “Teleporting Turtle” algorithm to take an iterable? If so, we should be able to swap algorithms for our game termination detection without rewriting everything in sight. Let’s try it:</p>

<p>We start with:</p>

<div class="code-block">
<div class="highlight"><pre><code class="lineno"> 1</code> <code class="kd">function</code> <code class="nx">teleportingTurtleLoopDetector</code> <code class="p">(</code><code class="nx">list</code><code class="p">)</code> <code class="p">{</code>
<code class="lineno"> 2</code>   <code class="kd">var</code> <code class="nx">i</code><code class="p">,</code> <code class="nx">rabbit</code><code class="p">,</code> <code class="nx">speed</code><code class="p">,</code> <code class="nx">turtle</code><code class="p">;</code>
<code class="lineno"> 3</code>   <code class="nx">speed</code> <code class="o">=</code> <code class="mi">1</code><code class="p">;</code>
<code class="lineno"> 4</code>   <code class="nx">turtle</code> <code class="o">=</code> <code class="nx">rabbit</code> <code class="o">=</code> <code class="nx">list</code><code class="p">;</code>
<code class="lineno"> 5</code>   <code class="k">while</code> <code class="p">(</code><code class="kc">true</code><code class="p">)</code> <code class="p">{</code>
<code class="lineno"> 6</code>     <code class="k">for</code> <code class="p">(</code><code class="nx">i</code> <code class="o">=</code> <code class="mi">0</code><code class="p">;</code> <code class="nx">i</code> <code class="o">&lt;=</code> <code class="nx">speed</code><code class="p">;</code> <code class="nx">i</code> <code class="o">+=</code> <code class="mi">1</code><code class="p">)</code> <code class="p">{</code>
<code class="lineno"> 7</code>       <code class="nx">rabbit</code> <code class="o">=</code> <code class="nx">rabbit</code><code class="p">.</code><code class="nx">next</code><code class="p">;</code>
<code class="lineno"> 8</code>       <code class="k">if</code> <code class="p">(</code><code class="nx">rabbit</code> <code class="o">==</code> <code class="kc">null</code><code class="p">)</code> <code class="p">{</code>
<code class="lineno"> 9</code>         <code class="k">return</code> <code class="kc">false</code><code class="p">;</code>
<code class="lineno">10</code>       <code class="p">}</code>
<code class="lineno">11</code>       <code class="k">if</code> <code class="p">(</code><code class="nx">rabbit</code> <code class="o">===</code> <code class="nx">turtle</code><code class="p">)</code> <code class="p">{</code>
<code class="lineno">12</code>         <code class="k">return</code> <code class="kc">true</code><code class="p">;</code>
<code class="lineno">13</code>       <code class="p">}</code>
<code class="lineno">14</code>     <code class="p">}</code>
<code class="lineno">15</code>     <code class="nx">turtle</code> <code class="o">=</code> <code class="nx">rabbit</code><code class="p">;</code>
<code class="lineno">16</code>     <code class="nx">speed</code> <code class="o">*=</code> <code class="mi">2</code><code class="p">;</code>
<code class="lineno">17</code>   <code class="p">}</code>
<code class="lineno">18</code>   <code class="k">return</code> <code class="kc">false</code><code class="p">;</code>
<code class="lineno">19</code> <code class="p">};</code>
<code class="lineno">20</code> 
<code class="lineno">21</code> <code class="nx">list</code> <code class="o">=</code> <code class="k">new</code> <code class="nx">LinkedList</code><code class="p">(</code><code class="mi">5</code><code class="p">).</code><code class="nx">appendTo</code><code class="p">(</code><code class="mi">4</code><code class="p">).</code><code class="nx">appendTo</code><code class="p">(</code><code class="mi">3</code><code class="p">).</code><code class="nx">appendTo</code><code class="p">(</code><code class="mi">2</code><code class="p">).</code><code class="nx">appendTo</code><code class="p">(</code><code class="mi">1</code><code class="p">);</code>
<code class="lineno">22</code> 
<code class="lineno">23</code> <code class="nx">teleportingTurtleLoopDetector</code><code class="p">(</code><code class="nx">list</code><code class="p">);</code>
<code class="lineno">24</code>   <code class="c1">//=&gt; false</code>
<code class="lineno">25</code> 
<code class="lineno">26</code> <code class="nx">list</code><code class="p">.</code><code class="nx">tailNode</code><code class="p">().</code><code class="nx">next</code> <code class="o">=</code> <code class="nx">list</code><code class="p">.</code><code class="nx">next</code><code class="p">;</code>
<code class="lineno">27</code> 
<code class="lineno">28</code> <code class="nx">teleportingTurtleLoopDetector</code><code class="p">(</code><code class="nx">list</code><code class="p">);</code>
<code class="lineno">29</code>   <code class="c1">//=&gt; true</code>
</pre></div>

</div>

<p>And refactor it to become:</p>

<div class="code-block">
<div class="highlight"><pre><code class="lineno"> 1</code> <code class="kd">function</code> <code class="nx">teleportingTurtleLoopDetector</code> <code class="p">(</code><code class="nx">iterable</code><code class="p">)</code> <code class="p">{</code>
<code class="lineno"> 2</code>   <code class="kd">var</code> <code class="nx">i</code><code class="p">,</code> <code class="nx">rabbit</code><code class="p">,</code> <code class="nx">rabbitValue</code><code class="p">,</code> <code class="nx">speed</code><code class="p">,</code> <code class="nx">turtleValue</code><code class="p">;</code>
<code class="lineno"> 3</code>   <code class="nx">speed</code> <code class="o">=</code> <code class="mi">1</code><code class="p">;</code>
<code class="lineno"> 4</code>   <code class="nx">rabbit</code> <code class="o">=</code> <code class="nx">iterable</code><code class="p">.</code><code class="nx">iterator</code><code class="p">();</code>
<code class="lineno"> 5</code>   <code class="nx">turtleValue</code> <code class="o">=</code> <code class="nx">rabbitValue</code> <code class="o">=</code> <code class="nx">rabbit</code><code class="p">();</code>
<code class="lineno"> 6</code>   <code class="k">while</code> <code class="p">(</code><code class="kc">true</code><code class="p">)</code> <code class="p">{</code>
<code class="lineno"> 7</code>     <code class="k">for</code> <code class="p">(</code><code class="nx">i</code> <code class="o">=</code> <code class="mi">0</code><code class="p">;</code> <code class="nx">i</code> <code class="o">&lt;=</code> <code class="nx">speed</code><code class="p">;</code> <code class="nx">i</code> <code class="o">+=</code> <code class="mi">1</code><code class="p">)</code> <code class="p">{</code>
<code class="lineno"> 8</code>       <code class="nx">rabbitValue</code> <code class="o">=</code> <code class="nx">rabbit</code><code class="p">();</code>
<code class="lineno"> 9</code>       <code class="k">if</code> <code class="p">(</code><code class="nx">rabbitValue</code> <code class="o">==</code> <code class="kc">null</code><code class="p">)</code> <code class="p">{</code>
<code class="lineno">10</code>         <code class="k">return</code> <code class="kc">false</code><code class="p">;</code>
<code class="lineno">11</code>       <code class="p">}</code>
<code class="lineno">12</code>       <code class="k">if</code> <code class="p">(</code><code class="nx">rabbitValue</code> <code class="o">===</code> <code class="nx">turtleValue</code><code class="p">)</code> <code class="p">{</code>
<code class="lineno">13</code>         <code class="k">return</code> <code class="kc">true</code><code class="p">;</code>
<code class="lineno">14</code>       <code class="p">}</code>
<code class="lineno">15</code>     <code class="p">}</code>
<code class="lineno">16</code>     <code class="nx">turtleValue</code> <code class="o">=</code> <code class="nx">rabbitValue</code><code class="p">;</code>
<code class="lineno">17</code>     <code class="nx">speed</code> <code class="o">*=</code> <code class="mi">2</code><code class="p">;</code>
<code class="lineno">18</code>   <code class="p">}</code>
<code class="lineno">19</code>   <code class="k">return</code> <code class="kc">false</code><code class="p">;</code>
<code class="lineno">20</code> <code class="p">};</code>
<code class="lineno">21</code> 
<code class="lineno">22</code> <code class="nx">list</code> <code class="o">=</code> <code class="k">new</code> <code class="nx">LinkedList</code><code class="p">(</code><code class="mi">5</code><code class="p">).</code><code class="nx">appendTo</code><code class="p">(</code><code class="mi">4</code><code class="p">).</code><code class="nx">appendTo</code><code class="p">(</code><code class="mi">3</code><code class="p">).</code><code class="nx">appendTo</code><code class="p">(</code><code class="mi">2</code><code class="p">).</code><code class="nx">appendTo</code><code class="p">(</code><code class="mi">1</code><code class="p">);</code>
<code class="lineno">23</code> 
<code class="lineno">24</code> <code class="nx">teleportingTurtleLoopDetector</code><code class="p">(</code><code class="nx">list</code><code class="p">);</code>
<code class="lineno">25</code>   <code class="c1">//=&gt; false</code>
<code class="lineno">26</code> 
<code class="lineno">27</code> <code class="nx">list</code><code class="p">.</code><code class="nx">tailNode</code><code class="p">().</code><code class="nx">next</code> <code class="o">=</code> <code class="nx">list</code><code class="p">.</code><code class="nx">next</code><code class="p">;</code>
<code class="lineno">28</code> 
<code class="lineno">29</code> <code class="nx">teleportingTurtleLoopDetector</code><code class="p">(</code><code class="nx">list</code><code class="p">);</code>
<code class="lineno">30</code>   <code class="c1">//=&gt; true</code>
</pre></div>

</div>

<p>Now we can plug it into our termination detector:</p>

<div class="code-block">
<div class="highlight"><pre><code class="lineno"> 1</code> <code class="kd">function</code> <code class="nx">terminates</code> <code class="p">(</code><code class="nx">game</code><code class="p">)</code> <code class="p">{</code>
<code class="lineno"> 2</code>   <code class="k">return</code> <code class="o">!</code><code class="nx">teleportingTurtleLoopDetector</code><code class="p">(</code><code class="nx">RelativeIterable</code><code class="p">(</code><code class="nx">game</code><code class="p">));</code>
<code class="lineno"> 3</code> <code class="p">}</code>
<code class="lineno"> 4</code> 
<code class="lineno"> 5</code> <code class="nx">terminates</code><code class="p">(</code><code class="k">new</code> <code class="nx">Game</code><code class="p">(</code><code class="mi">4</code><code class="p">));</code>
<code class="lineno"> 6</code>   <code class="c1">//=&gt; false</code>
<code class="lineno"> 7</code> <code class="nx">terminates</code><code class="p">(</code><code class="k">new</code> <code class="nx">Game</code><code class="p">(</code><code class="mi">4</code><code class="p">));</code>
<code class="lineno"> 8</code>   <code class="c1">//=&gt; false</code>
<code class="lineno"> 9</code> <code class="nx">terminates</code><code class="p">(</code><code class="k">new</code> <code class="nx">Game</code><code class="p">(</code><code class="mi">4</code><code class="p">));</code>
<code class="lineno">10</code>   <code class="c1">//=&gt; false</code>
<code class="lineno">11</code> <code class="nx">terminates</code><code class="p">(</code><code class="k">new</code> <code class="nx">Game</code><code class="p">(</code><code class="mi">4</code><code class="p">));</code>
<code class="lineno">12</code>   <code class="c1">//=&gt; false</code>
<code class="lineno">13</code> <code class="nx">terminates</code><code class="p">(</code><code class="k">new</code> <code class="nx">Game</code><code class="p">(</code><code class="mi">4</code><code class="p">));</code>
<code class="lineno">14</code>   <code class="c1">//=&gt; true</code>
</pre></div>

</div>

<p>Refactoring an algorithm to work with iterators allows us to use the same algorithm to solve different problems and to swap algorithms for the same problem. This is natural, we have created an abstraction that allows us to plug different items into either side of of its interface.</p>

<h3 id="trampolining">Trampolining</h3>

<blockquote>
  <p>A trampoline is a loop that iteratively invokes <a href="https://en.wikipedia.org/wiki/Thunk_" title="functional_programming">thunk</a>-returning functions (<a href="https://en.wikipedia.org/wiki/Continuation-passing_style">continuation-passing style</a>). A single trampoline is sufficient to express all control transfers of a program; a program so expressed is trampolined, or in trampolined style; converting a program to trampolined style is trampolining. Trampolined functions can be used to implement <a href="https://en.wikipedia.org/wiki/Tail-recursive_function">tail-recursive</a> function calls in stack-oriented programming languages.–<a href="https://en.wikipedia.org/wiki/Trampoline_" title="computing">Wikipedia</a></p>
</blockquote>

<p>This description is exactly how one ought to answer the question “define trampolining” on an examination, because it demonstrates that you’ve learned the subject thoroughly. But if asked to <em>explain</em> trampolining, a more tutorial-focused approach is called for.</p>

<p>Let’s begin with a use case.</p>

<h4 id="leanpub-auto-recursion-see-recursion">recursion, see recursion</h4>

<p>Consider implementing <code>factorial</code> in recursive style:</p>

<div class="code-block">
<div class="highlight"><pre><code class="lineno">1</code> <code class="kd">function</code> <code class="nx">factorial</code> <code class="p">(</code><code class="nx">n</code><code class="p">)</code> <code class="p">{</code>
<code class="lineno">2</code>   <code class="k">return</code> <code class="nx">n</code>
<code class="lineno">3</code>   <code class="o">?</code> <code class="nx">n</code> <code class="o">*</code> <code class="nx">factorial</code><code class="p">(</code><code class="nx">n</code> <code class="o">-</code> <code class="mi">1</code><code class="p">)</code>
<code class="lineno">4</code>   <code class="o">:</code> <code class="mi">1</code>
<code class="lineno">5</code> <code class="p">}</code>
</pre></div>

</div>

<p>The immediate limitation of this implementation is that since it calls itself <em>n</em> times, to get a result you need a stack on <em>n</em> stack frames in a typical stack-based programming language implementation. And JavaScript is such an implementation.</p>

<p>This creates two problems: First, we need space O<em>n</em> for all those stack frames. It’s as if we actually wrote out <code>1 x 1 x 2 x 3 x 4 x ...</code> before doing any calculations. Second, most languages have a limit on the size of the stack much smaller than the limit on the amount of memory you need for data.</p>

<p>For example:</p>

<div class="code-block">
<div class="highlight"><pre><code class="lineno">1</code> <code class="n">factorial</code><code class="p">(</code><code class="mi">10</code><code class="p">)</code>
<code class="lineno">2</code>   <code class="c1">//=&gt; 3628800</code>
<code class="lineno">3</code> <code class="n">factorial</code><code class="p">(</code><code class="mi">32768</code><code class="p">)</code>
<code class="lineno">4</code>   <code class="c1">//=&gt; RangeError: Maximum call stack size exceeded</code>
</pre></div>

</div>

<p>We can easily rewrite this in iterative style, but there are other functions that aren’t so amenable to rewriting and using a simple example allows us to concentrate on the mechanism rather than the “domain.”</p>

<h4 id="leanpub-auto-tail-call-elimination">tail-call elimination</h4>

<p>Lisp programmers in days of yore would rewrite functions like this into “Tail Recursive Form,” and that made it possible for their compilers to perform <a href="https://en.wikipedia.org/wiki/Tail-call_optimization">Tail-Call Optimization</a>. Meaning, that when a function returns the result of calling itself, the language doesn’t actually perform another function call, it turns the whole thing into a loop for you.</p>

<p>What we need to do is take the expression <code>n * factorial(n - 1)</code> and push it down into a function so we can just call it with parameters. When a function is called, a <em>stack frame</em> is created that contains all the information needed to resume execution with the result. Stack frames hold a kind of pointer to where to carry on evaluating, the function parameters, and other bookkeeping information.<sup id="fnref-bookkeeping"><a href="#fn-bookkeeping" rel="footnote">37</a></sup></p>

<p>If we use the symbol <code>_</code> to represent a kind of “hole” in an expression where we plan to put the result, every time <code>factorial</code> calls itself, it needs to remember <code>n * _</code> so that when it gets a result back, it can multiply it by <code>n</code> and return that. So the first time it calls itself, it remembers <code>10 * _</code>, the second time it calls itself, it remembers <code>9 * _</code>, and all these things stack up like this when we call <code>factorial(10)</code>:</p>

<div class="code-block">
<div class="highlight"><pre><code class="lineno"> 1</code>  <code class="mi">1</code> <code class="o">*</code> <code class="n">_</code>
<code class="lineno"> 2</code>  <code class="mi">2</code> <code class="o">*</code> <code class="n">_</code>
<code class="lineno"> 3</code>  <code class="mi">3</code> <code class="o">*</code> <code class="n">_</code>
<code class="lineno"> 4</code>  <code class="mi">4</code> <code class="o">*</code> <code class="n">_</code>
<code class="lineno"> 5</code>  <code class="mi">5</code> <code class="o">*</code> <code class="n">_</code>
<code class="lineno"> 6</code>  <code class="mi">6</code> <code class="o">*</code> <code class="n">_</code>
<code class="lineno"> 7</code>  <code class="mi">7</code> <code class="o">*</code> <code class="n">_</code>
<code class="lineno"> 8</code>  <code class="mi">8</code> <code class="o">*</code> <code class="n">_</code>
<code class="lineno"> 9</code>  <code class="mi">9</code> <code class="o">*</code> <code class="n">_</code>
<code class="lineno">10</code> <code class="mi">10</code> <code class="o">*</code> <code class="n">_</code>
</pre></div>

</div>

<p>Finally, we call <code>factorial(0)</code> and it returns <code>1</code>. Then the top is popped off the stack, so we calculate <code>1 * 1</code>. It returns <code>1</code> again and we calculate <code>2 * 1</code>. That returns <code>2</code> and we calculate <code>3 * 2</code> and so on up the stack until we return <code>10 * 362880</code> and return <code>3628800</code>, which we print.</p>

<p>How can we get around this? Well, imagine if we don’t have a hole in a computation to return. In that case, we wouldn’t need to “remember” anything on the stack. To make this happen, we need to either return a value or return the result of calling another function without any further computation.</p>

<p>Such a call is said to be in “tail position” and to be a “tail call.” The “elimination” of tail-call elimination means that we don’t perform a full call including setting up a new stack frame. We perform the equivalent of a “jump.” </p>

<p>For example:</p>

<div class="code-block">
<div class="highlight"><pre><code class="lineno">1</code> <code class="kd">function</code> <code class="nx">factorial</code> <code class="p">(</code><code class="nx">n</code><code class="p">)</code> <code class="p">{</code>
<code class="lineno">2</code>   <code class="kd">var</code> <code class="nx">_factorial</code> <code class="o">=</code> <code class="kd">function</code> <code class="nx">myself</code> <code class="p">(</code><code class="nx">acc</code><code class="p">,</code> <code class="nx">n</code><code class="p">)</code> <code class="p">{</code>
<code class="lineno">3</code>     <code class="k">return</code> <code class="nx">n</code>
<code class="lineno">4</code>     <code class="o">?</code> <code class="nx">myself</code><code class="p">(</code><code class="nx">acc</code> <code class="o">*</code> <code class="nx">n</code><code class="p">,</code> <code class="nx">n</code> <code class="o">-</code> <code class="mi">1</code><code class="p">)</code>
<code class="lineno">5</code>     <code class="o">:</code> <code class="nx">acc</code>
<code class="lineno">6</code>   <code class="p">};</code>
<code class="lineno">7</code>   
<code class="lineno">8</code>   <code class="k">return</code> <code class="nx">_factorial</code><code class="p">(</code><code class="mi">1</code><code class="p">,</code> <code class="nx">n</code><code class="p">);</code>
<code class="lineno">9</code> <code class="p">}</code>
</pre></div>

</div>

<p>Now our function either returns a value or it returns the result of calling another function without doing anything with that result. This gives us the correct results, but we can see that current implementations of JavaScript don’t perform this magic “tail-call elimination.”</p>

<div class="code-block">
<div class="highlight"><pre><code class="lineno">1</code> <code class="n">factorial</code><code class="p">(</code><code class="mi">10</code><code class="p">)</code>
<code class="lineno">2</code>   <code class="c1">//=&gt; 3628800</code>
<code class="lineno">3</code> <code class="n">factorial</code><code class="p">(</code><code class="mi">32768</code><code class="p">)</code>
<code class="lineno">4</code>   <code class="c1">//=&gt; RangeError: Maximum call stack size exceeded</code>
</pre></div>

</div>

<p>So we’ll do it ourselves.</p>

<h4 id="leanpub-auto-trampolining">trampolining</h4>

<p>One way to implement tail-call elimination is also handy for many other general things we might want to do with control flow, it’s called <em>trampolining</em>. What we do is this:</p>

<p>When we call a function, it returns a <em>thunk</em> that we call to get a result. Of course, the thunk can return another thunk, so every time we get a result, we check to see if it’s a thunk. If not, we have our final result.</p>

<p>A <em>thunk</em> is a function taking no arguments that delays evaluating an expression. For example, this is a thunk: <code>function () { return 'Hello World'; }</code>.</p>

<p>An extremely simple and useful implementation of trampolining can be found in the <a href="http://fogus.github.com/lemonad/">Lemonad</a> library. It works provided that you want to trampoline a function that doesn’t return a function. Here it is: </p>

<div class="code-block">
<div class="highlight"><pre><code class="lineno">1</code> <code class="nx">L</code><code class="p">.</code><code class="nx">trampoline</code> <code class="o">=</code> <code class="kd">function</code><code class="p">(</code><code class="nx">fun</code> <code class="cm">/*, args */</code><code class="p">)</code> <code class="p">{</code>
<code class="lineno">2</code>   <code class="kd">var</code> <code class="nx">result</code> <code class="o">=</code> <code class="nx">fun</code><code class="p">.</code><code class="nx">apply</code><code class="p">(</code><code class="nx">fun</code><code class="p">,</code> <code class="nx">_</code><code class="p">.</code><code class="nx">rest</code><code class="p">(</code><code class="nx">arguments</code><code class="p">));</code>
<code class="lineno">3</code> 
<code class="lineno">4</code>   <code class="k">while</code> <code class="p">(</code><code class="nx">_</code><code class="p">.</code><code class="nx">isFunction</code><code class="p">(</code><code class="nx">result</code><code class="p">))</code> <code class="p">{</code>
<code class="lineno">5</code>     <code class="nx">result</code> <code class="o">=</code> <code class="nx">result</code><code class="p">();</code>
<code class="lineno">6</code>   <code class="p">}</code>
<code class="lineno">7</code> 
<code class="lineno">8</code>   <code class="k">return</code> <code class="nx">result</code><code class="p">;</code>
<code class="lineno">9</code> <code class="p">};</code>
</pre></div>

</div>

<p>We’ll rewrite it in combinatorial style for consistency and composeability:</p>

<div class="code-block">
<div class="highlight"><pre><code class="lineno"> 1</code> <code class="kd">var</code> <code class="nx">trampoline</code> <code class="o">=</code> <code class="kd">function</code> <code class="p">(</code><code class="nx">fn</code><code class="p">)</code> <code class="p">{</code>
<code class="lineno"> 2</code>   <code class="k">return</code> <code class="nx">variadic</code><code class="p">(</code> <code class="kd">function</code> <code class="p">(</code><code class="nx">args</code><code class="p">)</code> <code class="p">{</code>
<code class="lineno"> 3</code>     <code class="kd">var</code> <code class="nx">result</code> <code class="o">=</code> <code class="nx">fn</code><code class="p">.</code><code class="nx">apply</code><code class="p">(</code><code class="k">this</code><code class="p">,</code> <code class="nx">args</code><code class="p">);</code>
<code class="lineno"> 4</code> 
<code class="lineno"> 5</code>     <code class="k">while</code> <code class="p">(</code><code class="nx">result</code> <code class="k">instanceof</code> <code class="nb">Function</code><code class="p">)</code> <code class="p">{</code>
<code class="lineno"> 6</code>       <code class="nx">result</code> <code class="o">=</code> <code class="nx">result</code><code class="p">();</code>
<code class="lineno"> 7</code>     <code class="p">}</code>
<code class="lineno"> 8</code> 
<code class="lineno"> 9</code>     <code class="k">return</code> <code class="nx">result</code><code class="p">;</code>
<code class="lineno">10</code>   <code class="p">});</code>
<code class="lineno">11</code> <code class="p">};</code>
</pre></div>

</div>

<p>Now here’s our implementation of <code>factorial</code> that is wrapped around a trampolined tail recursive function:</p>

<div class="code-block">
<div class="highlight"><pre><code class="lineno"> 1</code> <code class="kd">function</code> <code class="nx">factorial</code> <code class="p">(</code><code class="nx">n</code><code class="p">)</code> <code class="p">{</code>
<code class="lineno"> 2</code>   <code class="kd">var</code> <code class="nx">_factorial</code> <code class="o">=</code> <code class="nx">trampoline</code><code class="p">(</code> <code class="kd">function</code> <code class="nx">myself</code> <code class="p">(</code><code class="nx">acc</code><code class="p">,</code> <code class="nx">n</code><code class="p">)</code> <code class="p">{</code>
<code class="lineno"> 3</code>     <code class="k">return</code> <code class="nx">n</code>
<code class="lineno"> 4</code>     <code class="o">?</code> <code class="kd">function</code> <code class="p">()</code> <code class="p">{</code> <code class="k">return</code> <code class="nx">myself</code><code class="p">(</code><code class="nx">acc</code> <code class="o">*</code> <code class="nx">n</code><code class="p">,</code> <code class="nx">n</code> <code class="o">-</code> <code class="mi">1</code><code class="p">);</code> <code class="p">}</code>
<code class="lineno"> 5</code>     <code class="o">:</code> <code class="nx">acc</code>
<code class="lineno"> 6</code>   <code class="p">});</code>
<code class="lineno"> 7</code>   
<code class="lineno"> 8</code>   <code class="k">return</code> <code class="nx">_factorial</code><code class="p">(</code><code class="mi">1</code><code class="p">,</code> <code class="nx">n</code><code class="p">);</code>
<code class="lineno"> 9</code> <code class="p">}</code>
<code class="lineno">10</code> 
<code class="lineno">11</code> <code class="nx">factorial</code><code class="p">(</code><code class="mi">10</code><code class="p">);</code>
<code class="lineno">12</code>   <code class="c1">//=&gt; 362800</code>
<code class="lineno">13</code> <code class="nx">factorial</code><code class="p">(</code><code class="mi">32768</code><code class="p">);</code>
<code class="lineno">14</code>   <code class="c1">//=&gt; Infinity</code>
</pre></div>

</div>

<p>Presto, it runs for <code>n = 32768</code>. Sadly, JavaScript’s built-in support for integers cannot keep up, so we’d better fix the “infinity” problem with a “big integer” library:<sup id="fnref-big"><a href="#fn-big" rel="footnote">38</a></sup></p>

<div class="code-block">
<div class="highlight"><pre><code class="lineno"> 1</code> <code class="nx">npm</code> <code class="nx">install</code> <code class="nx">big</code><code class="o">-</code><code class="nx">integer</code>
<code class="lineno"> 2</code> 
<code class="lineno"> 3</code> <code class="kd">var</code> <code class="nx">variadic</code> <code class="o">=</code> <code class="nx">require</code><code class="p">(</code><code class="s1">'allong.es'</code><code class="p">).</code><code class="nx">variadic</code><code class="p">,</code>
<code class="lineno"> 4</code>     <code class="nx">bigInt</code> <code class="o">=</code> <code class="nx">require</code><code class="p">(</code><code class="s2">"big-integer"</code><code class="p">);</code>
<code class="lineno"> 5</code> 
<code class="lineno"> 6</code> <code class="kd">var</code> <code class="nx">trampoline</code> <code class="o">=</code> <code class="kd">function</code> <code class="p">(</code><code class="nx">fn</code><code class="p">)</code> <code class="p">{</code>
<code class="lineno"> 7</code>   <code class="k">return</code> <code class="nx">variadic</code><code class="p">(</code> <code class="kd">function</code> <code class="p">(</code><code class="nx">args</code><code class="p">)</code> <code class="p">{</code>
<code class="lineno"> 8</code>     <code class="kd">var</code> <code class="nx">result</code> <code class="o">=</code> <code class="nx">fn</code><code class="p">.</code><code class="nx">apply</code><code class="p">(</code><code class="k">this</code><code class="p">,</code> <code class="nx">args</code><code class="p">);</code>
<code class="lineno"> 9</code> 
<code class="lineno">10</code>     <code class="k">while</code> <code class="p">(</code><code class="nx">result</code> <code class="k">instanceof</code> <code class="nb">Function</code><code class="p">)</code> <code class="p">{</code>
<code class="lineno">11</code>       <code class="nx">result</code> <code class="o">=</code> <code class="nx">result</code><code class="p">();</code>
<code class="lineno">12</code>     <code class="p">}</code>
<code class="lineno">13</code> 
<code class="lineno">14</code>     <code class="k">return</code> <code class="nx">result</code><code class="p">;</code>
<code class="lineno">15</code>     
<code class="lineno">16</code>   <code class="p">});</code>
<code class="lineno">17</code> <code class="p">};</code>
<code class="lineno">18</code> 
<code class="lineno">19</code> <code class="kd">function</code> <code class="nx">factorial</code> <code class="p">(</code><code class="nx">n</code><code class="p">)</code> <code class="p">{</code>
<code class="lineno">20</code>   <code class="kd">var</code> <code class="nx">_factorial</code> <code class="o">=</code> <code class="nx">trampoline</code><code class="p">(</code> <code class="kd">function</code> <code class="nx">myself</code> <code class="p">(</code><code class="nx">acc</code><code class="p">,</code> <code class="nx">n</code><code class="p">)</code> <code class="p">{</code>
<code class="lineno">21</code>     <code class="k">return</code> <code class="nx">n</code><code class="p">.</code><code class="nx">greater</code><code class="p">(</code><code class="mi">0</code><code class="p">)</code>
<code class="lineno">22</code>     <code class="o">?</code> <code class="kd">function</code> <code class="p">()</code> <code class="p">{</code> <code class="k">return</code> <code class="nx">myself</code><code class="p">(</code><code class="nx">acc</code><code class="p">.</code><code class="nx">times</code><code class="p">(</code><code class="nx">n</code><code class="p">),</code> <code class="nx">n</code><code class="p">.</code><code class="nx">minus</code><code class="p">(</code><code class="mi">1</code><code class="p">));</code> <code class="p">}</code>
<code class="lineno">23</code>     <code class="o">:</code> <code class="nx">acc</code>
<code class="lineno">24</code>   <code class="p">});</code>
<code class="lineno">25</code>   
<code class="lineno">26</code>   <code class="k">return</code> <code class="nx">_factorial</code><code class="p">(</code><code class="nx">bigInt</code><code class="p">.</code><code class="nx">one</code><code class="p">,</code> <code class="nx">bigInt</code><code class="p">(</code><code class="nx">n</code><code class="p">));</code>
<code class="lineno">27</code> <code class="p">}</code>
<code class="lineno">28</code> 
<code class="lineno">29</code> <code class="nx">factorial</code><code class="p">(</code><code class="mi">10</code><code class="p">).</code><code class="nx">toString</code><code class="p">()</code>
<code class="lineno">30</code>   <code class="c1">//=&gt; '3628800'</code>
<code class="lineno">31</code> <code class="nx">factorial</code><code class="p">(</code><code class="mi">32768</code><code class="p">)</code>
<code class="lineno">32</code>   <code class="c1">//=&gt; GO FOR LUNCH</code>
</pre></div>

</div>

<p>Well, it now takes a very long time to run, but it is going to get us the proper result and we can print that as a string, so we’ll leave it calculating in another process and carry on.</p>

<p>The limitation of the implementation shown here is that because it tests for the function returning a function, it will not work for functions that return functions. If you want to trampoline a function that returns a function, you will need a more sophisticated mechanism, but the basic principle will be the same: The function will return a thunk instead of a value, and the trampolining loop will test the returned thunk to see if it represents a value or another computation to be evaluated.</p>

<h4 id="leanpub-auto-trampolining-co-recursive-functions">trampolining co-recursive functions</h4>

<p>If trampolining was only for recursive functions, it would have extremely limited value: All such functions can be re-written iteratively and will be much faster (although possibly less elegant). However, trampolining eliminates all calls in tail position, including calls to other functions.</p>

<p>Consider this delightfully simple example of two co-recursive functions:</p>

<div class="code-block">
<div class="highlight"><pre><code class="lineno"> 1</code> <code class="kd">function</code> <code class="nx">even</code> <code class="p">(</code><code class="nx">n</code><code class="p">)</code> <code class="p">{</code>
<code class="lineno"> 2</code>   <code class="k">return</code> <code class="nx">n</code> <code class="o">==</code> <code class="mi">0</code>
<code class="lineno"> 3</code>     <code class="o">?</code> <code class="kc">true</code>
<code class="lineno"> 4</code>     <code class="o">:</code> <code class="nx">odd</code><code class="p">(</code><code class="nx">n</code> <code class="o">-</code> <code class="mi">1</code><code class="p">);</code>
<code class="lineno"> 5</code> <code class="p">};</code>
<code class="lineno"> 6</code> 
<code class="lineno"> 7</code> <code class="kd">function</code> <code class="nx">odd</code> <code class="p">(</code><code class="nx">n</code><code class="p">)</code> <code class="p">{</code>
<code class="lineno"> 8</code>   <code class="k">return</code> <code class="nx">n</code> <code class="o">==</code> <code class="mi">0</code>
<code class="lineno"> 9</code>     <code class="o">?</code> <code class="kc">false</code>
<code class="lineno">10</code>     <code class="o">:</code> <code class="nx">even</code><code class="p">(</code><code class="nx">n</code> <code class="o">-</code> <code class="mi">1</code><code class="p">);</code>
<code class="lineno">11</code> <code class="p">};</code>
</pre></div>

</div>

<p>Like our <code>factorial</code>, it consumes <em>n</em> stack space of alternating calls to <code>even</code> and <code>odd</code>:</p>

<div class="code-block">
<div class="highlight"><pre><code class="lineno">1</code> <code class="n">even</code><code class="p">(</code><code class="mi">32768</code><code class="p">);</code>
<code class="lineno">2</code>   <code class="c1">//=&gt; RangeError: Maximum call stack size exceeded</code>
</pre></div>

</div>

<p>Obviously we can solve this problem with modulo arithmetic, but consider that what this shows is a pair of functions that call other functions in tail position, not just themselves. As with factorial, we separate the public interface that is not trampolined from the trampolined implementation:</p>

<div class="code-block">
<div class="highlight"><pre><code class="lineno"> 1</code> <code class="kd">var</code> <code class="nx">even</code> <code class="o">=</code> <code class="nx">trampoline</code><code class="p">(</code><code class="nx">_even</code><code class="p">),</code>
<code class="lineno"> 2</code>     <code class="nx">odd</code>  <code class="o">=</code> <code class="nx">trampoline</code><code class="p">(</code><code class="nx">_odd</code><code class="p">);</code>
<code class="lineno"> 3</code> 
<code class="lineno"> 4</code> <code class="kd">function</code> <code class="nx">_even</code> <code class="p">(</code><code class="nx">n</code><code class="p">)</code> <code class="p">{</code>
<code class="lineno"> 5</code>   <code class="k">return</code> <code class="nx">n</code> <code class="o">==</code> <code class="mi">0</code>
<code class="lineno"> 6</code>     <code class="o">?</code> <code class="kc">true</code>
<code class="lineno"> 7</code>     <code class="o">:</code> <code class="kd">function</code> <code class="p">()</code> <code class="p">{</code> <code class="k">return</code> <code class="nx">_odd</code><code class="p">(</code><code class="nx">n</code> <code class="o">-</code> <code class="mi">1</code><code class="p">);</code> <code class="p">};</code>
<code class="lineno"> 8</code> <code class="p">};</code>
<code class="lineno"> 9</code> 
<code class="lineno">10</code> <code class="kd">function</code> <code class="nx">_odd</code> <code class="p">(</code><code class="nx">n</code><code class="p">)</code> <code class="p">{</code>
<code class="lineno">11</code>   <code class="k">return</code> <code class="nx">n</code> <code class="o">==</code> <code class="mi">0</code>
<code class="lineno">12</code>     <code class="o">?</code> <code class="kc">false</code>
<code class="lineno">13</code>     <code class="o">:</code> <code class="kd">function</code> <code class="p">()</code> <code class="p">{</code> <code class="k">return</code> <code class="nx">_even</code><code class="p">(</code><code class="nx">n</code> <code class="o">-</code> <code class="mi">1</code><code class="p">);</code> <code class="p">};</code>
<code class="lineno">14</code> <code class="p">};</code>
</pre></div>

</div>

<p>And presto:</p>

<div class="code-block">
<div class="highlight"><pre><code class="lineno">1</code> <code class="n">even</code><code class="p">(</code><code class="mi">32768</code><code class="p">);</code>
<code class="lineno">2</code>   <code class="c1">//=&gt; true</code>
</pre></div>

</div>

<p>Trampolining works with co-recursive functions, or indeed any function that can be rewritten in tail-call form.</p>

<h4 id="leanpub-auto-summary-5">summary</h4>

<p><em>Trampolining</em> is a technique for implementing tail-call elimination. Meaning, if you take a function (whether recursive, co-recursive, or any other form) and rewrite it in tail-call form, you can eliminate the need to create a stack frame for every ‘invocation’.</p>

<p>Trampolining is very handy in a language like JavaScript, in that it allows you to use a recursive style for functions without worrying about limitations on stack sizes.</p>

<h2 id="leanpub-auto-recipes-for-new-ideas">
<span class="section-number">12 </span>Recipes for New Ideas</h2>

<div class="image-with-caption center image-with-caption center">
  <img src="/site_images/javascript-allonge/new-ideas.jpg" alt="For the love of coffee: a collection"><p class="caption">For the love of coffee: a collection</p>
</div>

<blockquote>
  <p>“The entire history of Mankind’s relationship with coffee is a futile attempt to have the reality of its taste live up to the promise of its aroma.”</p>
</blockquote>

<h3 id="before">Before</h3>

<p>Combinators for functions come in an unlimited panoply of purposes and effects. So do method combinators, but whether from intrinsic utility or custom, certain themes have emerged. One of them that forms a core part of the original <a href="https://en.wikipedia.org/wiki/Flavors_" title="programming_language">Lisp Flavors</a> system and also the <a href="https://en.wikipedia.org/wiki/Aspect-oriented_programming">Aspect-Oriented Programming</a> movement, is decorating a method with some functionality to be performed <em>before</em> the method’s body is evaluated.</p>

<p>For example, using our <a href="#fluent">fluent</a> recipe:</p>

<div class="code-block">
<div class="highlight"><pre><code class="lineno"> 1</code> <code class="kd">function</code> <code class="nx">Cake</code> <code class="p">()</code> <code class="p">{</code>
<code class="lineno"> 2</code>   <code class="k">this</code><code class="p">.</code><code class="nx">ingredients</code> <code class="o">=</code> <code class="p">{}</code>
<code class="lineno"> 3</code> <code class="p">}</code>
<code class="lineno"> 4</code> 
<code class="lineno"> 5</code> <code class="nx">extend</code><code class="p">(</code><code class="nx">Cake</code><code class="p">.</code><code class="nx">prototype</code><code class="p">,</code> <code class="p">{</code>
<code class="lineno"> 6</code>   <code class="nx">setFlavour</code><code class="o">:</code> <code class="nx">fluent</code><code class="p">(</code> <code class="kd">function</code> <code class="p">(</code><code class="nx">flavour</code><code class="p">)</code> <code class="p">{</code> 
<code class="lineno"> 7</code>     <code class="k">this</code><code class="p">.</code><code class="nx">flavour</code> <code class="o">=</code> <code class="nx">flavour</code>
<code class="lineno"> 8</code>   <code class="p">}),</code>
<code class="lineno"> 9</code>   <code class="nx">setLayers</code><code class="o">:</code> <code class="nx">fluent</code><code class="p">(</code> <code class="kd">function</code> <code class="p">(</code><code class="nx">layers</code><code class="p">)</code> <code class="p">{</code> 
<code class="lineno">10</code>     <code class="k">this</code><code class="p">.</code><code class="nx">layers</code> <code class="o">=</code> <code class="nx">layers</code><code class="p">;</code>
<code class="lineno">11</code>   <code class="p">}),</code>
<code class="lineno">12</code>   <code class="nx">add</code><code class="o">:</code> <code class="nx">fluent</code><code class="p">(</code> <code class="kd">function</code> <code class="p">(</code><code class="nx">ingredientMap</code><code class="p">)</code> <code class="p">{</code>
<code class="lineno">13</code>     <code class="kd">var</code> <code class="nx">ingredient</code><code class="p">;</code>
<code class="lineno">14</code>     
<code class="lineno">15</code>     <code class="k">for</code> <code class="p">(</code><code class="nx">ingredient</code> <code class="k">in</code> <code class="nx">ingredientMap</code><code class="p">)</code> <code class="p">{</code>
<code class="lineno">16</code>       <code class="k">this</code><code class="p">.</code><code class="nx">ingredients</code><code class="cp">[</code><code class="nx">ingredient</code><code class="cp">]</code> <code class="o">||</code> 
<code class="lineno">17</code>         <code class="p">(</code><code class="k">this</code><code class="p">.</code><code class="nx">ingredients</code><code class="cp">[</code><code class="nx">ingredient</code><code class="cp">]</code> <code class="o">=</code> <code class="mi">0</code><code class="p">);</code>
<code class="lineno">18</code>       <code class="k">this</code><code class="p">.</code><code class="nx">ingredients</code><code class="cp">[</code><code class="nx">ingredient</code><code class="cp">]</code> <code class="o">=</code> <code class="k">this</code><code class="p">.</code><code class="nx">ingredients</code><code class="cp">[</code><code class="nx">ingredient</code><code class="cp">]</code> <code class="o">+</code> 
<code class="lineno">19</code>         <code class="nx">ingredientMap</code><code class="cp">[</code><code class="nx">ingredient</code><code class="cp">]</code>
<code class="lineno">20</code>     <code class="p">}</code>
<code class="lineno">21</code>   <code class="p">}),</code>
<code class="lineno">22</code>   <code class="nx">mix</code><code class="o">:</code> <code class="nx">fluent</code><code class="p">(</code> <code class="kd">function</code> <code class="p">()</code> <code class="p">{</code>
<code class="lineno">23</code>     <code class="c1">// mix ingredients together</code>
<code class="lineno">24</code>   <code class="p">}),</code>
<code class="lineno">25</code>   <code class="nx">rise</code><code class="o">:</code> <code class="nx">fluent</code><code class="p">(</code> <code class="kd">function</code> <code class="p">(</code><code class="nx">duration</code><code class="p">)</code> <code class="p">{</code>
<code class="lineno">26</code>     <code class="c1">// let the ingredients rise</code>
<code class="lineno">27</code>   <code class="p">}),</code>
<code class="lineno">28</code>   <code class="nx">bake</code><code class="o">:</code> <code class="nx">fluent</code><code class="p">(</code> <code class="kd">function</code> <code class="p">()</code> <code class="p">{</code>
<code class="lineno">29</code>     <code class="c1">// do some baking</code>
<code class="lineno">30</code>   <code class="p">})</code>
<code class="lineno">31</code> <code class="p">});</code>
</pre></div>

</div>

<p>This particular example might be better-served as a state machine, but what we want to encode is that we must always mix the ingredients before allowing the batter to rise or baking the cake. The direct way to write that is:</p>

<div class="code-block">
<div class="highlight"><pre><code class="lineno">1</code>   <code class="nx">rise</code><code class="o">:</code> <code class="nx">fluent</code><code class="p">(</code> <code class="kd">function</code> <code class="p">(</code><code class="nx">duration</code><code class="p">)</code> <code class="p">{</code>
<code class="lineno">2</code>     <code class="k">this</code><code class="p">.</code><code class="nx">mix</code><code class="p">();</code>
<code class="lineno">3</code>     <code class="c1">// let the ingredients rise</code>
<code class="lineno">4</code>   <code class="p">}),</code>
<code class="lineno">5</code>   <code class="nx">bake</code><code class="o">:</code> <code class="nx">fluent</code><code class="p">(</code> <code class="kd">function</code> <code class="p">()</code> <code class="p">{</code>
<code class="lineno">6</code>     <code class="k">this</code><code class="p">.</code><code class="nx">mix</code><code class="p">();</code>
<code class="lineno">7</code>     <code class="c1">// do some baking</code>
<code class="lineno">8</code>   <code class="p">})</code>
</pre></div>

</div>

<p>Nothing wrong with that, however it does clutter the core functionality of rising and baking with a secondary concern, preconditions. There is a similar problem with cross-cutting concerns like logging or checking permissions: You want functions to be smaller and more focused, and decomposing into smaller methods is ugly:</p>

<div class="code-block">
<div class="highlight"><pre><code class="lineno"> 1</code> <code class="n">reallyRise</code><code class="o">:</code> <code class="kd">function</code> <code class="o">(</code><code class="n">duration</code><code class="o">)</code> <code class="o">{</code>
<code class="lineno"> 2</code>   <code class="c1">// let the ingredients rise</code>
<code class="lineno"> 3</code> <code class="o">},</code>
<code class="lineno"> 4</code> <code class="n">rise</code><code class="o">:</code> <code class="n">fluent</code> <code class="o">(</code><code class="kd">function</code> <code class="o">(</code><code class="n">duration</code><code class="o">)</code> <code class="o">{</code>
<code class="lineno"> 5</code>   <code class="k">this</code><code class="o">.</code><code class="na">mix</code><code class="o">();</code>
<code class="lineno"> 6</code>   <code class="k">this</code><code class="o">.</code><code class="na">reallyRise</code><code class="o">()</code>
<code class="lineno"> 7</code> <code class="o">}),</code>
<code class="lineno"> 8</code> <code class="n">reallyBake</code><code class="o">:</code> <code class="kd">function</code> <code class="o">()</code> <code class="o">{</code>
<code class="lineno"> 9</code>   <code class="c1">// do some baking</code>
<code class="lineno">10</code> <code class="o">},</code>
<code class="lineno">11</code> <code class="n">bake</code><code class="o">:</code> <code class="n">fluent</code><code class="o">(</code> <code class="kd">function</code> <code class="o">()</code> <code class="o">{</code>
<code class="lineno">12</code>   <code class="k">this</code><code class="o">.</code><code class="na">mix</code><code class="o">();</code>
<code class="lineno">13</code>   <code class="k">this</code><code class="o">.</code><code class="na">reallyBake</code><code class="o">()</code>
<code class="lineno">14</code> <code class="o">})</code>
</pre></div>

</div>

<h4 id="leanpub-auto-the-before-recipe">the before recipe</h4>

<p>This recipe is for a combinator that turns a function into a method decorator. The decorator evaluates the function before evaluating the base method. Here it is:</p>

<div class="code-block">
<div class="highlight"><pre><code class="lineno">1</code> <code class="kd">function</code> <code class="nx">before</code> <code class="p">(</code><code class="nx">decoration</code><code class="p">)</code> <code class="p">{</code>
<code class="lineno">2</code>   <code class="k">return</code> <code class="kd">function</code> <code class="p">(</code><code class="nx">method</code><code class="p">)</code> <code class="p">{</code>
<code class="lineno">3</code>     <code class="k">return</code> <code class="kd">function</code> <code class="p">()</code> <code class="p">{</code>
<code class="lineno">4</code>       <code class="nx">decoration</code><code class="p">.</code><code class="nx">apply</code><code class="p">(</code><code class="k">this</code><code class="p">,</code> <code class="nx">arguments</code><code class="p">);</code>
<code class="lineno">5</code>       <code class="k">return</code> <code class="nx">method</code><code class="p">.</code><code class="nx">apply</code><code class="p">(</code><code class="k">this</code><code class="p">,</code> <code class="nx">arguments</code><code class="p">)</code>
<code class="lineno">6</code>     <code class="p">}</code>
<code class="lineno">7</code>   <code class="p">}</code>
<code class="lineno">8</code> <code class="p">}</code>
</pre></div>

</div>

<p>And here we are using it in conjunction with <code>fluent</code>, showing the power of composing combinators:</p>

<div class="code-block">
<div class="highlight"><pre><code class="lineno"> 1</code> <code class="kd">var</code> <code class="nx">mixFirst</code> <code class="o">=</code> <code class="nx">before</code><code class="p">(</code><code class="kd">function</code> <code class="p">()</code> <code class="p">{</code>
<code class="lineno"> 2</code>   <code class="k">this</code><code class="p">.</code><code class="nx">mix</code><code class="p">()</code>
<code class="lineno"> 3</code> <code class="p">});</code>
<code class="lineno"> 4</code> 
<code class="lineno"> 5</code> <code class="nx">extend</code><code class="p">(</code><code class="nx">Cake</code><code class="p">.</code><code class="nx">prototype</code><code class="p">,</code> <code class="p">{</code>
<code class="lineno"> 6</code>   
<code class="lineno"> 7</code>   <code class="c1">// Other methods...</code>
<code class="lineno"> 8</code>   
<code class="lineno"> 9</code>   <code class="nx">mix</code><code class="o">:</code> <code class="nx">fluent</code><code class="p">(</code> <code class="kd">function</code> <code class="p">()</code> <code class="p">{</code>
<code class="lineno">10</code>     <code class="c1">// mix ingredients together</code>
<code class="lineno">11</code>   <code class="p">}),</code>
<code class="lineno">12</code>   <code class="nx">rise</code><code class="o">:</code> <code class="nx">fluent</code><code class="p">(</code> <code class="nx">mixFirst</code><code class="p">(</code> <code class="kd">function</code> <code class="p">(</code><code class="nx">duration</code><code class="p">)</code> <code class="p">{</code>
<code class="lineno">13</code>     <code class="c1">// let the ingredients rise</code>
<code class="lineno">14</code>   <code class="p">})),</code>
<code class="lineno">15</code>   <code class="nx">bake</code><code class="o">:</code> <code class="nx">fluent</code><code class="p">(</code> <code class="nx">mixFirst</code><code class="p">(</code> <code class="kd">function</code> <code class="p">()</code> <code class="p">{</code>
<code class="lineno">16</code>     <code class="c1">// do some baking</code>
<code class="lineno">17</code>     <code class="k">return</code> <code class="k">this</code>
<code class="lineno">18</code>   <code class="p">}))</code>
<code class="lineno">19</code> <code class="p">});</code>
</pre></div>

</div>

<p>The decorators act like keywords or annotations, documenting the method’s behaviour but clearly separating these secondary concerns from the core logic of the method.</p>

<hr class="scene-break">
<p>(<a href="#before">before</a>, <a href="#after">after</a>, and many more combinators for building method decorators can be found in the <a href="https://github.com/raganwald/method-combinators/blob/master/README-JS.md#method-combinators">method combinators</a> module.)</p>

<h3 id="after">After</h3>

<p>Combinators for functions come in an unlimited panoply of purposes and effects. So do method combinators, but whether from intrinsic utility or custom, certain themes have emerged. One of them that forms a core part of the original <a href="https://en.wikipedia.org/wiki/Flavors_" title="programming_language">Lisp Flavors</a> system and also the <a href="https://en.wikipedia.org/wiki/Aspect-oriented_programming">Aspect-Oriented Programming</a> movement, is decorating a method with some functionality to be performed <em>after</em> the method’s body is evaluated.</p>

<p>For example, consider this “class:”</p>

<div class="code-block">
<div class="highlight"><pre><code class="lineno"> 1</code> <code class="nx">Todo</code> <code class="o">=</code> <code class="kd">function</code> <code class="p">(</code><code class="nx">name</code><code class="p">)</code> <code class="p">{</code>
<code class="lineno"> 2</code>   <code class="k">this</code><code class="p">.</code><code class="nx">name</code> <code class="o">=</code> <code class="nx">name</code> <code class="o">||</code> <code class="s1">'Untitled'</code><code class="p">;</code>
<code class="lineno"> 3</code>   <code class="k">this</code><code class="p">.</code><code class="nx">done</code> <code class="o">=</code> <code class="kc">false</code>
<code class="lineno"> 4</code> <code class="p">}</code>
<code class="lineno"> 5</code> 
<code class="lineno"> 6</code> <code class="nx">extend</code><code class="p">(</code><code class="nx">Todo</code><code class="p">.</code><code class="nx">prototype</code><code class="p">,</code> <code class="p">{</code>
<code class="lineno"> 7</code>   <code class="k">do</code><code class="o">:</code> <code class="nx">fluent</code><code class="p">(</code> <code class="kd">function</code> <code class="p">{</code>
<code class="lineno"> 8</code>     <code class="k">this</code><code class="p">.</code><code class="nx">done</code> <code class="o">=</code> <code class="kc">true</code>
<code class="lineno"> 9</code>   <code class="p">}),</code>
<code class="lineno">10</code>   <code class="nx">undo</code><code class="o">:</code> <code class="nx">fluent</code><code class="p">(</code> <code class="kd">function</code> <code class="p">{</code>
<code class="lineno">11</code>     <code class="k">this</code><code class="p">.</code><code class="nx">done</code> <code class="o">=</code> <code class="kc">false</code>
<code class="lineno">12</code>   <code class="p">}),</code>
<code class="lineno">13</code>   <code class="nx">setName</code><code class="o">:</code> <code class="nx">fluent</code><code class="p">(</code> <code class="nx">maybe</code><code class="p">(</code> <code class="kd">function</code> <code class="p">(</code><code class="nx">name</code><code class="p">)</code> <code class="p">{</code>
<code class="lineno">14</code>     <code class="k">this</code><code class="p">.</code><code class="nx">name</code> <code class="o">=</code> <code class="nx">name</code>
<code class="lineno">15</code>   <code class="p">}))</code>
<code class="lineno">16</code> <code class="p">});</code>
</pre></div>

</div>

<p>If we’re rolling our own model class, we might mix in <a href="http://backbonejs.org/#Events">Backbone.Events</a>. Now we can have views listen to our todo items and render themselves when there’s a change. Since we’ve already seen <a href="#before">before</a>, we’ll jump right to the recipe for <code>after</code>, a combinator that turns a function into a method decorator:</p>

<div class="code-block">
<div class="highlight"><pre><code class="lineno">1</code> <code class="kd">function</code> <code class="nx">after</code> <code class="p">(</code><code class="nx">decoration</code><code class="p">)</code> <code class="p">{</code>
<code class="lineno">2</code>   <code class="k">return</code> <code class="kd">function</code> <code class="p">(</code><code class="nx">method</code><code class="p">)</code> <code class="p">{</code>
<code class="lineno">3</code>     <code class="k">return</code> <code class="kd">function</code> <code class="p">()</code> <code class="p">{</code>
<code class="lineno">4</code>       <code class="kd">var</code> <code class="nx">value</code> <code class="o">=</code> <code class="nx">method</code><code class="p">.</code><code class="nx">apply</code><code class="p">(</code><code class="k">this</code><code class="p">,</code> <code class="nx">arguments</code><code class="p">);</code>
<code class="lineno">5</code>       <code class="nx">decoration</code><code class="p">.</code><code class="nx">call</code><code class="p">(</code><code class="k">this</code><code class="p">,</code> <code class="nx">value</code><code class="p">);</code>
<code class="lineno">6</code>       <code class="k">return</code> <code class="nx">value</code>
<code class="lineno">7</code>     <code class="p">}</code>
<code class="lineno">8</code>   <code class="p">}</code>
<code class="lineno">9</code> <code class="p">}</code>
</pre></div>

</div>

<p>And here it is in use to trigger change events on our <code>Todo</code> “class.” We’re going to be even <em>more</em> sophisticated and paramaterize our decorators.</p>

<div class="code-block">
<div class="highlight"><pre><code class="lineno"> 1</code> <code class="nx">extend</code><code class="p">(</code><code class="nx">Todo</code><code class="p">.</code><code class="nx">prototype</code><code class="p">,</code> <code class="nx">Backbone</code><code class="p">.</code><code class="nx">Events</code><code class="p">);</code>
<code class="lineno"> 2</code> 
<code class="lineno"> 3</code> <code class="kd">function</code> <code class="nx">changes</code> <code class="p">(</code><code class="nx">propertyName</code><code class="p">)</code> <code class="p">{</code>
<code class="lineno"> 4</code>   <code class="k">return</code> <code class="nx">after</code><code class="p">(</code><code class="kd">function</code> <code class="p">()</code> <code class="p">{</code>
<code class="lineno"> 5</code>     <code class="k">this</code><code class="p">.</code><code class="nx">trigger</code><code class="p">(</code><code class="s1">'changed changed:'</code><code class="o">+</code><code class="nx">propertyName</code><code class="p">,</code> <code class="k">this</code><code class="cp">[</code><code class="nx">propertyName</code><code class="cp">]</code><code class="p">)</code>
<code class="lineno"> 6</code>   <code class="p">})</code>
<code class="lineno"> 7</code> <code class="p">}</code>
<code class="lineno"> 8</code> 
<code class="lineno"> 9</code> <code class="nx">extend</code><code class="p">(</code><code class="nx">Todo</code><code class="p">.</code><code class="nx">prototype</code><code class="p">,</code> <code class="p">{</code>
<code class="lineno">10</code>   <code class="k">do</code><code class="o">:</code> <code class="nx">fluent</code><code class="p">(</code> <code class="nx">changes</code><code class="p">(</code><code class="s1">'done'</code><code class="p">)(</code> <code class="kd">function</code> <code class="p">{</code>
<code class="lineno">11</code>     <code class="k">this</code><code class="p">.</code><code class="nx">done</code> <code class="o">=</code> <code class="kc">true</code>
<code class="lineno">12</code>   <code class="p">})),</code>
<code class="lineno">13</code>   <code class="nx">undo</code><code class="o">:</code> <code class="nx">fluent</code><code class="p">(</code> <code class="nx">changes</code><code class="p">(</code><code class="s1">'done'</code><code class="p">)(</code> <code class="kd">function</code> <code class="p">{</code>
<code class="lineno">14</code>     <code class="k">this</code><code class="p">.</code><code class="nx">done</code> <code class="o">=</code> <code class="kc">false</code>
<code class="lineno">15</code>   <code class="p">})),</code>
<code class="lineno">16</code>   <code class="nx">setName</code><code class="o">:</code> <code class="nx">fluent</code><code class="p">(</code> <code class="nx">changes</code><code class="p">(</code><code class="s1">'name'</code><code class="p">)(</code> <code class="nx">maybe</code><code class="p">(</code> <code class="kd">function</code> <code class="p">(</code><code class="nx">name</code><code class="p">)</code> <code class="p">{</code>
<code class="lineno">17</code>     <code class="k">this</code><code class="p">.</code><code class="nx">name</code> <code class="o">=</code> <code class="nx">name</code>
<code class="lineno">18</code>   <code class="p">})))</code>
<code class="lineno">19</code> <code class="p">});</code>
</pre></div>

</div>

<p>The decorators act like keywords or annotations, documenting the method’s behaviour but clearly separating these secondary concerns from the core logic of the method.</p>

<hr class="scene-break">
<p>(<a href="#before">before</a>, <a href="#after">after</a>, and many more combinators for building method decorators can be found in the <a href="https://github.com/raganwald/method-combinators/blob/master/README-JS.md#method-combinators">method combinators</a> module.)</p>

<h3 id="provided">Provided and Except</h3>

<p>Neither the <a href="#before">before</a> and <a href="#after">after</a> decorators can actually terminate evaluation without throwing something. Normal execution always results in the base method being evaluated. The <code>provided</code> and <code>excepting</code> recipes are combinators that produce method decorators that apply a precondition to evaluating the base method body. If the precondition fails, nothing is returned.</p>

<p>The provided combinator turns a function into a method decorator. The function must evaluate to truthy for the base method to be evaluated:</p>

<div class="code-block">
<div class="highlight"><pre><code class="lineno">1</code> <code class="kd">function</code> <code class="nx">provided</code> <code class="p">(</code><code class="nx">predicate</code><code class="p">)</code> <code class="p">{</code>
<code class="lineno">2</code>   <code class="k">return</code> <code class="kd">function</code><code class="p">(</code><code class="nx">base</code><code class="p">)</code> <code class="p">{</code>
<code class="lineno">3</code>     <code class="k">return</code> <code class="kd">function</code><code class="p">()</code> <code class="p">{</code>
<code class="lineno">4</code>       <code class="k">if</code> <code class="p">(</code><code class="nx">predicate</code><code class="p">.</code><code class="nx">apply</code><code class="p">(</code><code class="k">this</code><code class="p">,</code> <code class="nx">arguments</code><code class="p">))</code> <code class="p">{</code>
<code class="lineno">5</code>         <code class="k">return</code> <code class="nx">base</code><code class="p">.</code><code class="nx">apply</code><code class="p">(</code><code class="k">this</code><code class="p">,</code> <code class="nx">arguments</code><code class="p">);</code>
<code class="lineno">6</code>       <code class="p">}</code>
<code class="lineno">7</code>     <code class="p">};</code>
<code class="lineno">8</code>   <code class="p">};</code>
<code class="lineno">9</code> <code class="p">};</code>
</pre></div>

</div>

<p><code>provided</code> can be used to create named decorators like <code>maybe</code>:</p>

<div class="code-block">
<div class="highlight"><pre><code class="lineno">1</code> <code class="kd">var</code> <code class="nx">maybe</code> <code class="o">=</code> <code class="nx">provided</code><code class="p">(</code> <code class="kd">function</code> <code class="p">(</code><code class="nx">value</code><code class="p">)</code> <code class="p">{</code>
<code class="lineno">2</code>   <code class="k">return</code> <code class="nx">value</code> <code class="o">!=</code> <code class="kc">null</code>
<code class="lineno">3</code> <code class="p">});</code>
<code class="lineno">4</code>   
<code class="lineno">5</code> <code class="nx">SomeModel</code><code class="p">.</code><code class="nx">prototype</code><code class="p">.</code><code class="nx">setAttribute</code> <code class="o">=</code> <code class="nx">maybe</code><code class="p">(</code> <code class="kd">function</code> <code class="p">(</code><code class="nx">value</code><code class="p">)</code> <code class="p">{</code>
<code class="lineno">6</code>   <code class="k">this</code><code class="p">.</code><code class="nx">attribute</code> <code class="o">=</code> <code class="nx">value</code>
<code class="lineno">7</code> <code class="p">});</code>
</pre></div>

</div>

<p>You can build your own domain-specific decorators:</p>

<div class="code-block">
<div class="highlight"><pre><code class="lineno">1</code> <code class="kd">var</code> <code class="nx">whenNamed</code> <code class="o">=</code> <code class="nx">provided</code><code class="p">(</code> <code class="kd">function</code> <code class="p">(</code><code class="nx">record</code><code class="p">)</code> <code class="p">{</code>
<code class="lineno">2</code>   <code class="k">return</code> <code class="nx">record</code><code class="p">.</code><code class="nx">name</code> <code class="o">&amp;&amp;</code> <code class="nx">record</code><code class="p">.</code><code class="nx">name</code><code class="p">.</code><code class="nx">length</code> <code class="o">&gt;</code> <code class="mi">0</code>
<code class="lineno">3</code> <code class="p">})</code>
</pre></div>

</div>

<p><code>except</code> works identically, but with the logic reversed.</p>

<div class="code-block">
<div class="highlight"><pre><code class="lineno"> 1</code> <code class="kd">function</code> <code class="nx">except</code> <code class="p">(</code><code class="nx">predicate</code><code class="p">)</code> <code class="p">{</code>
<code class="lineno"> 2</code>   <code class="k">return</code> <code class="kd">function</code><code class="p">(</code><code class="nx">base</code><code class="p">)</code> <code class="p">{</code>
<code class="lineno"> 3</code>     <code class="k">return</code> <code class="kd">function</code><code class="p">()</code> <code class="p">{</code>
<code class="lineno"> 4</code>       <code class="k">if</code> <code class="p">(</code><code class="o">!</code><code class="nx">predicate</code><code class="p">.</code><code class="nx">apply</code><code class="p">(</code><code class="k">this</code><code class="p">,</code> <code class="nx">arguments</code><code class="p">))</code> <code class="p">{</code>
<code class="lineno"> 5</code>         <code class="k">return</code> <code class="nx">base</code><code class="p">.</code><code class="nx">apply</code><code class="p">(</code><code class="k">this</code><code class="p">,</code> <code class="nx">arguments</code><code class="p">);</code>
<code class="lineno"> 6</code>       <code class="p">}</code>
<code class="lineno"> 7</code>     <code class="p">};</code>
<code class="lineno"> 8</code>   <code class="p">};</code>
<code class="lineno"> 9</code> <code class="p">};</code>
<code class="lineno">10</code> 
<code class="lineno">11</code> <code class="kd">var</code> <code class="nx">exceptAdmin</code> <code class="o">=</code> <code class="nx">except</code><code class="p">(</code> <code class="kd">function</code> <code class="p">(</code><code class="nx">user</code><code class="p">)</code> <code class="p">{</code>
<code class="lineno">12</code>   <code class="k">return</code> <code class="nx">user</code><code class="p">.</code><code class="nx">role</code><code class="p">.</code><code class="nx">isAdmin</code><code class="p">()</code>
<code class="lineno">13</code> <code class="p">});</code>
</pre></div>

</div>

<h3 id="leanpub-auto-a-functional-mixin-factory">A Functional Mixin Factory</h3>

<p><a href="#functional-mixins">Functional Mixins</a> extend an existing class’s prototype. Let’s start with:</p>

<div class="code-block">
<div class="highlight"><pre><code class="lineno"> 1</code> <code class="kd">function</code> <code class="nx">Todo</code> <code class="p">(</code><code class="nx">name</code><code class="p">)</code> <code class="p">{</code>
<code class="lineno"> 2</code>   <code class="kd">var</code> <code class="nx">self</code> <code class="o">=</code> <code class="k">this</code> <code class="k">instanceof</code> <code class="nx">Todo</code>
<code class="lineno"> 3</code>              <code class="o">?</code> <code class="k">this</code>
<code class="lineno"> 4</code>              <code class="o">:</code> <code class="k">new</code> <code class="nx">Todo</code><code class="p">();</code>
<code class="lineno"> 5</code>   <code class="nx">self</code><code class="p">.</code><code class="nx">name</code> <code class="o">=</code> <code class="nx">name</code> <code class="o">||</code> <code class="s1">'Untitled'</code><code class="p">;</code>
<code class="lineno"> 6</code>   <code class="nx">self</code><code class="p">.</code><code class="nx">done</code> <code class="o">=</code> <code class="kc">false</code><code class="p">;</code>
<code class="lineno"> 7</code> <code class="p">};</code>
<code class="lineno"> 8</code> 
<code class="lineno"> 9</code> <code class="nx">Todo</code><code class="p">.</code><code class="nx">prototype</code><code class="p">.</code><code class="k">do</code> <code class="o">=</code> <code class="nx">fluent</code><code class="p">(</code> <code class="kd">function</code> <code class="p">()</code> <code class="p">{</code>
<code class="lineno">10</code>   <code class="k">this</code><code class="p">.</code><code class="nx">done</code> <code class="o">=</code> <code class="kc">true</code><code class="p">;</code>
<code class="lineno">11</code> <code class="p">});</code>
<code class="lineno">12</code> 
<code class="lineno">13</code> <code class="nx">Todo</code><code class="p">.</code><code class="nx">prototype</code><code class="p">.</code><code class="nx">undo</code> <code class="o">=</code> <code class="nx">fluent</code><code class="p">(</code> <code class="kd">function</code> <code class="p">()</code> <code class="p">{</code>
<code class="lineno">14</code>   <code class="k">this</code><code class="p">.</code><code class="nx">done</code> <code class="o">=</code> <code class="kc">false</code><code class="p">;</code>
<code class="lineno">15</code> <code class="p">});</code>
</pre></div>

</div>

<p>We wish to decorate this with:</p>

<div class="code-block">
<div class="highlight"><pre><code class="lineno">1</code> <code class="p">({</code>
<code class="lineno">2</code>   <code class="nx">setLocation</code><code class="o">:</code> <code class="nx">fluent</code><code class="p">(</code> <code class="kd">function</code> <code class="p">(</code><code class="nx">location</code><code class="p">)</code> <code class="p">{</code>
<code class="lineno">3</code>     <code class="k">this</code><code class="p">.</code><code class="nx">location</code> <code class="o">=</code> <code class="nx">location</code><code class="p">;</code>
<code class="lineno">4</code>   <code class="p">}),</code>
<code class="lineno">5</code>   <code class="nx">getLocation</code><code class="o">:</code> <code class="kd">function</code> <code class="p">()</code> <code class="p">{</code> <code class="k">return</code> <code class="k">this</code><code class="p">.</code><code class="nx">location</code><code class="p">;</code> <code class="p">}</code>
<code class="lineno">6</code> <code class="p">});</code>
</pre></div>

</div>

<p>Instead of writing:</p>

<div class="code-block">
<div class="highlight"><pre><code class="lineno">1</code> <code class="kd">function</code> <code class="nx">becomeLocationAware</code> <code class="p">()</code> <code class="p">{</code>
<code class="lineno">2</code>   <code class="k">this</code><code class="p">.</code><code class="nx">setLocation</code> <code class="o">=</code> <code class="nx">fluent</code><code class="p">(</code> <code class="kd">function</code> <code class="p">(</code><code class="nx">location</code><code class="p">)</code> <code class="p">{</code>
<code class="lineno">3</code>     <code class="k">this</code><code class="p">.</code><code class="nx">location</code> <code class="o">=</code> <code class="nx">location</code><code class="p">;</code>
<code class="lineno">4</code>   <code class="p">});</code>
<code class="lineno">5</code>   
<code class="lineno">6</code>   <code class="k">this</code><code class="p">.</code><code class="nx">getLocation</code> <code class="o">=</code> <code class="kd">function</code> <code class="p">()</code> <code class="p">{</code> <code class="k">return</code> <code class="k">this</code><code class="p">.</code><code class="nx">location</code><code class="p">;</code> <code class="p">};</code>
<code class="lineno">7</code>   
<code class="lineno">8</code>   <code class="k">return</code> <code class="k">this</code><code class="p">;</code>
<code class="lineno">9</code> <code class="p">};</code>
</pre></div>

</div>

<p>We’ll extract the decoration into a parameter like this:</p>

<div class="code-block">
<div class="highlight"><pre><code class="lineno">1</code> <code class="kd">function</code> <code class="nx">mixin</code> <code class="p">(</code><code class="nx">decoration</code><code class="p">)</code> <code class="p">{</code>
<code class="lineno">2</code>   <code class="nx">extend</code><code class="p">(</code><code class="k">this</code><code class="p">,</code> <code class="nx">decoration</code><code class="p">);</code>
<code class="lineno">3</code>   <code class="k">return</code> <code class="k">this</code><code class="p">;</code>
<code class="lineno">4</code> <code class="p">};</code>
</pre></div>

</div>

<p>And then “curry” the function manually like this:</p>

<div class="code-block">
<div class="highlight"><pre><code class="lineno">1</code> <code class="kd">function</code> <code class="nx">mixin</code> <code class="p">(</code><code class="nx">decoration</code><code class="p">)</code> <code class="p">{</code>
<code class="lineno">2</code> 
<code class="lineno">3</code>   <code class="k">return</code> <code class="kd">function</code> <code class="p">()</code> <code class="p">{</code>
<code class="lineno">4</code>     <code class="nx">extend</code><code class="p">(</code><code class="k">this</code><code class="p">,</code> <code class="nx">decoration</code><code class="p">);</code>
<code class="lineno">5</code>     <code class="k">return</code> <code class="k">this</code><code class="p">;</code>
<code class="lineno">6</code>   <code class="p">};</code>
<code class="lineno">7</code>   
<code class="lineno">8</code> <code class="p">};</code>
</pre></div>

</div>

<p>We can try it:</p>

<div class="code-block">
<div class="highlight"><pre><code class="lineno"> 1</code> <code class="kd">var</code> <code class="nx">MixinLocation</code> <code class="o">=</code> <code class="nx">mixin</code><code class="p">({</code>
<code class="lineno"> 2</code>   <code class="nx">setLocation</code><code class="o">:</code> <code class="nx">fluent</code><code class="p">(</code> <code class="kd">function</code> <code class="p">(</code><code class="nx">location</code><code class="p">)</code> <code class="p">{</code>
<code class="lineno"> 3</code>     <code class="k">this</code><code class="p">.</code><code class="nx">location</code> <code class="o">=</code> <code class="nx">location</code><code class="p">;</code>
<code class="lineno"> 4</code>   <code class="p">}),</code>
<code class="lineno"> 5</code>   <code class="nx">getLocation</code><code class="o">:</code> <code class="kd">function</code> <code class="p">()</code> <code class="p">{</code> <code class="k">return</code> <code class="k">this</code><code class="p">.</code><code class="nx">location</code><code class="p">;</code> <code class="p">}</code>
<code class="lineno"> 6</code> <code class="p">});</code>
<code class="lineno"> 7</code> 
<code class="lineno"> 8</code> <code class="nx">MixinLocation</code><code class="p">.</code><code class="nx">call</code><code class="p">(</code><code class="nx">Todo</code><code class="p">.</code><code class="nx">prototype</code><code class="p">);</code>
<code class="lineno"> 9</code> 
<code class="lineno">10</code> <code class="k">new</code> <code class="nx">Todo</code><code class="p">(</code><code class="s1">'Paint Bedroom'</code><code class="p">).</code><code class="nx">setLocation</code><code class="p">(</code><code class="s1">'Home'</code><code class="p">);</code>
<code class="lineno">11</code>   <code class="c1">//=&gt; { name: 'Paint Bedroom',</code>
<code class="lineno">12</code>   <code class="c1">//     done: false,</code>
<code class="lineno">13</code>   <code class="c1">//     location: 'Home'</code>
</pre></div>

</div>

<p>Success! Our <code>mixin</code> function makes functional mixins. A final refinement is to make it “context-agnostic,” so that we can write either <code>MixinLocation.call(Todo.prototype)</code> or <code>MixinLocation(Todo.prototype)</code>:</p>

<div class="code-block">
<div class="highlight"><pre><code class="lineno"> 1</code> <code class="kd">function</code> <code class="nx">mixin</code> <code class="p">(</code><code class="nx">decoration</code><code class="p">)</code> <code class="p">{</code>
<code class="lineno"> 2</code> 
<code class="lineno"> 3</code>   <code class="k">return</code> <code class="kd">function</code> <code class="nx">decorate</code> <code class="p">()</code> <code class="p">{</code>
<code class="lineno"> 4</code>     <code class="k">if</code> <code class="p">(</code><code class="nx">arguments</code><code class="cp">[</code><code class="mi">0</code><code class="cp">]</code> <code class="o">!===</code> <code class="k">void</code> <code class="mi">0</code><code class="p">)</code> <code class="p">{</code>
<code class="lineno"> 5</code>       <code class="k">return</code> <code class="nx">decorate</code><code class="p">.</code><code class="nx">call</code><code class="p">(</code><code class="nx">arguments</code><code class="cp">[</code><code class="mi">0</code><code class="cp">]</code><code class="p">);</code>
<code class="lineno"> 6</code>     <code class="p">}</code>
<code class="lineno"> 7</code>     <code class="k">else</code> <code class="p">{</code>
<code class="lineno"> 8</code>       <code class="nx">extend</code><code class="p">(</code><code class="k">this</code><code class="p">,</code> <code class="nx">decoration</code><code class="p">);</code>
<code class="lineno"> 9</code>       <code class="k">return</code> <code class="k">this</code><code class="p">;</code>
<code class="lineno">10</code>     <code class="p">};</code>
<code class="lineno">11</code>   <code class="p">};</code>
<code class="lineno">12</code>   
<code class="lineno">13</code> <code class="p">};</code>
</pre></div>

</div>

<h3 id="leanpub-auto-a-class-decorator-factory">A Class Decorator Factory</h3>

<p>As <a href="#class-decorators">discussed</a>, a class decorator creates a new class with some additional decoration. It’s lighter weight than subclassing. It’s also easy to write a factory function that makes decorators for us. Recall:</p>

<div class="code-block">
<div class="highlight"><pre><code class="lineno"> 1</code> <code class="kd">function</code> <code class="nx">Todo</code> <code class="p">(</code><code class="nx">name</code><code class="p">)</code> <code class="p">{</code>
<code class="lineno"> 2</code>   <code class="kd">var</code> <code class="nx">self</code> <code class="o">=</code> <code class="k">this</code> <code class="k">instanceof</code> <code class="nx">Todo</code>
<code class="lineno"> 3</code>              <code class="o">?</code> <code class="k">this</code>
<code class="lineno"> 4</code>              <code class="o">:</code> <code class="k">new</code> <code class="nx">Todo</code><code class="p">();</code>
<code class="lineno"> 5</code>   <code class="nx">self</code><code class="p">.</code><code class="nx">name</code> <code class="o">=</code> <code class="nx">name</code> <code class="o">||</code> <code class="s1">'Untitled'</code><code class="p">;</code>
<code class="lineno"> 6</code>   <code class="nx">self</code><code class="p">.</code><code class="nx">done</code> <code class="o">=</code> <code class="kc">false</code><code class="p">;</code>
<code class="lineno"> 7</code> <code class="p">};</code>
<code class="lineno"> 8</code> 
<code class="lineno"> 9</code> <code class="nx">Todo</code><code class="p">.</code><code class="nx">prototype</code><code class="p">.</code><code class="k">do</code> <code class="o">=</code> <code class="nx">fluent</code><code class="p">(</code> <code class="kd">function</code> <code class="p">()</code> <code class="p">{</code>
<code class="lineno">10</code>   <code class="k">this</code><code class="p">.</code><code class="nx">done</code> <code class="o">=</code> <code class="kc">true</code><code class="p">;</code>
<code class="lineno">11</code> <code class="p">});</code>
<code class="lineno">12</code> 
<code class="lineno">13</code> <code class="nx">Todo</code><code class="p">.</code><code class="nx">prototype</code><code class="p">.</code><code class="nx">undo</code> <code class="o">=</code> <code class="nx">fluent</code><code class="p">(</code> <code class="kd">function</code> <code class="p">()</code> <code class="p">{</code>
<code class="lineno">14</code>   <code class="k">this</code><code class="p">.</code><code class="nx">done</code> <code class="o">=</code> <code class="kc">false</code><code class="p">;</code>
<code class="lineno">15</code> <code class="p">});</code>
</pre></div>

</div>

<p>We wish to decorate this with:</p>

<div class="code-block">
<div class="highlight"><pre><code class="lineno">1</code> <code class="p">({</code>
<code class="lineno">2</code>   <code class="nx">setColourRGB</code><code class="o">:</code> <code class="nx">fluent</code><code class="p">(</code> <code class="kd">function</code> <code class="p">(</code><code class="nx">r</code><code class="p">,</code> <code class="nx">g</code><code class="p">,</code> <code class="nx">b</code><code class="p">)</code> <code class="p">{</code>
<code class="lineno">3</code>     <code class="k">this</code><code class="p">.</code><code class="nx">colourCode</code> <code class="o">=</code> <code class="p">{</code> <code class="nx">r</code><code class="o">:</code> <code class="nx">r</code><code class="p">,</code> <code class="nx">g</code><code class="o">:</code> <code class="nx">g</code><code class="p">,</code> <code class="nx">b</code><code class="o">:</code> <code class="nx">b</code> <code class="p">};</code>
<code class="lineno">4</code>   <code class="p">}),</code>
<code class="lineno">5</code>   <code class="nx">getColourRGB</code><code class="o">:</code> <code class="kd">function</code> <code class="p">()</code> <code class="p">{</code>
<code class="lineno">6</code>     <code class="k">return</code> <code class="k">this</code><code class="p">.</code><code class="nx">colourCode</code><code class="p">;</code>
<code class="lineno">7</code>   <code class="p">}</code>
<code class="lineno">8</code> <code class="p">});</code>
</pre></div>

</div>

<p>Instead of writing:</p>

<div class="code-block">
<div class="highlight"><pre><code class="lineno"> 1</code> <code class="kd">function</code> <code class="nx">AndColourCoded</code> <code class="p">(</code><code class="nx">clazz</code><code class="p">)</code> <code class="p">{</code>
<code class="lineno"> 2</code>   <code class="kd">function</code> <code class="nx">Decorated</code>  <code class="p">()</code> <code class="p">{</code>
<code class="lineno"> 3</code>     <code class="kd">var</code> <code class="nx">self</code> <code class="o">=</code> <code class="k">this</code> <code class="k">instanceof</code> <code class="nx">Decorated</code>
<code class="lineno"> 4</code>                <code class="o">?</code> <code class="k">this</code>
<code class="lineno"> 5</code>                <code class="o">:</code> <code class="k">new</code> <code class="nx">Decorated</code><code class="p">();</code>
<code class="lineno"> 6</code>     
<code class="lineno"> 7</code>     <code class="k">return</code> <code class="nx">clazz</code><code class="p">.</code><code class="nx">apply</code><code class="p">(</code><code class="nx">self</code><code class="p">,</code> <code class="nx">arguments</code><code class="p">);</code>
<code class="lineno"> 8</code>   <code class="p">};</code>
<code class="lineno"> 9</code>   <code class="nx">Decorated</code><code class="p">.</code><code class="nx">prototype</code> <code class="o">=</code> <code class="k">new</code> <code class="nx">clazz</code><code class="p">();</code>
<code class="lineno">10</code>   
<code class="lineno">11</code>   <code class="nx">Decorated</code><code class="p">.</code><code class="nx">prototype</code><code class="p">.</code><code class="nx">setColourRGB</code> <code class="o">=</code> <code class="nx">fluent</code><code class="p">(</code> <code class="kd">function</code> <code class="p">(</code><code class="nx">r</code><code class="p">,</code> <code class="nx">g</code><code class="p">,</code> <code class="nx">b</code><code class="p">)</code> <code class="p">{</code>
<code class="lineno">12</code>     <code class="k">this</code><code class="p">.</code><code class="nx">colourCode</code> <code class="o">=</code> <code class="p">{</code> <code class="nx">r</code><code class="o">:</code> <code class="nx">r</code><code class="p">,</code> <code class="nx">g</code><code class="o">:</code> <code class="nx">g</code><code class="p">,</code> <code class="nx">b</code><code class="o">:</code> <code class="nx">b</code> <code class="p">};</code>
<code class="lineno">13</code>   <code class="p">});</code>
<code class="lineno">14</code>   
<code class="lineno">15</code>   <code class="nx">Decorated</code><code class="p">.</code><code class="nx">prototype</code><code class="p">.</code><code class="nx">getColourRGB</code> <code class="o">=</code> <code class="kd">function</code> <code class="p">()</code> <code class="p">{</code>
<code class="lineno">16</code>     <code class="k">return</code> <code class="k">this</code><code class="p">.</code><code class="nx">colourCode</code><code class="p">;</code>
<code class="lineno">17</code>   <code class="p">};</code>
<code class="lineno">18</code>   
<code class="lineno">19</code>   <code class="k">return</code> <code class="nx">Decorated</code><code class="p">;</code>
<code class="lineno">20</code> <code class="p">};</code>
</pre></div>

</div>

<p>We’ll extract the decoration into a parameter like this:</p>

<div class="code-block">
<div class="highlight"><pre><code class="lineno"> 1</code> <code class="kd">function</code> <code class="nx">classDecorator</code> <code class="p">(</code><code class="nx">decoration</code><code class="p">,</code> <code class="nx">clazz</code><code class="p">)</code> <code class="p">{</code>
<code class="lineno"> 2</code>   <code class="kd">function</code> <code class="nx">Decorated</code>  <code class="p">()</code> <code class="p">{</code>
<code class="lineno"> 3</code>     <code class="kd">var</code> <code class="nx">self</code> <code class="o">=</code> <code class="k">this</code> <code class="k">instanceof</code> <code class="nx">Decorated</code>
<code class="lineno"> 4</code>                <code class="o">?</code> <code class="k">this</code>
<code class="lineno"> 5</code>                <code class="o">:</code> <code class="k">new</code> <code class="nx">Decorated</code><code class="p">();</code>
<code class="lineno"> 6</code>     
<code class="lineno"> 7</code>     <code class="k">return</code> <code class="nx">clazz</code><code class="p">.</code><code class="nx">apply</code><code class="p">(</code><code class="nx">self</code><code class="p">,</code> <code class="nx">arguments</code><code class="p">);</code>
<code class="lineno"> 8</code>   <code class="p">};</code>
<code class="lineno"> 9</code>   <code class="nx">Decorated</code><code class="p">.</code><code class="nx">prototype</code> <code class="o">=</code> <code class="nx">extend</code><code class="p">(</code><code class="k">new</code> <code class="nx">clazz</code><code class="p">(),</code> <code class="nx">decoration</code><code class="p">);</code>
<code class="lineno">10</code>   <code class="k">return</code> <code class="nx">Decorated</code><code class="p">;</code>
<code class="lineno">11</code> <code class="p">};</code>
</pre></div>

</div>

<p>And then “curry” the function manually like this:</p>

<div class="code-block">
<div class="highlight"><pre><code class="lineno"> 1</code> <code class="kd">function</code> <code class="nx">classDecorator</code> <code class="p">(</code><code class="nx">decoration</code><code class="p">)</code> <code class="p">{</code>
<code class="lineno"> 2</code> 
<code class="lineno"> 3</code>   <code class="k">return</code> <code class="kd">function</code> <code class="p">(</code><code class="nx">clazz</code><code class="p">)</code> <code class="p">{</code>
<code class="lineno"> 4</code>     <code class="kd">function</code> <code class="nx">Decorated</code>  <code class="p">()</code> <code class="p">{</code>
<code class="lineno"> 5</code>       <code class="kd">var</code> <code class="nx">self</code> <code class="o">=</code> <code class="k">this</code> <code class="k">instanceof</code> <code class="nx">Decorated</code>
<code class="lineno"> 6</code>                  <code class="o">?</code> <code class="k">this</code>
<code class="lineno"> 7</code>                  <code class="o">:</code> <code class="k">new</code> <code class="nx">Decorated</code><code class="p">();</code>
<code class="lineno"> 8</code>     
<code class="lineno"> 9</code>       <code class="k">return</code> <code class="nx">clazz</code><code class="p">.</code><code class="nx">apply</code><code class="p">(</code><code class="nx">self</code><code class="p">,</code> <code class="nx">arguments</code><code class="p">);</code>
<code class="lineno">10</code>     <code class="p">};</code>
<code class="lineno">11</code>     <code class="nx">Decorated</code><code class="p">.</code><code class="nx">prototype</code> <code class="o">=</code> <code class="nx">extend</code><code class="p">(</code><code class="k">new</code> <code class="nx">clazz</code><code class="p">(),</code> <code class="nx">decoration</code><code class="p">);</code>
<code class="lineno">12</code>     <code class="k">return</code> <code class="nx">Decorated</code><code class="p">;</code>
<code class="lineno">13</code>   <code class="p">};</code>
<code class="lineno">14</code>   
<code class="lineno">15</code> <code class="p">};</code>
</pre></div>

</div>

<p>We can try it:</p>

<div class="code-block">
<div class="highlight"><pre><code class="lineno"> 1</code> <code class="kd">var</code> <code class="nx">AndColourCoded</code> <code class="o">=</code> <code class="nx">classDecorator</code><code class="p">({</code>
<code class="lineno"> 2</code>   <code class="nx">setColourRGB</code><code class="o">:</code> <code class="nx">fluent</code><code class="p">(</code> <code class="kd">function</code> <code class="p">(</code><code class="nx">r</code><code class="p">,</code> <code class="nx">g</code><code class="p">,</code> <code class="nx">b</code><code class="p">)</code> <code class="p">{</code>
<code class="lineno"> 3</code>     <code class="k">this</code><code class="p">.</code><code class="nx">colourCode</code> <code class="o">=</code> <code class="p">{</code> <code class="nx">r</code><code class="o">:</code> <code class="nx">r</code><code class="p">,</code> <code class="nx">g</code><code class="o">:</code> <code class="nx">g</code><code class="p">,</code> <code class="nx">b</code><code class="o">:</code> <code class="nx">b</code> <code class="p">};</code>
<code class="lineno"> 4</code>   <code class="p">}),</code>
<code class="lineno"> 5</code>   <code class="nx">getColourRGB</code><code class="o">:</code> <code class="kd">function</code> <code class="p">()</code> <code class="p">{</code>
<code class="lineno"> 6</code>     <code class="k">return</code> <code class="k">this</code><code class="p">.</code><code class="nx">colourCode</code><code class="p">;</code>
<code class="lineno"> 7</code>   <code class="p">}</code>
<code class="lineno"> 8</code> <code class="p">});</code>
<code class="lineno"> 9</code> 
<code class="lineno">10</code> <code class="kd">var</code> <code class="nx">ColourTodo</code> <code class="o">=</code> <code class="nx">AndColourCoded</code><code class="p">(</code><code class="nx">Todo</code><code class="p">);</code>
<code class="lineno">11</code> 
<code class="lineno">12</code> <code class="k">new</code> <code class="nx">ColourTodo</code><code class="p">(</code><code class="s1">'Use More Decorators'</code><code class="p">).</code><code class="nx">setColourRGB</code><code class="p">(</code><code class="mi">0</code><code class="p">,</code> <code class="mi">255</code><code class="p">,</code> <code class="mi">0</code><code class="p">);</code>
<code class="lineno">13</code>   <code class="c1">//=&gt; { name: 'Use More Decorators',</code>
<code class="lineno">14</code>   <code class="c1">//     done: false,</code>
<code class="lineno">15</code>   <code class="c1">//     colourCode: { r: 0, g: 255, b: 0 } }</code>
</pre></div>

</div>

<p>Success! Our <code>classDecorator</code> function makes class decorators.</p>

<h3 id="leanpub-auto-iterator-recipes">Iterator Recipes</h3>

<h4 id="leanpub-auto-iterators-for-standard-data-structures">iterators for standard data structures</h4>

<p>Note: Despite having capitalized names, iterators are not meant to be used with the <code>new</code> keyword.</p>

<div class="code-block">
<div class="highlight"><pre><code class="lineno"> 1</code> <code class="kd">function</code> <code class="nx">FlatArrayIterator</code> <code class="p">(</code><code class="nx">array</code><code class="p">)</code> <code class="p">{</code>
<code class="lineno"> 2</code>   <code class="kd">var</code> <code class="nx">index</code><code class="p">;</code>
<code class="lineno"> 3</code>   <code class="nx">index</code> <code class="o">=</code> <code class="mi">0</code><code class="p">;</code>
<code class="lineno"> 4</code>   <code class="k">return</code> <code class="kd">function</code><code class="p">()</code> <code class="p">{</code>
<code class="lineno"> 5</code>     <code class="k">return</code> <code class="nx">array</code><code class="p">[</code><code class="nx">index</code><code class="o">++</code><code class="p">];</code>
<code class="lineno"> 6</code>   <code class="p">};</code>
<code class="lineno"> 7</code> <code class="p">};</code>
<code class="lineno"> 8</code> 
<code class="lineno"> 9</code> <code class="kd">function</code> <code class="nx">RecursiveArrayIterator</code> <code class="p">(</code><code class="nx">array</code><code class="p">)</code> <code class="p">{</code>
<code class="lineno">10</code>   <code class="kd">var</code> <code class="nx">index</code><code class="p">,</code> <code class="nx">myself</code><code class="p">,</code> <code class="nx">state</code><code class="p">;</code>
<code class="lineno">11</code>   <code class="nx">index</code> <code class="o">=</code> <code class="mi">0</code><code class="p">;</code>
<code class="lineno">12</code>   <code class="nx">state</code> <code class="o">=</code> <code class="p">[];</code>
<code class="lineno">13</code>   <code class="nx">myself</code> <code class="o">=</code> <code class="kd">function</code><code class="p">()</code> <code class="p">{</code>
<code class="lineno">14</code>     <code class="kd">var</code> <code class="nx">element</code><code class="p">,</code> <code class="nx">tempState</code><code class="p">;</code>
<code class="lineno">15</code>     <code class="nx">element</code> <code class="o">=</code> <code class="nx">array</code><code class="p">[</code><code class="nx">index</code><code class="o">++</code><code class="p">];</code>
<code class="lineno">16</code>     <code class="k">if</code> <code class="p">(</code><code class="nx">element</code> <code class="k">instanceof</code> <code class="nb">Array</code><code class="p">)</code> <code class="p">{</code>
<code class="lineno">17</code>       <code class="nx">state</code><code class="p">.</code><code class="nx">push</code><code class="p">({</code>
<code class="lineno">18</code>         <code class="nx">array</code><code class="o">:</code> <code class="nx">array</code><code class="p">,</code>
<code class="lineno">19</code>         <code class="nx">index</code><code class="o">:</code> <code class="nx">index</code>
<code class="lineno">20</code>       <code class="p">});</code>
<code class="lineno">21</code>       <code class="nx">array</code> <code class="o">=</code> <code class="nx">element</code><code class="p">;</code>
<code class="lineno">22</code>       <code class="nx">index</code> <code class="o">=</code> <code class="mi">0</code><code class="p">;</code>
<code class="lineno">23</code>       <code class="k">return</code> <code class="nx">myself</code><code class="p">();</code>
<code class="lineno">24</code>     <code class="p">}</code> <code class="k">else</code> <code class="k">if</code> <code class="p">(</code><code class="nx">element</code> <code class="o">===</code> <code class="k">void</code> <code class="mi">0</code><code class="p">)</code> <code class="p">{</code>
<code class="lineno">25</code>       <code class="k">if</code> <code class="p">(</code><code class="nx">state</code><code class="p">.</code><code class="nx">length</code> <code class="o">&gt;</code> <code class="mi">0</code><code class="p">)</code> <code class="p">{</code>
<code class="lineno">26</code>         <code class="nx">tempState</code> <code class="o">=</code> <code class="nx">state</code><code class="p">.</code><code class="nx">pop</code><code class="p">(),</code> <code class="nx">array</code> <code class="o">=</code> <code class="nx">tempState</code><code class="p">.</code><code class="nx">array</code><code class="p">,</code> <code class="nx">index</code> <code class="o">=</code> <code class="nx">tempState</code><code class="p">.</code><code class="nx">index</code><code class="p">;</code>
<code class="lineno">27</code>         <code class="k">return</code> <code class="nx">myself</code><code class="p">();</code>
<code class="lineno">28</code>       <code class="p">}</code> <code class="k">else</code> <code class="p">{</code>
<code class="lineno">29</code>         <code class="k">return</code> <code class="k">void</code> <code class="mi">0</code><code class="p">;</code>
<code class="lineno">30</code>       <code class="p">}</code>
<code class="lineno">31</code>     <code class="p">}</code> <code class="k">else</code> <code class="p">{</code>
<code class="lineno">32</code>       <code class="k">return</code> <code class="nx">element</code><code class="p">;</code>
<code class="lineno">33</code>     <code class="p">}</code>
<code class="lineno">34</code>   <code class="p">};</code>
<code class="lineno">35</code>   <code class="k">return</code> <code class="nx">myself</code><code class="p">;</code>
<code class="lineno">36</code> <code class="p">};</code>
</pre></div>

</div>

<h4 id="leanpub-auto-unfolding-iterators">unfolding iterators</h4>

<div class="code-block">
<div class="highlight"><pre><code class="lineno"> 1</code> <code class="kd">function</code> <code class="nx">NumberIterator</code> <code class="p">(</code><code class="nx">base</code><code class="p">)</code> <code class="p">{</code>
<code class="lineno"> 2</code>   <code class="kd">var</code> <code class="nx">number</code><code class="p">;</code>
<code class="lineno"> 3</code>   <code class="k">if</code> <code class="p">(</code><code class="nx">base</code> <code class="o">==</code> <code class="kc">null</code><code class="p">)</code> <code class="p">{</code>
<code class="lineno"> 4</code>     <code class="nx">base</code> <code class="o">=</code> <code class="mi">0</code><code class="p">;</code>
<code class="lineno"> 5</code>   <code class="p">}</code>
<code class="lineno"> 6</code>   <code class="nx">number</code> <code class="o">=</code> <code class="nx">base</code><code class="p">;</code>
<code class="lineno"> 7</code>   <code class="k">return</code> <code class="kd">function</code><code class="p">()</code> <code class="p">{</code>
<code class="lineno"> 8</code>     <code class="k">return</code> <code class="nx">number</code><code class="o">++</code><code class="p">;</code>
<code class="lineno"> 9</code>   <code class="p">};</code>
<code class="lineno">10</code> <code class="p">};</code>
<code class="lineno">11</code> 
<code class="lineno">12</code> <code class="kd">function</code> <code class="nx">FibonacciIterator</code> <code class="p">()</code> <code class="p">{</code>
<code class="lineno">13</code>   <code class="kd">var</code> <code class="nx">current</code><code class="p">,</code> <code class="nx">previous</code><code class="p">;</code>
<code class="lineno">14</code>   <code class="nx">previous</code> <code class="o">=</code> <code class="mi">0</code><code class="p">;</code>
<code class="lineno">15</code>   <code class="nx">current</code> <code class="o">=</code> <code class="mi">1</code><code class="p">;</code>
<code class="lineno">16</code>   <code class="k">return</code> <code class="kd">function</code><code class="p">()</code> <code class="p">{</code>
<code class="lineno">17</code>     <code class="kd">var</code> <code class="nx">value</code><code class="p">,</code> <code class="nx">tempValues</code><code class="p">;</code>
<code class="lineno">18</code>     <code class="nx">value</code> <code class="o">=</code> <code class="nx">current</code><code class="p">;</code>
<code class="lineno">19</code>     <code class="nx">tempValues</code> <code class="o">=</code> <code class="p">[</code><code class="nx">current</code><code class="p">,</code> <code class="nx">current</code> <code class="o">+</code> <code class="nx">previous</code><code class="p">],</code> <code class="nx">previous</code> <code class="o">=</code> <code class="nx">tempValues</code><code class="p">[</code><code class="mi">0</code><code class="p">],</code> <code class="nx">current</code><code class="o">\</code>
<code class="lineno">20</code>  <code class="o">=</code> <code class="nx">tempValues</code><code class="p">[</code><code class="mi">1</code><code class="p">];</code>
<code class="lineno">21</code>     <code class="k">return</code> <code class="nx">value</code><code class="p">;</code>
<code class="lineno">22</code>   <code class="p">};</code>
<code class="lineno">23</code> <code class="p">};</code>
</pre></div>

</div>

<h4 id="leanpub-auto-decorators-for-slicing-iterators">decorators for slicing iterators</h4>

<div class="code-block">
<div class="highlight"><pre><code class="lineno"> 1</code> <code class="kd">function</code> <code class="nx">take</code> <code class="p">(</code><code class="nx">iter</code><code class="p">,</code> <code class="nx">numberToTake</code><code class="p">)</code> <code class="p">{</code>
<code class="lineno"> 2</code>   <code class="kd">var</code> <code class="nx">count</code> <code class="o">=</code> <code class="mi">0</code><code class="p">;</code>
<code class="lineno"> 3</code>   <code class="k">return</code> <code class="kd">function</code><code class="p">()</code> <code class="p">{</code>
<code class="lineno"> 4</code>     <code class="k">if</code> <code class="p">(</code><code class="o">++</code><code class="nx">count</code> <code class="o">&lt;=</code> <code class="nx">numberToTake</code><code class="p">)</code> <code class="p">{</code>
<code class="lineno"> 5</code>       <code class="k">return</code> <code class="nx">iter</code><code class="p">();</code>
<code class="lineno"> 6</code>     <code class="p">}</code> <code class="k">else</code> <code class="p">{</code>
<code class="lineno"> 7</code>       <code class="k">return</code> <code class="k">void</code> <code class="mi">0</code><code class="p">;</code>
<code class="lineno"> 8</code>     <code class="p">}</code>
<code class="lineno"> 9</code>   <code class="p">};</code>
<code class="lineno">10</code> <code class="p">};</code>
<code class="lineno">11</code> 
<code class="lineno">12</code> <code class="kd">function</code> <code class="nx">drop</code> <code class="p">(</code><code class="nx">iter</code><code class="p">,</code> <code class="nx">numberToDrop</code><code class="p">)</code> <code class="p">{</code>
<code class="lineno">13</code>   <code class="k">while</code> <code class="p">(</code><code class="nx">numberToDrop</code><code class="o">--</code> <code class="o">!==</code> <code class="mi">0</code><code class="p">)</code> <code class="p">{</code>
<code class="lineno">14</code>     <code class="nx">iter</code><code class="p">();</code>
<code class="lineno">15</code>   <code class="p">}</code>
<code class="lineno">16</code>   <code class="k">return</code> <code class="nx">iter</code><code class="p">;</code>
<code class="lineno">17</code> <code class="p">};</code>
<code class="lineno">18</code> 
<code class="lineno">19</code> <code class="kd">function</code> <code class="nx">slice</code> <code class="p">(</code><code class="nx">iter</code><code class="p">,</code> <code class="nx">numberToDrop</code><code class="p">,</code> <code class="nx">numberToTake</code><code class="p">)</code> <code class="p">{</code>
<code class="lineno">20</code>   <code class="kd">var</code> <code class="nx">count</code> <code class="o">=</code> <code class="mi">0</code><code class="p">;</code>
<code class="lineno">21</code>   <code class="k">while</code> <code class="p">(</code><code class="nx">numberToDrop</code><code class="o">--</code> <code class="o">!==</code> <code class="mi">0</code><code class="p">)</code> <code class="p">{</code>
<code class="lineno">22</code>     <code class="nx">iter</code><code class="p">();</code>
<code class="lineno">23</code>   <code class="p">}</code>
<code class="lineno">24</code>   <code class="k">if</code> <code class="p">(</code><code class="nx">numberToTake</code> <code class="o">!=</code> <code class="kc">null</code><code class="p">)</code> <code class="p">{</code>
<code class="lineno">25</code>     <code class="k">return</code> <code class="kd">function</code><code class="p">()</code> <code class="p">{</code>
<code class="lineno">26</code>       <code class="k">if</code> <code class="p">(</code><code class="o">++</code><code class="nx">count</code> <code class="o">&lt;=</code> <code class="nx">numberToTake</code><code class="p">)</code> <code class="p">{</code>
<code class="lineno">27</code>         <code class="k">return</code> <code class="nx">iter</code><code class="p">();</code>
<code class="lineno">28</code>       <code class="p">}</code> <code class="k">else</code> <code class="p">{</code>
<code class="lineno">29</code>         <code class="k">return</code> <code class="k">void</code> <code class="mi">0</code><code class="p">;</code>
<code class="lineno">30</code>       <code class="p">}</code>
<code class="lineno">31</code>     <code class="p">};</code>
<code class="lineno">32</code>   <code class="p">}</code>
<code class="lineno">33</code>   <code class="k">else</code> <code class="k">return</code> <code class="nx">iter</code><code class="p">;</code>
<code class="lineno">34</code> <code class="p">};</code>
</pre></div>

</div>

<p>(<code>drop</code> was suggested by Redditor <a href="http://www.reddit.com/user/skeeto">skeeto</a>. His code also cleaned up an earlier version of <code>slice</code>.)</p>

<h4 id="leanpub-auto-catamorphic-decorator">catamorphic decorator</h4>

<div class="code-block">
<div class="highlight"><pre><code class="lineno"> 1</code> <code class="kd">function</code> <code class="nx">fold</code> <code class="p">(</code><code class="nx">iter</code><code class="p">,</code> <code class="nx">binaryFn</code><code class="p">,</code> <code class="nx">seed</code><code class="p">)</code> <code class="p">{</code>
<code class="lineno"> 2</code>   <code class="kd">var</code> <code class="nx">acc</code><code class="p">,</code> <code class="nx">element</code><code class="p">;</code>
<code class="lineno"> 3</code>   <code class="nx">acc</code> <code class="o">=</code> <code class="nx">seed</code><code class="p">;</code>
<code class="lineno"> 4</code>   <code class="nx">element</code> <code class="o">=</code> <code class="nx">iter</code><code class="p">();</code>
<code class="lineno"> 5</code>   <code class="k">while</code> <code class="p">(</code><code class="nx">element</code> <code class="o">!=</code> <code class="kc">null</code><code class="p">)</code> <code class="p">{</code>
<code class="lineno"> 6</code>     <code class="nx">acc</code> <code class="o">=</code> <code class="nx">binaryFn</code><code class="p">.</code><code class="nx">call</code><code class="p">(</code><code class="nx">element</code><code class="p">,</code> <code class="nx">acc</code><code class="p">,</code> <code class="nx">element</code><code class="p">);</code>
<code class="lineno"> 7</code>     <code class="nx">element</code> <code class="o">=</code> <code class="nx">iter</code><code class="p">();</code>
<code class="lineno"> 8</code>   <code class="p">}</code>
<code class="lineno"> 9</code>   <code class="k">return</code> <code class="nx">acc</code><code class="p">;</code>
<code class="lineno">10</code> <code class="p">};</code>
</pre></div>

</div>

<h4 id="leanpub-auto-hylomorphic-decorators">hylomorphic decorators</h4>

<div class="code-block">
<div class="highlight"><pre><code class="lineno"> 1</code> <code class="kd">function</code> <code class="nx">map</code> <code class="p">(</code><code class="nx">iter</code><code class="p">,</code> <code class="nx">unaryFn</code><code class="p">)</code> <code class="p">{</code>
<code class="lineno"> 2</code>   <code class="k">return</code> <code class="kd">function</code><code class="p">()</code> <code class="p">{</code>
<code class="lineno"> 3</code>     <code class="kd">var</code> <code class="nx">element</code><code class="p">;</code>
<code class="lineno"> 4</code>     <code class="nx">element</code> <code class="o">=</code> <code class="nx">iter</code><code class="p">();</code>
<code class="lineno"> 5</code>     <code class="k">if</code> <code class="p">(</code><code class="nx">element</code> <code class="o">!=</code> <code class="kc">null</code><code class="p">)</code> <code class="p">{</code>
<code class="lineno"> 6</code>       <code class="k">return</code> <code class="nx">unaryFn</code><code class="p">.</code><code class="nx">call</code><code class="p">(</code><code class="nx">element</code><code class="p">,</code> <code class="nx">element</code><code class="p">);</code>
<code class="lineno"> 7</code>     <code class="p">}</code> <code class="k">else</code> <code class="p">{</code>
<code class="lineno"> 8</code>       <code class="k">return</code> <code class="k">void</code> <code class="mi">0</code><code class="p">;</code>
<code class="lineno"> 9</code>     <code class="p">}</code>
<code class="lineno">10</code>   <code class="p">};</code>
<code class="lineno">11</code> <code class="p">};</code>
<code class="lineno">12</code> 
<code class="lineno">13</code> <code class="kd">function</code> <code class="nx">statefulMap</code> <code class="p">(</code><code class="nx">iter</code><code class="p">,</code> <code class="nx">binaryFn</code><code class="p">,</code> <code class="nx">initial</code><code class="p">)</code> <code class="p">{</code>
<code class="lineno">14</code>   <code class="kd">var</code> <code class="nx">state</code> <code class="o">=</code> <code class="nx">initial</code><code class="p">;</code>
<code class="lineno">15</code>   <code class="k">return</code> <code class="kd">function</code> <code class="p">()</code> <code class="p">{</code>
<code class="lineno">16</code>     <code class="nx">element</code> <code class="o">=</code> <code class="nx">iter</code><code class="p">();</code>
<code class="lineno">17</code>     <code class="k">if</code> <code class="p">(</code><code class="nx">element</code> <code class="o">==</code> <code class="kc">null</code><code class="p">)</code> <code class="p">{</code>
<code class="lineno">18</code>       <code class="k">return</code> <code class="nx">element</code><code class="p">;</code>
<code class="lineno">19</code>     <code class="p">}</code>
<code class="lineno">20</code>     <code class="k">else</code> <code class="p">{</code>
<code class="lineno">21</code>       <code class="k">if</code> <code class="p">(</code><code class="nx">state</code> <code class="o">===</code> <code class="k">void</code> <code class="mi">0</code><code class="p">)</code> <code class="p">{</code>
<code class="lineno">22</code>         <code class="k">return</code> <code class="p">(</code><code class="nx">state</code> <code class="o">=</code> <code class="nx">element</code><code class="p">);</code>
<code class="lineno">23</code>       <code class="p">}</code>
<code class="lineno">24</code>       <code class="k">else</code> <code class="k">return</code> <code class="p">(</code><code class="nx">state</code> <code class="o">=</code> <code class="nx">binaryFn</code><code class="p">.</code><code class="nx">call</code><code class="p">(</code><code class="nx">element</code><code class="p">,</code> <code class="nx">state</code><code class="p">,</code> <code class="nx">element</code><code class="p">));</code>
<code class="lineno">25</code>     <code class="p">}</code>
<code class="lineno">26</code>   <code class="p">}</code>
<code class="lineno">27</code> <code class="p">};</code>
<code class="lineno">28</code> 
<code class="lineno">29</code> <code class="kd">function</code> <code class="nx">filter</code> <code class="p">(</code><code class="nx">iter</code><code class="p">,</code> <code class="nx">unaryPredicateFn</code><code class="p">)</code> <code class="p">{</code>
<code class="lineno">30</code>   <code class="k">return</code> <code class="kd">function</code><code class="p">()</code> <code class="p">{</code>
<code class="lineno">31</code>     <code class="kd">var</code> <code class="nx">element</code><code class="p">;</code>
<code class="lineno">32</code>     <code class="nx">element</code> <code class="o">=</code> <code class="nx">iter</code><code class="p">();</code>
<code class="lineno">33</code>     <code class="k">while</code> <code class="p">(</code><code class="nx">element</code> <code class="o">!=</code> <code class="kc">null</code><code class="p">)</code> <code class="p">{</code>
<code class="lineno">34</code>       <code class="k">if</code> <code class="p">(</code><code class="nx">unaryPredicateFn</code><code class="p">.</code><code class="nx">call</code><code class="p">(</code><code class="nx">element</code><code class="p">,</code> <code class="nx">element</code><code class="p">))</code> <code class="p">{</code>
<code class="lineno">35</code>         <code class="k">return</code> <code class="nx">element</code><code class="p">;</code>
<code class="lineno">36</code>       <code class="p">}</code>
<code class="lineno">37</code>       <code class="nx">element</code> <code class="o">=</code> <code class="nx">iter</code><code class="p">();</code>
<code class="lineno">38</code>     <code class="p">}</code>
<code class="lineno">39</code>     <code class="k">return</code> <code class="k">void</code> <code class="mi">0</code><code class="p">;</code>
<code class="lineno">40</code>   <code class="p">};</code>
<code class="lineno">41</code> <code class="p">};</code>
</pre></div>

</div>

<!-- begin backmatter -->
<h2 id="leanpub-auto-the-golden-crema">The Golden Crema</h2>

<div class="image-with-caption center image-with-caption center">
  <img src="/site_images/javascript-allonge/la_marzocco.jpg" alt="You've earned a break!"><p class="caption">You’ve earned a break!</p>
</div>

<h3 id="leanpub-auto-authors-notes">Author’s Notes</h3>

<p>Dear friends and readers:</p>

<p>On October 1st, 2013, I announced that <a href="https://leanpub.com/javascript-allonge">JavaScript Allongé</a> became free: It is now licensed under a <a href="http://creativecommons.org/licenses/by-sa/3.0/deed.en_US" title="Creative Commons Attribution-ShareAlike 3.0 Unported License">Creative Commons Attribution-ShareAlike 3.0 Unported License</a>. You are free:</p>

<ul>
<li>to Share—to copy, distribute and transmit the work</li>
  <li>to Remix—to adapt the work</li>
  <li>to make commercial use of the work</li>
</ul>
<p>Read the <a href="http://creativecommons.org/licenses/by-sa/3.0/deed.en_US">license</a> yourself for the full details. But the bottom line is, it’s free, <em>free</em>, <strong>FREE</strong>!</p>

<p>And don’t just take my word for it, <a href="https://leanpub.com/javascript-allonge/read">here’s the entire book online</a>.</p>

<p>And now, a few questions and answers…</p>

<hr class="scene-break">
<h4 id="leanpub-auto-allonges-sounds-familiar">
<code>allong.es</code> sounds familiar…</h4>

<p>The recipes in JavaScript Allonge inspired a companion library called <a href="http://allong.es">allong.es</a>. It’s free to use, of course. Please try it out. It complements the libraries you may already be using like Underscore.</p>

<h4 id="leanpub-auto-i-noticed-that-the-recipes-changed-in-early-2013-why">I noticed that the recipes changed in early 2013. Why?</h4>

<p>Based on feedback from people exposed to other programming languages, I’ve renamed some of the recipe functions. While doing so, I also rewrote the partial application and some other parts of <a href="http://allong.es">allong.es</a> to exploit symmetry.</p>

<p>The new nomenclature has a few conventions. First, unless suffixed with <code>Now</code>, all functions are already curried. So you can write either <code>map(list, function)</code> or <code>map(list)(function)</code>. There isn’t one, but if there was a <code>map</code> that wasn’t curried, it would be called <code>mapNow</code>.</p>

<p>By default, functions take a data structure first and an operation second and are named after a verb, i.e. <code>map</code>, <code>filter</code>. As noted, they are curried by default.</p>

<p>Binary functions like <code>map</code> have a variation with their arguments flipped to have the “verb” first and the subject second. They are suffixed <code>With</code>, so you call <code>map(list, function)</code> or <code>mapWith(function, list)</code>.</p>

<p>Under the new nomenclature, what used to be called <code>splat</code> is now called <code>mapWith</code>, and when you supply only the function, the currying takes care of returning a function that takes as list as its argument. You’re mapping <em>with</em> a function.</p>

<h4 id="leanpub-auto-the-examples-seem-to-use-apply-and-call-indiscriminately-why">The examples seem to use <code>apply</code> and <code>call</code> indiscriminately. Why?</h4>

<p>In functional programming tradition, the function <code>apply</code> is used for functional application. Variations include <code>applyLeft</code> and <code>applyLast</code>. JavaScript is a little different: All functions have two methods: <code>.apply</code> takes an array of arguments, while <code>.call</code> takes separate arguments.</p>

<p>So the recipes in JavaScript Allongé follow the JavaScript convention: Those named <code>apply</code> take an array of arguments, while those named <code>call</code> take individual arguments. If you’re coming to this book with some functional programming under your belt, you’ll find the functions work the same way, it’s just that there are two of them to handle the two different ways to apply arguments to a function.</p>

<h4 id="leanpub-auto-i-dont-want-to-pay-to-download-a-pdf-can-i-make-my-own">I don’t want to pay to download a PDF. Can I make my own?</h4>

<p>Yes, you can take the HTML that is available online or the markdown source in <a href="https://github.com/raganwald/javascript-allonge/">the repository</a> and make your own PDF. Or any other format. Please be aware that while it’s technically possible to game the LeanPub system to produce the PDF or other formats, I ask you as a personal favour to find another way to make a PDF.</p>

<p>The license permits this choice, but IMO it is contrary to the spirit of sharing and openness to use their resources and work to do something that isn’t aligned with their mission. And of course, they may not care for the idea, I don’t know and I don’t want to undermine what has been a tremendous service for helping people write great technical books.</p>

<h4 id="leanpub-auto-great-book-can-i-share-it">Great book! Can I share it?</h4>

<p>And I’d also like you to share it, in this form, in PDF, or anything else. Go wild, just follow the attribution rules in the <a href="http://creativecommons.org/licenses/by-sa/3.0/deed.en_US" title="Creative Commons Attribution-ShareAlike 3.0 Unported License">license</a>.</p>

<h4 id="leanpub-auto-great-book-can-i-still-buy-it">Great book! Can I still buy it?</h4>

<p><a href="http://braythwayt.com/2013/10/04/the-freedom-to-pay-thirty-bucks.html" title="The Freedom to Pay Thirty Bucks">Yes, please do</a>.</p>

<h4 id="leanpub-auto-i-dont-want-to-buy-it-but-id-like-to-say-thank-you-with-a-tip">I don’t want to buy it, but I’d like to say “thank you” with a tip.</h4>

<p>Sure thing, you can send a donation via PayPal to reg@braythwayt.com, or click this button to donate $10 to help me write:</p>

<p><a href="https://www.paypal.com/cgi-bin/webscr?cmd=_s-xclick&amp;hosted_button_id=PNL4TZ4S37R34"><img src="/site_images/javascript-allonge/missing.png" alt="Donate $10"></a></p>

<h4 id="leanpub-auto-hey-i-have-a-great-way-to-make-money-with-this">Hey, I have a great way to make money with this…</h4>

<p>Go for it, you are free to make commercial use of the work. For example, you could host it on your site and make money from ads, or write a JS tool and use the book as part of the help content.</p>

<p>It’s all good, just follow the <a href="http://creativecommons.org/licenses/by-sa/3.0/deed.en_US" title="Creative Commons Attribution-ShareAlike 3.0 Unported License">license terms</a>. It is technically possible to create an identical clone of the book on LeanPub. I do not prohibit this activity, but I do ask you as a personal favour to ask yourself whether you could do <em>even better</em>, for instance to add value by adding your own annotations, expansions, and commentary. I’d love to see an “Annotated JavaScript Allongé.”</p>

<p>I’d also love to see translations, editions with large print, or anything else that brings something new to the world. Many people have asked for a hard-copy version. Who will be the first to set up shop on lulu.com?</p>

<h4 id="leanpub-auto-i-found-a-typo-how-do-i-tell-you-about-it">I found a typo! How do I tell you about it?</h4>

<p>My email inbox is a disaster zone, so let’s treat the book like open source. In order of my preference, you should:</p>

<ol class="numeric numeric">
<li>Create an <a href="https://github.com/raganwald/javascript-allonge/issues">issue</a>, fork <a href="https://github.com/raganwald/javascript-allonge/">the repo</a>, fix the issue, and then send me a <a href="https://github.com/raganwald/javascript-allonge/pulls">pull request</a>. (Best!!)</li>
  <li>Fork <a href="https://github.com/raganwald/javascript-allonge/">the repo</a>, fix things to your satisfaction, and then send me a <a href="https://github.com/raganwald/javascript-allonge/pulls">pull request</a>. (Better!)</li>
  <li>Create an <a href="https://github.com/raganwald/javascript-allonge/issues">issue</a>. (Good.)</li>
</ol>
<p>Thanks!</p>

<h3 id="online">How to run the examples</h3>

<p>If you follow the instructions at <a href="http://nodejs.org/">nodejs.org</a> to install NodeJS and JavaScript,<sup id="fnref-whoa"><a href="#fn-whoa" rel="footnote">39</a></sup> you can run an interactive JavaScript <a href="https://en.wikipedia.org/wiki/REPL" title="Read–eval–print loop">REPL</a> on your command line simply by typing <code>node</code>. This is how the examples in this book were tested, and what many programmers will do.</p>

<p>On OS X, you have the option of running Safaris’s JavaScript engine from the command line, or of installing a TextMate bundle. We didn’t use this method to test the examples, <a href="http://metaskills.net/2010/07/09/interactive-javascript-console-with-textmate/">so proceed at your own risk</a>. But have fun!</p>

<p>Almost all browsers have a mechanism to function as JavaScript <a href="https://en.wikipedia.org/wiki/REPL" title="Read–eval–print loop">REPLs</a>, allowing you to type JavaScript expressions into a debug console.</p>

<h3 id="leanpub-auto-thanks">Thanks!</h3>

<h4 id="leanpub-auto-daniel-friedman-and-matthias-felleisen">Daniel Friedman and Matthias Felleisen</h4>

<div class="image-with-caption center image-with-caption center">
  <img src="/site_images/javascript-allonge/little-schemer.jpg" alt="The Little Schemer"><p class="caption">The Little Schemer</p>
</div>

<p><em>JavaScript Allongé</em> was inspired by <a href="http://www.amzn.com/0262560992?tag=raganwald001-20">The Little Schemer</a> by Daniel Friedman and Matthias Felleisen. But where <em>The Little Schemer’s</em> primary focus is recursion, <em>JavaScript Allongé’s</em> primary focus is <strong>functions as first-class values</strong>.</p>

<div class="page-break"></div>
<h4 id="leanpub-auto-richard-feynman">Richard Feynman</h4>

<div class="image-with-caption center image-with-caption center">
  <img src="/site_images/javascript-allonge/qed.jpg" alt="QED: The Strange Theory of Light and Matter"><p class="caption">QED: The Strange Theory of Light and Matter</p>
</div>

<p>Richard Feynman’s <a href="http://www.amzn.com/0691125759?tag=raganwald001-20">QED</a> was another inspiration: A book that explains Quantum Electrodynamics and the “Sum of the Histories” methodology using the simple expedient of explaining how light reflects off a mirror, and showing how most of the things we think are happening–such as light travelling on a straight line,  the angle of reflection equalling the angle of refraction, or that a beam of light only interacts with a small portion of the mirror, or that it reflects off a plane–are all wrong. And everything is explained in simple, concise terms that build upon each other logically.</p>

<div class="page-break"></div>
<h3 id="leanpub-auto-coffeescript-ristretto">CoffeeScript Ristretto</h3>

<div class="image-with-caption center image-with-caption center">
  <img src="/site_images/javascript-allonge/coffeescript_ristretto_medium.jpg" alt="an intense doppio of programming"><p class="caption">an intense doppio of programming</p>
</div>

<p><a href="http://leanpub.com/coffeescript-ristretto">CoffeeScript Ristretto</a> is the companion book to <em>JavaScript Allongé</em>.</p>

<h3 id="leanpub-auto-copyright-notice">Copyright Notice</h3>

<p>The original words in this book are (c) 2012-2013, Reginald Braithwaite. All rights reserved.</p>

<h4 id="leanpub-auto-images">images</h4>

<ul>
<li>The picture of the author is (c) 2008, <a href="http://www.flickr.com/photos/trumpetca/">Joseph Hurtado</a>, All Rights Reserved. </li>
  <li>
<a href="http://www.flickr.com/photos/avlxyz/4907262046">Cover image</a> (c) 2010, avlxyz. <a href="http://creativecommons.org/licenses/by-sa/2.0/deed.en">Some rights reserved</a>. </li>
  <li>
<a href="http://www.flickr.com/photos/digitalcolony/5054568279/">Double ristretto menu</a> (c) 2010, Michael Allen Smith. <a href="http://creativecommons.org/licenses/by-sa/2.0/deed.en">Some rights reserved</a>.</li>
  <li>
<a href="http://www.flickr.com/photos/everydaylifemodern/1353570874/">Short espresso shot in a white cup with blunt handle</a> (c) 2007, EVERYDAYLIFEMODERN. <a href="http://creativecommons.org/licenses/by-nd/2.0/deed.en">Some rights reserved</a>.</li>
  <li>
<a href="http://www.flickr.com/photos/everydaylifemodern/434299813/">Espresso shot in a caffe molinari cup</a> (c) 2007, EVERYDAYLIFEMODERN. <a href="http://creativecommons.org/licenses/by-nd/2.0/deed.en">Some rights reserved</a>.</li>
  <li>
<a href="http://www.flickr.com/photos/the_rev/2295096211/">Beans in a Bag</a> (c) 2008, Stirling Noyes. <a href="http://creativecommons.org/licenses/by/2.0/deed.en">Some Rights Reserved</a>.</li>
  <li>
<a href="http://www.flickr.com/photos/thedigitelmyr/6199419022/">Free Samples</a> (c) 2011, Myrtle Bech Digitel. <a href="http://creativecommons.org/licenses/by-sa/2.0/deed.en">Some Rights Reserved</a>.</li>
  <li>
<a href="http://www.flickr.com/photos/sagamiono/4391542823/">Free Coffees</a> image (c) 2010, Michael Francis McCarthy. <a href="http://creativecommons.org/licenses/by-sa/2.0/deed.en">Some Rights Reserved</a>.</li>
  <li>
<a href="http://www.flickr.com/photos/digitalcolony/3924227011/">La Marzocco</a> (c) 2009, Michael Allen Smith. <a href="http://creativecommons.org/licenses/by-sa/2.0/deed.en">Some rights reserved</a>.</li>
  <li>
<a href="http://www.flickr.com/photos/15481483@N06/6231443466/">Cafe Diplomatico</a> (c) 2011, Missi. <a href="http://creativecommons.org/licenses/by-sa/2.0/deed.en">Some rights reserved</a>.</li>
  <li>
<a href="http://www.flickr.com/photos/tjgfernandes/2785677276/">Sugar Service</a> (c) 2008 Tiago Fernandes. <a href="http://creativecommons.org/licenses/by/2.0/deed.en">Some rights reserved</a>.</li>
  <li>
<a href="http://www.flickr.com/photos/kirstenloza/4805716699/">Biscotti on a Rack</a> (c) 2010 Kirsten Loza. <a href="http://creativecommons.org/licenses/by/2.0/deed.en">Some rights reserved</a>.</li>
  <li>
<a href="http://www.flickr.com/photos/jenny-pics/5053954146/">Coffee Spoons</a> (c) 2010 Jenny Downing. <a href="http://creativecommons.org/licenses/by/2.0/deed.en">Some rights reserved</a>.</li>
  <li>
<a href="http://www.flickr.com/photos/33388953@N04/4017985434/">Drawing a Doppio</a> (c) 2008 Osman Bas. <a href="http://creativecommons.org/licenses/by/2.0/deed.en">Some rights reserved</a>.</li>
  <li>
<a href="http://www.flickr.com/photos/tangysd/5953453156/">Cupping Coffees</a> (c) 2011 Dennis Tang. <a href="http://creativecommons.org/licenses/by-sa/2.0/deed.en">Some rights reserved</a>.</li>
  <li>
<a href="http://www.flickr.com/photos/digitalcolony/4000837035/">Three Coffee Roasters</a> (c) 2009 Michael Allen Smith. <a href="http://creativecommons.org/licenses/by-sa/2.0/deed.en">Some rights reserved</a>.</li>
  <li>
<a href="http://www.flickr.com/photos/digitalcolony/4309812256/">Blue Diedrich Roaster</a> (c) 2010 Michael Allen Smith. <a href="http://creativecommons.org/licenses/by-sa/2.0/deed.en">Some rights reserved</a>.</li>
  <li>
<a href="http://www.flickr.com/photos/bike/3237859728/">Red Diedrich Roaster</a> (c) 2009 Richard Masoner. <a href="http://creativecommons.org/licenses/by-sa/2.0/deed.en">Some rights reserved</a>.</li>
  <li>
<a href="http://www.flickr.com/photos/lacerabbit/2102801319/">Roaster with Tree Leaves</a> (c) 2007 ting. <a href="http://creativecommons.org/licenses/by-nd/2.0/deed.en">Some rights reserved</a>.</li>
  <li>
<a href="http://www.flickr.com/photos/nalundgaard/4785922266/">Half Drunk</a> (c) 2010 Nicholas Lundgaard. <a href="http://creativecommons.org/licenses/by-sa/2.0/deed.en">Some rights reserved</a>.</li>
  <li>
<a href="http://www.flickr.com/photos/paulmccoubrie/6828131856/">Anticipation</a> (c) 2012 Paul McCoubrie. <a href="http://creativecommons.org/licenses/by-nd/2.0/deed.en">Some rights reserved</a>.</li>
  <li>
<a href="http://www.flickr.com/photos/mikecogh/7676649034/">Ooh!</a> (c) 2012 Michael Coghlan. <a href="http://creativecommons.org/licenses/by-sa/2.0/deed.en">Some rights reserved</a>.</li>
  <li>
<a href="http://www.flickr.com/photos/yellowskyphotography/5641003165/">Intestines of an Espresso Machine</a> (c) 2011 Angie Chung. <a href="http://creativecommons.org/licenses/by-sa/2.0/deed.en">Some rights reserved</a>.</li>
  <li>
<a href="http://www.flickr.com/photos/andynash/6204253236/">Bezzera Espresso Machine</a> (c) 2011 Andrew Nash. <a href="http://creativecommons.org/licenses/by-sa/2.0/deed.en">Some rights reserved</a>.
*<a href="http://www.flickr.com/photos/28705377@N04/5306009552/">Beans Ripening on a Branch</a> (c) 2008 John Pavelka. <a href="http://creativecommons.org/licenses/by/2.0/deed.en">Some rights reserved</a>.</li>
  <li>
<a href="http://www.flickr.com/photos/shavejonathan/2343081208/">Cafe Macchiato on Gazotta Della Sport</a> (c) 2008 Jon Shave. <a href="http://creativecommons.org/licenses/by/2.0/deed.en">Some rights reserved</a>.</li>
  <li>
<a href="http://www.flickr.com/photos/ilovememphis/7103931235/">Jars of Coffee Beans</a> (c) 2012 Memphis CVB. <a href="http://creativecommons.org/licenses/by-nd/2.0/deed.en">Some rights reserved</a>.</li>
  <li>
<a href="http://www.flickr.com/photos/mikecogh/7561440544/">Types of Coffee Drinks</a> (c) 2012 Michael Coghlan. <a href="http://creativecommons.org/licenses/by-sa/2.0/deed.en">Some rights reserved</a>.</li>
  <li>
<a href="http://www.flickr.com/photos/dtownsend/6171015997/">Coffee Trees</a> (c) 2011 Dave Townsend. <a href="http://creativecommons.org/licenses/by-sa/2.0/deed.en">Some rights reserved</a>.</li>
  <li>
<a href="http://www.flickr.com/photos/93425126@N00/313053257/">Cafe do Brasil</a> (c) 2003 Temporalata. <a href="http://creativecommons.org/licenses/by-sa/2.0/deed.en">Some rights reserved</a>.</li>
  <li>
<a href="http://www.flickr.com/photos/digitalcolony/2833809436/">Brown Cups</a> (c) 2007 Michael Allen Smith. <a href="http://creativecommons.org/licenses/by-sa/2.0/deed.en">Some rights reserved</a>.</li>
  <li>
<a href="http://www.flickr.com/photos/citizenhelder/5006498068/">Mirage</a> (c) 2010 Mira Helder. <a href="http://creativecommons.org/licenses/by/2.0/deed.en">Some rights reserved</a>.</li>
  <li>
<a href="http://www.flickr.com/photos/joncrel/237026246/">Coffee Van with Bullet Holes</a> (c) 2006 Jon Crel. <a href="http://creativecommons.org/licenses/by-nd/2.0/deed.en">Some rights reserved</a>.</li>
  <li>
<a href="http://www.flickr.com/photos/nalundgaard/3163852170/">Disassembled Elektra</a> (c) 2009 Nicholas Lundgaard. <a href="http://creativecommons.org/licenses/by-sa/2.0/deed.en">Some rights reserved</a>.</li>
  <li>
<a href="http://www.flickr.com/photos/47000103@N05/6525288841/">Nederland Buffalo Bills Coffee Shop</a> (c) 2009 Charlie Stinchcomb. <a href="http://creativecommons.org/licenses/by-sa/2.0/deed.en">Some rights reserved</a>.</li>
  <li>
<a href="http://www.flickr.com/photos/lotzman/978418891/">For the love of coffee</a> (c) 2007 Lotzman Katzman. <a href="http://creativecommons.org/licenses/by/2.0/deed.en">Some rights reserved</a>.</li>
  <li>
<a href="http://www.flickr.com/photos/kk/sets/72157626168201654/with/5484839102/">Saltspring Processing Facility Pictures</a> (c) 2011 Kris Krug. <a href="http://creativecommons.org/licenses/by-sa/2.0/deed.en">Some rights reserved</a>.</li>
</ul>
<h3 id="leanpub-auto-about-the-author">About The Author</h3>

<p>When he’s not shipping JavaScript, Ruby, CoffeeScript and Java applications scaling out to millions of users, Reg “Raganwald” Braithwaite has authored <a href="http://github.com/raganwald">libraries</a> for JavaScript, CoffeeScript, and Ruby programming such as Method Combinators, Katy, JQuery Combinators, YouAreDaChef, andand, and others.</p>

<p>He writes about programming on “<a href="http://raganwald">Raganwald</a>,” as well as general-purpose ruminations on “<a href="http://braythwayt.com">Braythwayt Dot Com</a>”.</p>

<h4 id="leanpub-auto-contact">contact</h4>

<p>Twitter: <a href="https://twitter.com/raganwald">@raganwald</a>
Email: <a href="mailto:reg@braythwayt.com">reg@braythwayt.com</a></p>

<div class="image-with-caption center image-with-caption center">
  <img src="/site_images/javascript-allonge/reg2.jpg" alt='Reg "Raganwald" Braithwaite '><p class="caption">Reg “Raganwald” Braithwaite </p>
</div>

<div class="footnotes">
  <ol>
<li id="fn-representation">Technically, it’s a <em>representation</em> of a value using Base10 notation, but we needn’t worry about that in this book. You and I both understand that this means “42,” and so does the computer.<a href="#fnref-representation" rev="footnote">↩</a>
</li>
    <li id="fn-homoiconicity">In some languages, expressions are a kind of value unto themselves and can be manipulated. The grandfather of such languages is Lisp. JavaScript is not such a language, expressions in and of themselves are not values.<a href="#fnref-homoiconicity" rev="footnote">↩</a>
</li>
    <li id="fn-ambiguous">If you’re used to other programming languages, you’ve probably internalized the idea that sometimes parentheses are used to group operations in an expression like math, and sometimes to apply a function to arguments. If not… Welcome to the <a href="https://en.wikipedia.org/wiki/ALGOL">ALGOL</a> family of programming languages!<a href="#fnref-ambiguous" rev="footnote">↩</a>
</li>
    <li id="fn-fourth">Experienced JavaScript programmers are aware that there’s a fourth way, using a function argument. This was actually the preferred mechanism until <code>void</code> became commonplace.<a href="#fnref-fourth" rev="footnote">↩</a>
</li>
    <li id="fn-void">As an exercise for the reader, we suggest you ask your friendly neighbourhood programming language designer or human factors subject-matter expert to explain why a keyword called <code>void</code> is used to generate an <code>undefined</code> value, instead of calling them both <code>void</code> or both <code>undefined</code>. We have no idea.<a href="#fnref-void" rev="footnote">↩</a>
</li>
    <li id="fn-todonamed">TODO: Named functions, probably discussed in a whole new section when we discuss <code>var</code> hoisting.<a href="#fnref-todonamed" rev="footnote">↩</a>
</li>
    <li id="fn-asi">Readers who follow internet flame-fests may be aware of something called <a href="http://lucumr.pocoo.org/2011/2/6/automatic-semicolon-insertion/">automatic semi-colon insertion</a>. Basically, there’s a step where JavaScript looks at your code and follows some rules to guess where you meant to put semicolons in should you leave them out. This feature was originally created as a kind of helpful error-correction. Some programmers argue that since it’s part of the language’s definition, it’s fair game to write code that exploits it, so they deliberately omit any semicolon that JavaScript will insert for them.<a href="#fnref-asi" rev="footnote">↩</a>
</li>
    <li id="fn-mouthful">What a mouthful! This is why other languages with a strong emphasis on functions come up with syntaxes like ` -&gt; -&gt; undefined`<a href="#fnref-mouthful" rev="footnote">↩</a>
</li>
    <li id="fn-mp">
<a href="http://www.mindspring.com/~mfpatton/sketch.htm">The Argument Sketch</a> from “Monty Python’s Previous Record” and “Monty Python’s Instant Record Collection”<a href="#fnref-mp" rev="footnote">↩</a>
</li>
    <li id="fn-f2f">We said that you can’t apply a function to an expression. You <em>can</em> apply a function to one or more functions. Functions are values! This has interesting applications, and they will be explored much more thoroughly in <a href="#consumers">Functions That Are Applied to Functions</a>.<a href="#fnref-f2f" rev="footnote">↩</a>
</li>
    <li id="fn-nonlocal">You may also hear the term “non-local variable.” <a href="https://en.wikipedia.org/wiki/Free_variables_and_bound_variables">Both are correct.</a> <a href="#fnref-nonlocal" rev="footnote">↩</a>
</li>
    <li id="fn-let">To be pedantic, both main branches of Lisp today define a special construct called “let.” One, Scheme, <a href="https://en.wikipedia.org/wiki/Scheme_(programming_language)#Minimalism">uses <code>define-syntax</code> to rewrite <code>let</code> into an immediately invoked function expression that binds arguments to values</a> as shown above. The other, Common Lisp, leaves it up to implementations to decide how to implement <code>let</code>.<a href="#fnref-let" rev="footnote">↩</a>
</li>
    <li id="fn-namedfn">We’re into the second chapter and we’ve finally named a function. Sheesh.<a href="#fnref-namedfn" rev="footnote">↩</a>
</li>
    <li id="fn-lede">A lead (or lede) paragraph in literature refers to the opening paragraph of an article, essay, news story or book chapter. In journalism, the failure to mention the most important, interesting or attention-grabbing elements of a story in the first paragraph is sometimes called “burying the lede.”<a href="#fnref-lede" rev="footnote">↩</a>
</li>
    <li id="fn-caveats">A number of the caveats discussed here were described in Jyrly Zaytsev’s excellent article <a href="http://kangax.github.com/nfe/">Named function expressions demystified</a>.<a href="#fnref-caveats" rev="footnote">↩</a>
</li>
    <li id="fn-bluebird">As we’ll discuss later, this implementation of the B Combinator is correct in languages like Scheme, but for truly general-purpose use in JavaScript it needs to correctly manage the <a href="#context">function context</a>.<a href="#fnref-bluebird" rev="footnote">↩</a>
</li>
    <li id="fn-headache">Modern JavaScript implementations provide a map method for arrays, but Underscore’s implementation also works with older browsers if you are working with that headache.<a href="#fnref-headache" rev="footnote">↩</a>
</li>
    <li id="fn-pojo">Tradition would have us call objects that don’t contain any functions “POJOs,” meaning Plain Old JavaScript Objects.
      <p><a href="#fnref-pojo" rev="footnote">↩</a></p>
    </li>
    <li id="fn-inspired">
<code>callFirst</code> and <code>callLast</code> were inspired by Michael Fogus’ <a href="https://github.com/fogus/lemonad">Lemonad</a>. Thanks!<a href="#fnref-inspired" rev="footnote">↩</a>
</li>
    <li id="fn-hunh">Arrays in all contemporary languages store references and not copies, so we can be forgiven for expecting them to work the same way in JavaScript. Nevertheless, it’s a useful exercise to test things for ourself.<a href="#fnref-hunh" rev="footnote">↩</a>
</li>
    <li id="fn-gauss">There is a well known story about Karl Friedrich Gauss when he was in elementary school. His teacher got mad at the class and told them to add the numbers 1 to 100 and give him the answer by the end of the class. About 30 seconds later Gauss gave him the answer. The other kids were adding the numbers like this: <code>1 + 2 + 3 + . . . . + 99 + 100 = ?</code> But Gauss rearranged the numbers to add them like this: <code>(1 + 100) + (2 + 99) + (3 + 98) + . . . . + (50 + 51) = ?</code> If you notice every pair of numbers adds up to 101. There are 50 pairs of numbers, so the answer is 50*101 = 5050. Of course Gauss came up with the answer about 20 times faster than the other kids.<a href="#fnref-gauss" rev="footnote">↩</a>
</li>
    <li id="fn-why">Why provide a map function? well, JavaScript is an evolving language, and when you’re writing code that runs in a web browser, you may want to support browsers using older versions of JavaScript that didn’t provide the <code>.map</code> function. One way to do that is to “shim” the map method into the Array class, the other way is to use a map function. Most library implementations of map will default to the <code>.map</code> method if its available.<a href="#fnref-why" rev="footnote">↩</a>
</li>
    <li id="fn-mapWith">If we were always mapWithting arrays, we could write <code>list.map(fn)</code>. However, there are some objects that have a <code>.length</code> property and <code>[]</code> accessors that can be mapWithted but do not have a <code>.map</code> method. <code>mapWith</code> works with those objects. This points to a larger issue around the question of whether containers really ought to implement methods like <code>.map</code>. In a language like JavaScript, we are free to define objects that know about their own implementations, such as exactly how <code>[]</code> and <code>.length</code> works and then to define standalone functions that do the rest.<a href="#fnref-mapWith" rev="footnote">↩</a>
</li>
    <li id="fn-encapsulation">“A language construct that facilitates the bundling of data with the methods (or other functions) operating on that data.”–<a href="https://en.wikipedia.org/wiki/Encapsulation_" title="object-oriented_programming">Wikipedia</a><a href="#fnref-encapsulation" rev="footnote">↩</a>
</li>
    <li id="fn-length">Yes, there’s another way to track the size of the array, but we don’t need it to demonstrate encapsulation and hiding of state.<a href="#fnref-length" rev="footnote">↩</a>
</li>
    <li id="fn-refactoring">And when you take an already factored component and rearrange things so that it is factored into a different set of subcomponents without altering its behaviour, you are <em>refactoring</em>.<a href="#fnref-refactoring" rev="footnote">↩</a>
</li>
    <li id="fn-wasa">Before you start wondering whether a deque is-a queue, we said nothing about types and classes. This relationship is called was-a, or “implemented in terms of a.”<a href="#fnref-wasa" rev="footnote">↩</a>
</li>
    <li id="fn-this">JavaScript also does other things with <code>this</code> as well, but this is all we care about right now.<a href="#fnref-this" rev="footnote">↩</a>
</li>
    <li id="fn-toobad">Too bad the language binds the context to the name <code>this</code> instead of the name <code>context</code>!<a href="#fnref-toobad" rev="footnote">↩</a>
</li>
    <li id="fn-little">Just enough to be frustrating, to be perfectly candid!<a href="#fnref-little" rev="footnote">↩</a>
</li>
    <li id="fn-turing">Since the JavaScript that we have presented so far is <a href="https://en.wikipedia.org/wiki/Turing_completeness" title="Computational Universality and Turing Completeness">computationally universal</a>, it is possible to perform any calculation with its existing feature set, including emulating any other programming language. Therefore, it is not theoretically necessary to have any further language features; If we need macros, continuations, generic functions, static typing, or anything else, we can <a href="https://en.wikipedia.org/wiki/Greenspun%27s_Tenth_Rule">greenspun</a> them ourselves. In practice, however, this is buggy, inefficient, and presents our fellow developers with serious challenges understanding our code.<a href="#fnref-turing" rev="footnote">↩</a>
</li>
    <li id="fn-dynamic">For many programmers, the distinction between a dynamic relationship and a copying mechanism is too fine to worry about. However, it makes many dynamic program modifications possible.<a href="#fnref-dynamic" rev="footnote">↩</a>
</li>
    <li id="fn-reminder">Recall that Strings, Numbers, Booleans and so forth are value types and primitives. We’re calling them primitives here.<a href="#fnref-reminder" rev="footnote">↩</a>
</li>
    <li id="fn-reddit">Isnotlupus on Reddit suggested <a href="http://www.reddit.com/r/javascript/comments/15ix7s/weak_binding_in_javascript/c7n10yd">this line of thinking</a> against “weak binding” functions.<a href="#fnref-reddit" rev="footnote">↩</a>
</li>
    <li id="fn-create">Another approach that works with ECMASCRipt 5 and later is to base all classes around <a href="https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/Object/create">Object.create</a><a href="#fnref-create" rev="footnote">↩</a>
</li>
    <li id="fn-yecch">This book does not blindly endorse asking programmers to solve this or any abstract problem in a job interview.<a href="#fnref-yecch" rev="footnote">↩</a>
</li>
    <li id="fn-bookkeeping">Did you know that “bookkeeping” is the only word in the English language containing three consecutive letter pairs? You’re welcome.<a href="#fnref-bookkeeping" rev="footnote">↩</a>
</li>
    <li id="fn-big">The use of a third-party big integer library is not essential to understand trampolining.<a href="#fnref-big" rev="footnote">↩</a>
</li>
    <li id="fn-whoa">Instructions for installing NodeJS and modules like JavaScript onto a desktop computer is beyond the scope of this book, especially given the speed with which things advance. Fortunately, there are always up-to-date instructions on the web.<a href="#fnref-whoa" rev="footnote">↩</a>
</li>
  </ol>
</div>
</div>


</div>

<div class="span4" id="leanpub-sidebar">
  <div id="feedback_book" class="well">
  <section itemscope itemtype="http://schema.org/Book" class="row-fluid">
    <hgroup>
      <h3 itemprop="name">
        <a href="/javascript-allonge">JavaScript Allongé</a>
      </h3>

      <h4>
        A long pull of functions, combinators, &amp; decorators
      </h4>
    </hgroup>

    <p class="authors">
      by <a href="/u/raganwald">raganwald</a>
    </p>

    <a href="/javascript-allonge" class="cover_image"><img alt="Small?1403178329" height="155" itemprop="image" src="https://s3.amazonaws.com/titlepages.leanpub.com/javascript-allonge/small?1403178329" width="120" /></a>
    <div>
      <div class="buy_buttons">
      <a href="/javascript-allonge" class="btn btn-large learn_more" target="_top">Learn more</a>
      <div class="buy_button">
        <a href="/javascript-allonge/packages/book/purchases/new" class="btn btn-large btn-success" id="buy-now-button">Buy the ebook now!</a>
      </div>
      </div>
      <p class="prices">
        Minimum price: &nbsp;<span itemprop="lowPrice"><strong>$19.00</strong></span>
        <br/>
        Suggested price: &nbsp;<span itemprop="highPrice">$29.00</span>
      </p>
</p>

</section>
</div>

  <aside>
    <div class="cc-license">
<a href="http://creativecommons.org/licenses/by-sa/3.0/deed.en_US"><img src="/cc_images/cc-by-sa.png" alt="Creative Commons by-sa" /></a>
<br />
<p>This work is licensed under a <a href="http://creativecommons.org/licenses/by-sa/3.0/deed.en_US">Creative Commons Attribution-ShareAlike 3.0 Unported License</a></p>
</div>

  </aside>
</div>
</div>



<footer class='row'>
<div align='center' class='span12'>
<ul><li><a href="/buzz">Buzz</a></li><li><a href="http://blog.leanpub.com">Blog</a></li><li><a href="/manifesto">Manifesto</a></li><li><a href="/affiliates">Affiliate Program</a></li><li><a href="/terms">Terms of Service</a></li><li><a href="/privacy">Privacy Policy</a></li><li><a href="/takedown">Copyright Take Down Policy</a></li><li><a href="/team">About</a></li><li><a href="/contact">Contact Us</a></li></ul>
<p>Leanpub is copyright &copy; 2010-2014 Ruboss Technology Corporation.  All rights reserved.</p>
</div>
</footer>

</section>


<script src="/assets/application-78c85837de37fecab6ece2fd4114fdb4.js" type="text/javascript"></script>
   <script type="text/javascript">  var _gaq = _gaq || [];
  _gaq.push(['account2._setAccount', 'UA-27959034-6']);
  _gaq.push(['account2._setDomainName', 'leanpub.com']);
  _gaq.push(['account2._trackPageview']);
</script>
</body></html>
