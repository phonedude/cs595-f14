   #Pete Warden's blog » Feed Pete Warden's blog » Comments Feed Pete
   Warden's blog » Writing code is not most programmers’ primary task
   Comments Feed Five short links Five short links alternate alternate
   Pete Warden's blog WordPress.com

   Search ____________________ Search

Pete Warden's blog

Ever tried. Ever failed. No matter. Try Again. Fail again. Fail better.

Main menu

   Skip to content
     * Home
     * About

Writing code is not most programmers’ primary task

   February 24, 2014 By Pete Warden in Uncategorized 10 Comments

   lonelychair

   Photo by Brecht Soenen

   I just read Nathan Marz’s argument against open plan offices, and this
   sentence leapt out at me as almost always wrong: “The primary task of a
   programmer is writing code, which involves sitting at a desk and
   thinking and typing“. I’ve been a big fan of Nathan’s since his
   Backtype days, but while his prescriptions make a lot of sense if you
   really are spending most of your time typing out new code based on
   clear requirements, I’ve found that a very rare position to be in. In
   my experience writing the code takes way less time than integrating and
   debugging it, let alone the open-ended process of figuring out what the
   requirements are. Most of my time goes on all those squishy bits. I
   look forward to the uninterrupted intervals when I get to just write
   code, but they’re not all that frequent.

   When I started in games people who could write 3D software renderers
   were rare and highly-paid, but libraries and books came along that made
   their skills obsolete. Then it was folks who could program the fiendish
   DMA controllers on the Playstation 2, but soon enough they were
   sidelined too, followed by the game physics gurus, the shader hackers,
   and everyone else who brought only coding skills to the table. It turns
   out that we’re doing a pretty good job of making the mechanical process
   of writing code easier, with higher-level languages, better frameworks
   (something Nathan knows a lot about), and training that’s creating far
   more people who can produce programs. What I saw in games was that
   coding was the ticket that got me in the door, but improving all the
   other skills I needed as an engineer was what really helped me do a
   better job.

   I learned to write a software renderer, but chatting with the artists
   who were building the models made me realize that I could make the game
   look far better and run much faster by building a tool in 3DS Max they
   could use to preview their work in-game. It reduced their iteration
   time from days to minutes, which meant they could try a lot more ways
   to reduce the polygon count without compromising the look. I would
   never have made this leap if I hadn’t been sitting in an open plan
   office where I could hear them cursing!

   Since then I’ve seen the cycle repeat itself in every new industry I’ve
   joined. When the technology is new and hard to use, just knowing how to
   operate it gives you a high status position, but the tide of Moore’s
   Law and the spread of knowledge makes that a very temporary throne. The
   technical impediments always disappear, and graduates come out of
   college knowing what used to be elite skills. What keeps you in a job
   is the ability to be the interface between the precise requirements of
   software and the rest of the world filled with messy, contradictory and
   incompletely understood problems.

   In passing Nathan mentions measuring productivity, but that’s one of
   the stickiest problems in software, with an inglorious history from
   counting lines of code to stack ranking. Most of my most useful
   contributions at the companies I’ve worked at have been when I’ve
   avoided producing what someone has asked me for, and instead given them
   what they need, which meant a lot of conversations to really understand
   the background. I also spend a lot of time passing on what I know to
   other people who are hitting problems, which hits my individual
   productivity but helps the team’s. The only meaningful level at which
   you can measure productivity is for the whole group tackling the
   problem, including the designers, QA, marketers, translators, and
   everyone else outside of coding who’s needed for almost any product
   you’re building. In almost every place I’ve worked, they would be able
   to make far more progress if they could interrupt the programmers a lot
   more, even though I’d hate it as an engineer!

   I am actually ambivalent about open plan offices myself. Having my own
   room often seems like a delicious dream, and headphones are a poor
   alternative when I’m really diving deep into the code. What stops me
   from pushing for that is the knowledge that my job is all about
   collaboration, and an open arrangement truly does enable that. The
   interruptions aren’t getting in the way of my primary work, the
   interruptions are my primary work.

Share this:

     * Twitter
     * Facebook
     * Google
     *

Like this:

   Like Loading...

Related

Post navigation

   « Five short links
   Five short links »

10 responses

    1. Nathan Marz says:
       February 25, 2014 at 7:36 am
       Thanks for the great counterpoint. I certainly agree 100% on the
       value of tight feedback loops and collaboration. I think where we
       disagree is on whether an open floor plan really promotes that
       collaboration in a way that wouldn’t be possible without the open
       floor plan. Just because you have a non-open floor plan does not
       mean you can’t have exactly the collaboration you describe – you
       can still easily gather the programmers and designers into the same
       room and have them work together for an afternoon. The key is that
       the working environment should be dictated by those who will work
       in it. So if you need the focus and concentration you can have it,
       and if you need the tight collaboration you can have that instead.
       The problem with open floor plans is that environment for focus and
       concentration is never available to you. My current thinking around
       the ideal office layout is small 2-4 person offices with large
       “collaboration areas” where people can work together in bigger
       groups and be louder.
       Now in terms of quantifying where programmers spend their time, I
       think that’s hard to say. As is clear from your post and mine we
       have very different backgrounds in that regard. But regardless of
       that I still think that we can do better than open floor plans. As
       I alluded to above I think a more flexible office environment would
       allow the best of all worlds. It would be a more expensive office,
       of course, but I think it would be well worth it.
       Reply
    2. Marc says:
       February 25, 2014 at 7:44 am
       This non-argument seems, to me, to be summed up best by the two
       statements: “Writing code is not most programmers’ primary task,”
       and, “The key is that the working environment should be dictated by
       those who will work in it.” Feelin’ it.
       Also, get better headphones, Pete.
       Reply
    3. Alan Klement (@alanklement) says:
       February 25, 2014 at 12:44 pm
       “In my experience writing the code takes way less time than
       integrating and debugging it”
       Maybe if you had better working conditions (privacy for engineers),
       you’d write less buggy code and your engineer team would be forced
       to (gasp) plan how to integrate and organize every engineer’s code.
       ;)
       …joking aside, this argument has logical errors. First, it infers
       that collaboration and private / quiet working conditions are
       mutually exclusive – they are not. You can have both. Take the NYC
       Google office for example. There are numerous big and small rooms.
       The team may be assigned a bullpen area, but you can get up and
       walk to a private / semi private room to work as well.
       Guys, this topic has been talked to death (well over 10 years ago)
       and it’s decided: Engineers and creatives *need* quiet working
       conditions *available* to them. You guys are all arguing past each
       other b/c you’re talking in absolutes.
       Here are better arguments done 10+ years ago.
       http://www.joelonsoftware.com/articles/fog0000000043.html
       http://www.joelonsoftware.com/articles/FieldGuidetoDevelopers.html
       Reply
    4. Pingback: Preventing Errors in Code | ebeab
    5. Christopher Mahan (@chris_mahan) says:
       February 25, 2014 at 10:14 pm
       Programming is only one function of a greater job, which is to
       allow other people to do their job more effectively, both by
       automating the boring parts and by allowing new insight.
       Management thinks it does the second part well, and for some
       companies that may be true. In my experience, however, I’ve always
       seen myself as a helper of others who happens to be able to do it
       with programming.
       Reply
    6. Pingback: Five short links « Pete Warden's blog
    7. Treasa Lynch says:
       March 2, 2014 at 10:16 am
       I just wanted to comment on this briefly. The extent to which open
       offices are beneficial depend – very much – on a) how they are
       designed and b) what the work done in them is. I’ve done the same
       kind of work in two very different open offices. One worked very
       effectively, one was absolute hell. If the objective of an open
       office is to cram as many people into the floorspace as possible,
       you’re on a loser from day one. If you give people space, and an
       environment which is engineered to reduce noise clutter, then
       possibly you wind up with a workable system. But the either/or
       debate on open offices has to be coloured by the implementation of
       same.
       Reply
    8. KeithA says:
       March 5, 2014 at 6:13 pm
       “In my experience … let alone the open-ended process of figuring
       out what the requirements are.”
       From what I have seen that last part is the real killer. Ever
       worked on a project that seriously changed direction after the
       coding cycle had started? Or, should I say, ever not worked on one?
       Reply
    9. Pingback: How to Make the Best of Website Development Trends, Circa
       2014 - Olivier Travers
   10. Pingback: Preventing Errors in Code | mkaz.com

Leave a Reply Cancel reply

   Enter your comment here...

   ____________________________________________________________
   ____________________________________________________________
   ____________________________________________________________
   ____________________________________________________________

   Fill in your details below or click an icon to log in:
     *
     *
     *
     *
     *

   Gravatar
   Email (required) (Address never made public)
   ____________________
   Name (required)
   ____________________
   Website
   ____________________
   WordPress.com Logo

   You are commenting using your WordPress.com account.
   ( Log Out / Change )
   Twitter picture

   You are commenting using your Twitter account. ( Log Out / Change )
   Facebook photo

   You are commenting using your Facebook account. ( Log Out / Change )
   Google+ photo

   You are commenting using your Google+ account. ( Log Out / Change )
   Cancel

   Connecting to %s

   [ ] Notify me of new comments via email.

   [ ] Notify me of new posts via email.

   Post Comment

Follow @petewarden on Twitter

   My Tweets
     * RSS - Posts

Recent Posts

     * Untethered, by Jinky de Rivera
     * Five short links
     * How to optimize Raspberry Pi code using its GPU
     * How to get computer vision out of the unimpressive valley
     * Setting up Caffe on Ubuntu 14.04

Recent Comments

   wachsen on Using your browser history to…
   Handy trotz schufa on How to access the Enron data…
   lonelyplate.org on Social network data and r…
   Buttlift on Added a close button, dug some…
   Vancouver Roofing Co… on Using your browser history to…

Archives

     * September 2014
     * August 2014
     * July 2014
     * June 2014
     * May 2014
     * April 2014
     * March 2014
     * February 2014
     * January 2014
     * December 2013
     * November 2013
     * October 2013
     * September 2013
     * August 2013
     * July 2013
     * June 2013
     * May 2013
     * April 2013
     * March 2013
     * February 2013
     * January 2013
     * November 2012
     * October 2012
     * August 2012
     * July 2012
     * June 2012
     * May 2012
     * April 2012
     * March 2012
     * February 2012
     * January 2012
     * December 2011
     * November 2011
     * October 2011
     * September 2011
     * August 2011
     * July 2011
     * June 2011
     * May 2011
     * April 2011
     * March 2011
     * February 2011
     * January 2011
     * December 2010
     * November 2010
     * October 2010
     * September 2010
     * August 2010
     * July 2010
     * June 2010
     * May 2010
     * April 2010
     * March 2010
     * February 2010
     * January 2010
     * December 2009
     * November 2009
     * October 2009
     * September 2009
     * August 2009
     * July 2009
     * June 2009
     * May 2009
     * April 2009
     * March 2009
     * February 2009
     * January 2009
     * December 2008
     * November 2008
     * October 2008
     * September 2008
     * August 2008
     * July 2008
     * June 2008
     * May 2008
     * April 2008
     * March 2008
     * February 2008
     * January 2008
     * December 2007
     * November 2007
     * October 2007
     * September 2007
     * August 2007
     * July 2007
     * June 2007
     * May 2007
     * April 2007
     * March 2007
     * December 2006
     * November 2006
     * October 2006
     * September 2006
     * August 2006

Pete Warden's blog

Footer menu

     * Home
     * About

   Blog at WordPress.com. | The Elemin Theme. Design by Themify.
   ↑

   Follow

Follow “Pete Warden's blog”

   Get every new post delivered to your Inbox.

   Join 95 other followers

   Enter your email add

   Sign me up
   Powered by WordPress.com

   IFRAME: likes-master

   %d bloggers like this:
