   #Communications of the ACM: Current Issue [RSS 2.0]

   ACM
   [acm_header.png]
   Sign In
   Search ____________________
   (BUTTON) Go
     * ACM.org
     * Join ACM
     * About Communications
     * ACM Resources
     * Alerts & Feeds

Communications of the ACM

     * Home
     * Current Issue
       Latest issue Current Issue: September 2014 Disrupting and
       Transforming the University Abstractions for Software-Defined
       Networks Reading News with Maps by Exploiting Spatial Synonyms VIEW
       TABLE OF CONTENTS
     * News
       Latest News News Archive
     * Blogs
       About the Blogs BLOG@CACM Blogroll Blogs Archive
     * Opinion
       Articles Interviews Opinion Archive
     * Research
       Latest Research Research Archive
     * Practice
       Latest Practice Practice Archive
     * Careers
          + Search for Jobs
          + Post a Resume
          + Create a Job Alert
          + View Featured Jobs
          + Post A Job
          + View Resumes
          + Advertise with Us
          + Contact Us
     * Magazine Archive
       The magazine archive includes every article published in
       Communications of the ACM for over the past 50 years.
       September 2014 (Vol. 57, No. 10)
       September 2014 (Vol. 57, No. 9)
       August 2014 (Vol. 57, No. 8)
       VIEW MORE ISSUES

   Home/Magazine Archive/February 2014 (Vol. 57, No. 2)/Should Everybody
   Learn to Code?/Full Text
   News

Should Everybody Learn to Code?
     __________________________________________________________________

   By Esther Shein
   Communications of the ACM, Vol. 57 No. 2, Pages 16-18
   10.1145/2557447
   Comments (1)
   View as: Print ACM Digital Library Full Text (PDF) In the Digital
   Edition Share: Send by email Share on reddit Share on StumbleUpon
   Share on Tweeter Share on Facebook
   Share
   second-grade participants in 2013 Hour of Code

   Second-grade students in Kevin Jarrett's Elementary 'STE MLAB' at
   Northfield Community School (New Jersey) participate in the 2013 Hour
   of Code.

   Credit: Kevin Jarrett

   IFRAME: http://www.youtube.com/embed/M9m9GgY93Z4

   To gauge the ability of professional graphic designers to do basic
   programming, Brian Dorn, then a graduate student at the Georgia
   Institute of Technology (Georgia Tech), asked a group of them to read
   and modify a piece of program code. The idea was to see whether they
   could turn themselves into informal programmers and figure out how to
   develop automated functions in Adobe Photoshop. Unfortunately, when the
   designers conducted Web searches to look for information on the code
   they needed, they sometimes used results that pointed them in the wrong
   direction, which was toward Java혰when they actually needed to be using
   JavaScript for this particular project.

   One of the underlying causes could have been tied to the participants'
   "lack of sufficient general, abstract knowledge of the computing and/or
   programming structures at play," wrote Dorn in Communications in May
   2011.

   His advisor, Mark Guzdial, who relayed the story, said the findings
   indicate to him "that there are a lot of people who need knowledge of
   computer science ... who are going to use it in their lives, but
   because they never learned anything about computer science, they are
   teaching it [to] themselves and coding inefficiently, and wasting a lot
   of time and getting frustrated."

   If someone is going to become a knowledge worker, or take on any job
   "that requires an undergraduate degree," they should know how to read a
   piece of code that is useful to them and be able to make changes to it,
   says Guzdial, a professor and director of Contextualized Support for
   Learning in the School of Interactive Computing at Georgia Tech.

   People ranging from former President Bill Clinton to Facebook creator
   Mark Zuckerberg to physicist, cosmologist, and author Stephen Hawking
   have expressed the belief that basic computer programming is an
   essential skill in today's world. "Code has become the 4th literacy.
   Everyone needs to know how our digital world works, not just
   engineers," says Mark Surman, executive director of the Mozilla
   Foundation, whose comments are among those of dozens of luminaries on
   code.org.

   The demand for computer scientists and technical professionals in the
   U.S. is projected to grow 34% through 2018, according to the Bureau of
   Labor Statistics. Many people already engage in some level of
   programming; Guzdial cites a 2005 Carnegie Mellon University study
   indicating that in 2012 there would be 90 million workers in the U.S.,
   more than 55 million of whom would use spreadsheets and databases,
   which can be deemed programming. The study also projected that more
   than 13 million would describe themselves as "programmers" in 2012,
   although only three million of them would be professional software
   developers.

   The Carnegie Mellon study also noted that a lot of people were doing
   programming without realizing it, by creating macros for spreadsheets
   or doing database queries using SQL. "So the argument is, lots of
   people are going to do programming," says Guzdial, "and the data we
   have studying how end user programmers teach themselves and the types
   of mistakes they make suggest if they knew something about computer
   science, they might not have to struggle so much later."

   Many people who avoided taking science and math courses in college are
   now struggling as they try to teach themselves how to program, he
   points out. "How many more would be doing some programming if we helped
   them? That is the interesting part."

   Back to Top

What You Should Learn

   Everyone should learn computational thinking, maintains Jeannette Wing,
   corporate vice president at Microsoft Research. Computational thinking
   helps people learn how to think abstractly and pull apart a problem
   into smaller pieces. One concrete way to learn aspects of those skills
   is programming, Wing says.

   That is not to say everyone needs to learn a specific programming
   language like Python or C++, even though many people identify
   programming with turning out code, Wing says. "First of all, that is
   too low-level, and it is also very narrow an interpretation of what I
   believe is more important."

   Instead of teaching everyone to churn out code, the emphasis should be
   on learning problem-solving skills in computer science, much like the
   problem-solving skills one learns in math and engineering, says Wing,
   who is on leave as President's Professor of Computer Science at
   Carnegie Mellon. Writing a program is an explicit way of expressing a
   solution that a human or machine can carry out, she says. "The more
   fundamental skill and more critical thinking skill is what comes before
   you write down this piece of code, and that is computational thinking."

   Guzdial agrees. "Should we learn enough so that you can write a script
   to do something that otherwise would have to be done by hand? I would
   like to see that, but I cannot make the argument that it is an
   absolutely necessity."

   He adds that ignorance of computer science puts people at a
   disadvantage in today's world. "Not knowing anything about programming
   makes it more difficult to pick it up."

   Back to Top

The Flip Side

   The issue is far more black and white to software engineer Chase
   Felker, who wrote an article for Slate magazine entitled "Maybe Not
   Everybody Should Learn to Code." Felker writes, "Frankly, just the idea
   that you can learn to code in a year gives me the creeps: I would be
   terrified if someone with only a couple of classes were writing
   programs for me, not because he (of course, and unfortunately, most
   programmers are men) has learned anything wrong혰but because of what he
   doesn't know."
                     ___________________________________

      Computational thinking helps people learn how to think abstractly
                and pull a problem apart into smaller pieces.
                     ___________________________________

   While noting that several of his colleagues are successful self-taught
   programmers, and that learning to program does not necessarily have to
   be done at a university, Felker says people need to know more than
   memorizing the technology du jour and, as Wing said, they need the
   critical ability to think things through.

   "[I]f you aren't dreaming of becoming a programmer혰and therefore
   planning to embark on a lengthy course of study, whether self-directed
   or formal혰I can't endorse learning to code," Felker writes. "Yes, it is
   a creative endeavor. At its base, it's problem-solving, and the rewards
   for exposing holes in your thinking and discovering elegant solutions
   are awesome." He goes on to say he does not believe that most people
   who learn to code end up learning anything that stays with them.

   Referencing a comment made by New York City Mayor Michael Bloomberg in
   2012 that he would learn to code, programmer Jeff Atwood, writing in
   his blog "Code Horror," poses the question, "...can you explain to me
   how Michael Bloomberg would be better at his day-to-day job of leading
   the largest city in the USA if he woke up one morning as a crack Java
   coder?" While agreeing that programming is important, Atwood says many
   other skills are important, too. "I would no more urge everyone to
   learn programming than I would urge everyone to learn plumbing," he
   writes.

   The so-called "everyone should learn to code" movement is wrong for
   several reasons, according to Atwood, including the assumption that
   more code in the world is an inherently desirable thing. That assumes
   code is the goal; it puts the method before the problem, and assumes
   adding coders to the workforce is a net positive.

   "The general populace (and its political leadership) could probably
   benefit most of all from a basic understanding of how computers, and
   the Internet, work," he says. "Being able to get around on the Internet
   is becoming a basic life skill, and we should be worried about fixing
   that first and most of all, before we start jumping all the way into
   code."

   Guzdial speculates there may be pushback from programmers, because they
   think not everyone can be taught what they do. "I am not suggesting
   everyone produce thousands and thousands of lines of code. I would love
   if everyone could graduate from a university writing 10 lines of code
   that are useful to them."

   The point of teaching programming in high school would be to give
   students some level of literacy relative to programming, including the
   ability to think about things in terms of code, and to understand what
   code can do, Guzdial adds.

   Back to Top

The State of Computer Science in Public Education

   That may not, however, occur in schools. Many in the computer science
   field say the U.S. is severely lagging in making even basic computer
   science a priority in K혯12 schools. "While other countries have
   designed and implemented national computer science education programs
   in order to better prepare their students for the increasingly
   competitive global economy, the decentralized (state, district-wide,
   and even school-based) educational decision-making process in the U.S.
   has severely hampered efforts to standardize our computer science
   curriculum and create coherence in student learning," according to the
   2010 report, "Addressing Core Equities in K혯12 Computer Science
   Education."

   Guzdial believes the biggest problem in teaching computer science in
   the U.S. is the lack of teachers who know the discipline. He estimates
   there are about 30,000 high schools in the country, but only 2,000
   Advanced Placement computer science teachers.

   Students as young as five can learn to program, Guzdial maintains, but
   he questions why they should. "I am not sure what we can teach them
   from a cognitive perspective." Although there have been studies done on
   children learning to program in the Scratch programming language, "in
   general what we find is kids that young do not do the things you
   naturally would expect coding to involve," including loops and
   conditionals.
                     ___________________________________

          Students as young as five can learn some basic concepts of
       programming, similar to the number and counting skills children
                      typically are taught at that age.
                     ___________________________________

   He says he is concerned about cognitive development. "What we know
   about cognitive development is you typically develop the ability to do
   abstract reasoning around the age of 12," and programming is a very
   abstract activity. Guzdial is unsure whether young children who program
   develop abstract reasoning earlier, or if they are only able to learn a
   little bit of programming skills.

   Overall, though, he says computer science should be taught in
   schools혯but starting at age five or six, when only 12% of high schools
   in the U.S. offer computer science courses and far fewer middle and
   elementary schools, creating a great divide. Guzdial says, "They are
   unlikely to see it again for a dozen years, so why offer it at five or
   six?"

   Wing also says that, while age five may be too early to teach how to
   code, students that young can learn some basic concepts similar to the
   number and counting skills children typically are taught at that age.
   As they get older, students should be taught other concepts, like what
   an algorithm is, ways to represent data, and different analysis
   techniques in order to understand and reason, she says.

   Back to Top

Looking Ahead

   Just as students are taught reading, writing, and the fundamentals of
   math and the sciences, computer science may one day become a standard
   part of a K혯12 school curriculum. If that happens, there will be
   significant benefits, observers say. As the kinds of problems we will
   face in the future will continue to increase in complexity, the systems
   being built to deal with that complexity will require increasingly
   sophisticated computational thinking skills, such as abstraction,
   decomposition, and composition, says Wing.

   "If I had a magic wand, we would have some programming in every
   science, mathematics, and arts class, maybe even in English classes,
   too," says Guzdial. "I definitely do not want to see computer science
   on the side ... I would have computer science in every high school
   available to students as one of their required science or mathematics
   classes."

   Back to Top

Further Reading

   C. Simard, C. Stephenson, D. Kosaraju
   "Addressing Core Equities in K혯12 Computer Science Education:
   Identifying Barriers And Sharing Strategies," 2009.
   http://anitaborg.org/files/ABI-csta-full-report.pdf

   C. Felker
   "Maybe Not Everybody Should Learn to Code," 2013.
   http://www.slate.com/articles/technology/future_tense/2013/08/everybody
   _does_not_need_to_learn_to_code.html

   Martyr2
   "Why Everyone Should NOT Learn to Code," 2013.
   http://www.coderslexicon.com/why-everyone-should-not-learn-to-code/

   D. Haggard
   "Why Everyone Should Learn to Program," 2011.
   http://reviewsindepth.com/2011/04/why-everyone-should-learn-to-program/

   P. Norvig
   "Teach Yourself Programming in Ten Years," 2001.
   http://norvig.com/21-days.html

   J. Lave
   "Cognition in Practice: Mind, Mathematics, and Culture in Everyday
   Life," 1988, Cambridge University Press.

   J.R. Hayes
   "The Complete Problem Solver," 1989. Lawrence Erlbaum Associates, Inc.

   Back to Top

Author

   Esther Shein is a freelance technology and business writer based in the
   Boston area.

   Back to Top

Figures

   UF1 Figure. Second-grade students in Kevin Jarrett's Elementary
   'STEMLAB' at Northfield Community School (New Jersey) participate in
   the 2013 Hour of Code.

   Back to top
     __________________________________________________________________

   짤2014 ACM  0001-0782/14/02

   Permission to make digital or hard copies of part or all of this work
   for personal or classroom use is granted without fee provided that
   copies are not made or distributed for profit or commercial advantage
   and that copies bear this notice and full citation on the first page.
   Copyright for components of this work owned by others than ACM must be
   honored. Abstracting with credit is permitted. To copy otherwise, to
   republish, to post on servers, or to redistribute to lists, requires
   prior specific permission and/or fee. Request permission to publish
   from permissions@acm.org or fax (212) 869-0481.

   The Digital Library is published by the Association for Computing
   Machinery. Copyright 짤 2014 ACM, Inc.
     __________________________________________________________________

Comments
     __________________________________________________________________

CACM Administrator

   March 24, 2014 11:56

   The following letter was published in the Letters to the Editor in the
   April 2014 CACM (http://cacm.acm.org/magazines/2014/4/173227).
   --CACM Administrator

   As explored in Esther Shein's news story "Should Everybody Learn to
   Code?" (Feb. 2014), educators should indeed teach everybody to code,
   even if not all become programmers. After all, throughout the
   English-speaking world, we aim to teach everybody to write good
   English, even though we do not expect all of them to write novels for a
   living.

   William Clocksin
   Hatfield, U.K.
     __________________________________________________________________

   Displaying 1 comment

Comment on this article

   Signed comments submitted to this site are moderated and will appear if
   they are relevant to the topic and not abusive. Your comment will
   appear with your username if published. View our policy on comments


   __________
   __________
   __________
   __________
   __________
   __________

   (Please sign in or create an ACM Web Account to access this feature.)

   Create an Account
   (BUTTON) Submit for review

Log in to Submit a Signed Comment

Sign In 쨩

Sign In

   Signed comments submitted to this site are moderated and will appear if
   they are relevant to the topic and not abusive. Your comment will
   appear with your username if published. View our policy on comments
   Username Incorrect username or password. ____________________
   Password ____________________
   Forgot Password? (BUTTON) Sign In

Create a Web Account

An email verification has been sent to youremail@email.com

   ACM veries that you are the owner of the email address you've provided
   by sending you a verication message. The email message will contain a
   link that you must click to validate this account.

NEXT STEP: CHECK YOUR EMAIL

   You must click the link within the message in order to complete the
   process of creating your account. You may click on the link embedded in
   the message, or copy the link and paste it into your browser.
   Sign In for Full Access
   User Name ____________________
   Password ____________________
   쨩 Forgot Password? 쨩 Create an ACM Web Account (BUTTON) Sign In

Article Contents:

     Introduction

     What You Should Learn

     The Flip Side

     The State of Computer Science in Public Education

     Looking Ahead

     Further Reading

     Author

     Figures

   More News & opinions

Steve Matteson: Fonts in the Time of Wearables

   CNET

ACM-ICPC World Finals: St. Petersburg State University Wins!

   Chas Kurtz

Soft Infrastructure Challenges to Scientific Knowledge Discovery

   John Leslie King, Paul F. Uhlir
   ACM Resources

Linux+ Certification Second Edition (Part 2): Linux Filesystem

   Courses

   ">
     * For Authors
     * For Advertisers For Advertisers
     * Privacy Policy
     * Help
     * Contact Us
     * Mobile Site

   Copyright 짤 2014 by the ACM. All rights reserved.
